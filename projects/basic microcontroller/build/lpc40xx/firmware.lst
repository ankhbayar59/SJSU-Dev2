
build/lpc40xx/firmware.elf:     file format elf32-littlearm
build/lpc40xx/firmware.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002c91

Program Header:
0x70000001 off    0x000190c0 vaddr 0x000090c0 paddr 0x000090c0 align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00009178 memsz 0x00009178 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00009178 align 2**16
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x000200f0 vaddr 0x100000f0 paddr 0x100000f0 align 2**16
         filesz 0x00000000 memsz 0x00000ae0 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000090a8  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  10000000  00009178  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  20000000  20000000  000200f0  2**2
                  CONTENTS
  3 .bss          00000ae0  100000f0  100000f0  000200f0  2**3
                  ALLOC
  4 .ARM.extab    00000018  000090a8  000090a8  000190a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx    000000b8  000090c0  000090c0  000190c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200f0  2**2
                  CONTENTS
  7 .noinit_RAM2  00000000  20000000  20000000  000200f0  2**2
                  CONTENTS
  8 .noinit       00000000  10000bd0  10000bd0  000200f0  2**2
                  CONTENTS
  9 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 10 .comment      00000079  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 11 .debug_info   000983de  00000000  00000000  00020199  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000066dc  00000000  00000000  000b8577  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000012f0  00000000  00000000  000bec53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001250  00000000  00000000  000bff43  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009f8c  00000000  00000000  000c1193  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00037725  00000000  00000000  000cb11f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00005f38  00000000  00000000  00102844  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
100000f0 l    d  .bss	00000000 .bss
000090a8 l    d  .ARM.extab	00000000 .ARM.extab
000090c0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10000bd0 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
0000879c l     O .text	00000004 config::kSystemClockRateMhz
000043a6 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000043c2 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000087a0 l     O .text	00000004 config::kRtosFrequency
00004408 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00004424 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00004a14 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00004a30 l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000053f8 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
10000064 l     O .data	00000004 (anonymous namespace)::system_controller
10000800 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
10000068 l     O .data	00000008 (anonymous namespace)::uart0
10000070 l     O .data	00000008 (anonymous namespace)::system_timer
10000084 l     O .data	00000004 (anonymous namespace)::interrupt_controller
00005820 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00005844 l     F .text	00000038 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
00008fbc l     O .text	0000000c sjsu::InitializePlatform()::file
00005d40 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00005ee4 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00005f54 l     F .text	0000016c __static_initialization_and_destruction_0(int, int)
000063ca l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /mnt/c/SJSU-Dev2/tools/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU-Dev2/tools/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
0000032c l     F .text	00000000 __do_global_dtors_aux
100000f0 l       .bss	00000001 completed.10274
00000350 l     F .text	00000000 frame_dummy
100000f4 l       .bss	00000018 object.10279
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00007e20 l     O .text	00000009 irs()::file
00002790 l     F .text	00000028 __tcf_0
000027b8 l     F .text	00000140 __static_initialization_and_destruction_0(int, int)
000028f8 l     F .text	00000010 _GLOBAL__sub_I_bus
00000000 l    df *ABS*	00000000 task_scheduler.cpp
00002908 l     F .text	00000026 _Unwind_GetGR
00002a5c l     F .text	0000005c __static_initialization_and_destruction_0(int, int)
00002ab8 l     F .text	00000010 _GLOBAL__sub_I__ZN4sjsu4rtos13TaskScheduler7RunTaskEPv
00000000 l    df *ABS*	00000000 exceptions.cpp
00002c80 l       .text	00000000 handler2_address_const
00002d10 l     F .text	0000005c __static_initialization_and_destruction_0(int, int)
00002d6c l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 tasks.c
10000760 l     O .bss	00000064 pxReadyTasksLists
100007c4 l     O .bss	00000004 uxTopReadyPriority
100007c8 l     O .bss	00000004 xYieldPending
100007cc l     O .bss	00000004 uxSchedulerSuspended
100007d0 l     O .bss	00000004 ulTaskSwitchedInTime
100007d4 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00002f62 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
00002f7e l     F .text	0000002e _strlen(char const*)
00002fac l     F .text	00000028 _is_digit(char)
00002fd4 l     F .text	00000048 _atoi(char const**)
0000301c l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
0000325e l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
0000332e l     F .text	000000de _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00008770 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
0000340c l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00003850 l     F .text	000008d6 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
00004198 l     F .text	000000c8 _trace_write_semihosting_stdout(char const*, unsigned int)
100007d8 l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
00006400 l       .text	00000000 pxCurrentTCBConst2
00006470 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 functional.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00006b74 l     F .text	00000012 selfrel_offset31
00006b88 l     F .text	0000005c search_EIT_table
00006be4 l     F .text	00000028 __gnu_unwind_get_pr_addr
00006c0c l     F .text	0000009c get_eit_entry
00006ca8 l     F .text	00000058 restore_non_core_regs
00006d00 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
00006d0c l     F .text	00000004 __gnu_unwind_24bit.isra.0
00006d10 l     F .text	00000002 _Unwind_DebugHook
00006d14 l     F .text	0000003a unwind_phase2
00006d50 l     F .text	000000ca unwind_phase2_forced
00006f28 l     F .text	00000018 _Unwind_GetGR
00006f70 l     F .text	00000018 _Unwind_SetGR
00007000 l     F .text	000002a8 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
000076d8 l     F .text	00000036 next_unwind_byte
00007710 l     F .text	0000001a _Unwind_GetGR.constprop.0
0000772c l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000090 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00002930  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00007690 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
00006e20 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
00001084  w    F .text	0000001c sjsu::lpc40xx::Gpio::LocalInterruptRegister() const
00004528  w    F .text	0000004c sjsu::cortex::SystemTimer::SystemTimerHandler()
000025c8  w    F .text	00000020 std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)
100007f8  w    O .bss	00000001 sjsu::cortex::SystemTimer::dwt_counter
00004574  w    F .text	00000022 std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
00002b64  w    F .text	0000006c sjsu::InitializeBssSection()
00002e40 g     F .text	00000010 _getpid
00008ef4  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
00000c74  w    F .text	00000070 sjsu::lpc40xx::Gpio::InterruptHandler()
0000251c  w    F .text	00000020 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)
00004634  w    F .text	00000078 sjsu::cortex::SystemTimer::GetCount()
00008f50  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
10000080  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::current_vector
0000192c g     F .text	00000050 irs()
0000430c  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
000049d4  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
000006b4  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const
10000748  w    O .bss	00000004 guard variable for sjsu::Uptime
00001c60  w    F .text	00000054 std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})
10000bc8  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController<43u, 5ul>::table
10000008  w    O .data	00000004 sjsu::newlib::in
00005c44  w    F .text	00000044 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
10000bc0  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
000010a0  w    F .text	00000116 Bus::Initialize()
00000e3c  w    F .text	0000002e sjsu::lpc40xx::Gpio::Toggle() const
000004d8  w    F .text	00000014 sjsu::lpc40xx::Pin::Initialize() const
0000473c  w    F .text	00000020 sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const
000044d8  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
00007b0c g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
00004128 g     F .text	00000044 printf
00000a1c  w    F .text	00000018 auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)
0000103c  w    F .text	00000048 sjsu::lpc40xx::Gpio::IsAValidPort() const
000007fc  w    F .text	0000001a std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()
00000000 g       *ABS*	00000000 __vectors_start__
000026ec  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()
0000067c  w    F .text	0000001c sjsu::Gpio::SetAsInput() const
00005e0a  w    F .text	00000016 std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))
00005ab8  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00000640  w    F .text	0000001e sjsu::Gpio::SetHigh() const
000059aa  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
0000614c  w    F .text	00000040 sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)
00005bec  w    F .text	00000058 sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()
00005dcc  w    F .text	0000001e std::array<std::function<void ()>, 59u>::operator[](unsigned int)
00006342  w    F .text	0000001a std::array<std::function<void ()>, 59u>::data()
000023d8  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()
00001e70  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)48, (char)48>()
000029bc  w    F .text	00000098 sjsu::debug::PrintBacktrace(bool, void*)
00000a90  w    F .text	0000002c sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const
20000000 g       *ABS*	00000000 __base_RAM2
0000754c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
0000766c g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
1000010c  w    O .bss	00000004 sjsu::InterruptController::platform_interrupt_controller
00009178 g       .ARM.exidx	00000000 __exidx_end
00000960  w    F .text	00000020 sjsu::Gpio::Gpio()
00007b44  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
0000587c g     F .text	00000014 ThreadRuntimeCounter
000072a8 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
00002422  w    F .text	00000018 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
00004484  w    F .text	0000001c sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)
00004bd0  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
00001c60  w    F .text	00000054 std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})
1000075c g     O .bss	00000004 pxCurrentTCB
00002130  w    F .text	00000020 bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())
000079f8 g     F .text	0000000a .hidden _Unwind_GetRegionStart
0000243a  w    F .text	00000016 std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)
000004a8  w    F .text	00000030 sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)
0000766c g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
0000518c  w    F .text	00000038 sjsu::Uart::Read() const
00008eec  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
0000274a  w    F .text	00000018 void (* const&std::_Any_data::_M_access<void (*)()>() const)()
00000720  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)
10010000 g       *ABS*	00000000 __top_SRAM
10000bcc g     O .bss	00000004 errno
00009178 g       .ARM.exidx	00000000 _etext
00005a82  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00000590  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00004cc8  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
000076b4 g     F .text	00000022 .hidden _Unwind_Backtrace
10000110  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
000065d0 g     F .text	00000160 .hidden __aeabi_fadd
000065cc g     F .text	00000164 .hidden __subsf3
00004dd0  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00008f88  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
0000752c g     F .text	00000018 .hidden __restore_core_regs
0000756c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00006372  w    F .text	0000002c __gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)
000020d6  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
00005c44  w    F .text	00000044 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
00008ee8  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
00008fdc  w    O .text	00000020 vtable for sjsu::lpc40xx::Uart
00007b48  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00005110  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
00006e1c g     F .text	00000004 .hidden _Unwind_GetCFA
00007a90 g     F .text	0000001c memcpy
00004e34  w    F .text	00000198 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006490 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
00006f40 g     F .text	0000002e .hidden _Unwind_VRS_Set
00005a1c  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00006880 g     F .text	00000000 .hidden __aeabi_uldivmod
10000bd0 g       .noinit	00000000 _noinit
00004de8  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000009d4  w    F .text	00000048 sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const
00002e9c g     F .text	00000048 puts
00000b3a  w    F .text	00000030 sjsu::lpc17xx::Pin::PinRegisterLookup() const
0000485a  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000051f0  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
00005ade  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
00001f84  w    F .text	00000024 std::_Function_handler<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_invoke(std::_Any_data const&)
00004afc  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
10000014  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
0000040a  w    F .text	00000022 std::_Function_base::_M_empty() const
00007aac g     F .text	00000050 _raise_r
00006738 g     F .text	0000001c .hidden __aeabi_i2f
00005158  w    F .text	0000001e sjsu::Pin::PullUp() const
00002386  w    F .text	00000032 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)
1000013c  w    O .bss	00000400 sjsu::lpc40xx::Gpio::handlers
0000075e  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)48>()
10010000 g       *ABS*	00000000 __top_RAM
00006410 g     F .text	00000066 xPortPendSVHandler
00001f0c  w    F .text	0000001e std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000ec0  w    F .text	0000001c sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()
0000065e  w    F .text	0000001e sjsu::Gpio::SetLow() const
00004364  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00000554  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
00007b30 g     F .text	00000004 _getpid_r
000051c4  w    F .text	0000002a sjsu::Uart::PollingFlush() const
00006f88 g     F .text	00000076 .hidden __gnu_Unwind_Backtrace
00005e5e  w    F .text	00000086 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
10000000 g     O .data	00000000 .hidden __dso_handle
00001a40  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
000007fc  w    F .text	0000001a std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()
10010000 g       *ABS*	00000000 StackTop
00000980  w    F .text	00000040 sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)
00006290  w    F .text	00000034 sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)
00005c88  w    F .text	00000042 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)
00005b5a  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
000068b0 g     F .text	000002c2 .hidden __udivmoddi4
00005974  w    F .text	00000036 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
000000fc g       .text	00000000 bss_section_table
00007b4c  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
000047e8  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00005bc4  w    F .text	00000028 std::array<std::function<void ()>, 59u>::array()
0000755c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
00001f60  w    F .text	00000024 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())
20008000 g       *ABS*	00000000 __top_RAM2
000072b4 g     F .text	00000278 .hidden _Unwind_VRS_Pop
000072b0  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
0000475c  w    F .text	0000008c sjsu::cortex::SystemTimer::StartTimer() const
10000bb8  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00000ec0  w    F .text	0000001c sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()
000076b4 g     F .text	00000022 .hidden ___Unwind_Backtrace
000022d2  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00002978  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
00008fa0  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00000edc  w    F .text	000000dc sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)
00007e6c  w    O .text	00000024 vtable for sjsu::Gpio
20000000 g       *ABS*	00000000 __user_heap_base
000090c0 g       .ARM.extab	00000000 __exidx_start
000061c0  w    F .text	0000002e void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)
00005f26  w    F .text	0000002e std::array<std::function<void ()>, 59u>::~array()
00000698  w    F .text	0000001c sjsu::Gpio::SetAsOutput() const
0000618c  w    F .text	00000018 std::array<std::function<void ()>, 59u>::begin()
0000257e  w    F .text	00000018 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
00007a48 g     F .text	00000048 __libc_init_array
000060c0  w    F .text	00000030 sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)
00005368  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00007624 g     F .text	00000022 .hidden ___Unwind_RaiseException
10000000 g       *ABS*	00000000 __base_SRAM
00001fa8  w    F .text	00000056 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000249e  w    F .text	00000016 std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
000048ec  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00007a1c g     F .text	0000000e abort
00007648 g     F .text	00000022 .hidden ___Unwind_Resume
000048d4  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000050  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
00005e20  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))
10000744  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
00006304  w    F .text	0000003e std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
00080000 g       *ABS*	00000000 __top_FLASH
000024f2  w    F .text	0000002a std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&, std::integral_constant<bool, true>)
00006478 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
0000218a  w    F .text	0000001c std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)
00002680  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))
000003b2  w    F .text	00000016 std::_Any_data::_M_access() const
00007b50  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
00000ce4  w    F .text	000000ac sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)
00006518 g     F .text	0000000a std::terminate()
00006524 g     F .text	0000009e .hidden __aeabi_d2f
00007574 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
000003e4  w    F .text	00000026 std::_Function_base::~_Function_base()
00005a1c  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000022f6  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
000065cc g     F .text	00000164 .hidden __aeabi_fsub
0000568e  w    F .text	00000092 sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
00001d46  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
10000bc4  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
00002c68 g     F .text	00000026 ArmHardFaultHandler
000000e4 g       .text	00000000 section_table_start
00000fb8  w    F .text	00000084 sjsu::lpc40xx::Gpio::DetachInterrupt() const
000048b2  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10000bd0 g       .bss	00000000 _ebss
000063b4  w    F .text	00000016 std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])
000023b8  w    F .text	00000020 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)
000057fc  w    F .text	00000024 sjsu::lpc40xx::Uart::FifoHasData() const
00008ffc  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
00001cf4  w    F .text	0000002c std::function<void ()>::operator()() const
00009038  w    O .text	0000000e sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()::file
10000020  w    O .data	00000004 sjsu::cortex::SystemTimer::ticks_per_millisecond
00004b78  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
000046ac  w    F .text	00000090 sjsu::cortex::SystemTimer::Initialize() const
000043e6  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00006764 g     F .text	0000007c .hidden __floatdisf
00005176  w    F .text	00000016 sjsu::Uart::Flush() const
00008f70  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00002be4 g     F .text	00000084 GetRegistersFromStack
000062c4  w    F .text	00000040 sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()
00005d10  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()
1000074c  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::function_map
00002010  w    F .text	00000016 bool std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_not_empty_function<{lambda()#1}>({lambda()#1} const&)
000008f2  w    F .text	0000001a std::function<bool ()>::~function()
0000135c  w    F .text	00000096 Bus::io_write(unsigned char, unsigned char)
000008f2  w    F .text	0000001a std::function<bool ()>::~function()
00007b58  w    O .text	00000008 sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file
00002150  w    F .text	00000016 std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())
0000036c  w    F .text	00000018 operator new(unsigned int, void*)
00000ce4  w    F .text	000000ac sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)
20008000 g       *ABS*	00000000 __top_SRAM_AHB
00007544 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00005890  w    F .text	000000e4 sjsu::InitializePlatform()
10000580  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::InterruptRegister(int)::interrupt
00009048 g     O .text	00000020 __sf_fake_stderr
000022d2  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00006508 g     F .text	00000010 std::get_terminate()
00007e50  w    O .text	0000001c vtable for sjsu::lpc17xx::Pin
10000bd0 g       .bss	00000000 end
00001a80  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00007648 g     F .text	00000022 .hidden _Unwind_Resume
00006eec g     F .text	0000000c .hidden _Unwind_DeleteException
00006ee8 g     F .text	00000002 .hidden _Unwind_Complete
00004c80  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
00001f2a  w    F .text	00000020 bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
00000000 g       *ABS*	00000000 __base_Flash
00002ef0 g     F .text	00000072 _out_chunk(char, void*, unsigned int, unsigned int)
00002080  w    F .text	00000056 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)
00009020  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
000023f0  w    F .text	00000032 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
00008f04  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
00000444  w    F .text	00000034 sjsu::Pin::Pin(unsigned char, unsigned char)
0000417a g     F .text	0000001e trace_write
000060f0  w    F .text	0000005c sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)
00001ab4  w    F .text	00000054 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
10000bbc  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
100000f0 g       .bss	00000000 _bss
00008f38  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00005394  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecimal(float)
00005a68  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()
100007f0  w    O .bss	00000008 sjsu::cortex::SystemTimer::millisecond_count
0000416c g     F .text	0000000e trace_initialize
00000a34  w    F .text	0000005c sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const
000064f2 g     F .text	00000006 __cxa_pure_virtual
00004e0c  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00005dea  w    F .text	00000020 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const
00001e56  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)56, (char)48>()
0000152c  w    F .text	00000218 Bus::polling(unsigned char, unsigned char)
000008dc  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}::operator()() const
00006738 g     F .text	0000001c .hidden __floatsisf
00008f78  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
100007fc  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00007730 g     F .text	0000029c .hidden __gnu_unwind_execute
00002554  w    F .text	0000002a std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::integral_constant<bool, true>)
00004a60  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00007554 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00000490  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
00001c10  w    F .text	00000022 bool std::chrono::operator<=<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
00001e8a  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
0000090c  w    F .text	0000003a sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)
000049f0  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
00007eac  w    O .text	0000001c vtable for sjsu::Pin
00001a66  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()
00001260  w    F .text	000000fc Bus::put_data_address(unsigned char, unsigned char)
10000bd0 g       .noinit	00000000 _end_noinit
00002732  w    F .text	00000018 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>()
000003c8  w    F .text	0000001c std::_Function_base::_Function_base()
00002596  w    F .text	00000032 std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)
00004b54  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00002d7c g     F .text	000000c4 vTaskSwitchContext
00001d98  w    F .text	00000054 std::function<void ()>::function<void (*)(), void, void>(void (*)())
0000203c  w    F .text	00000024 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&)
00008ef0  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
000044a0  w    F .text	00000020 sjsu::SystemController::SetPlatformController(sjsu::SystemController*)
00005a02  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00006e94 g     F .text	00000044 .hidden __gnu_Unwind_Resume
00005cca  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
00007a2c g     F .text	0000001c __cxa_atexit
10000558  w    O .bss	00000028 sjsu::lpc40xx::Gpio::InterruptRegister(int)::interrupt
00004260  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
00008f80  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
00007564 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00004910  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
0000635c  w    F .text	00000016 std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)
00001cda  w    F .text	0000001a std::function<void ()>::function()
00007b54  w    O .text	00000004 sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes
00000abc  w    F .text	00000048 sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const
00002600  w    F .text	00000032 std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
00006754 g     F .text	0000008c .hidden __floatundisf
10000130  w    O .bss	00000004 sjsu::lpc17xx::Pin::function_map
00007624 g     F .text	00000022 .hidden _Unwind_RaiseException
00007a18  w    F .text	00000002 .hidden __aeabi_ldiv0
00000ea6  w    F .text	0000001a std::function<void ()>::~function()
10000028  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
00002bd0  w    F .text	00000014 sjsu::SystemInitialize()
100007e0  w    O .bss	00000010 sjsu::cortex::SystemTimer::callback
000025e8  w    F .text	00000018 void (**&std::_Any_data::_M_access<void (**)()>())()
00006730 g     F .text	00000024 .hidden __aeabi_ui2f
00002282  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)56, (char)48>()
000000e4 g       .text	00000000 data_section_table
00000786  w    F .text	0000002c std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
10000118  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
00002450  w    F .text	0000004e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)
10000754  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::open_drain_map
00000b04  w    F .text	00000036 sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)
000064a8 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
00004338  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
000061ee  w    F .text	00000018 sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)
00000818  w    F .text	000000c4 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)
000004a8  w    F .text	00000030 sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)
00009068 g     O .text	00000020 __sf_fake_stdin
00000744  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)48>()
000002fc g       .text	00000000 __CRP_WORD_START__
00001cda  w    F .text	0000001a std::function<void ()>::function()
00006208  w    F .text	00000030 sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)
00005094  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
0000042c  w    F .text	00000018 sjsu::InterruptController::GetPlatformController()
20000000 g       *ABS*	00000000 __base_SRAM_AHB
000045ea  w    F .text	0000004a std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)
0000197c g     F .text	000000c4 main
000042a4  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00005772  w    F .text	0000004e sjsu::lpc40xx::Uart::Read(void*, unsigned int) const
0000183c  w    F .text	000000ee Bus::Bus()
00006764 g     F .text	0000007c .hidden __aeabi_l2f
00001ffe  w    F .text	00000012 std::chrono::duration_values<long long>::max()
00001b7e  w    F .text	00000032 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const
20000000 g       *ABS*	00000000 heap
000064f8 g     F .text	00000006 std::__throw_bad_function_call()
000042c4  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
00008fa8  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00007e90  w    O .text	0000001c vtable for sjsu::lpc40xx::Pin
00006524 g     F .text	0000009e .hidden __truncdfsf2
00000320 g       .text	00000000 __init_array_end
000063e0 g     F .text	00000026 vPortSVCHandler
00000000 g       *ABS*	00000000 __base_FLASH
100007dc  w    O .bss	00000004 sjsu::SystemController::platform_system_controller
00008efc  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
1000000c  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00006754 g     F .text	0000008c .hidden __aeabi_ul2f
0000183c  w    F .text	000000ee Bus::Bus()
00004448  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00006e80 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
000003e4  w    F .text	00000026 std::_Function_base::~_Function_base()
00002632  w    F .text	00000018 std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
000021fc  w    F .text	00000044 std::function<void ()>::function(std::function<void ()> const&)
000021fc  w    F .text	00000044 std::function<void ()>::function(std::function<void ()> const&)
00004d94  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000ea6  w    F .text	0000001a std::function<void ()>::~function()
00001ee4  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()
000009c0  w    F .text	00000014 sjsu::lpc17xx::Pin::Initialize() const
00002762  w    F .text	00000016 void (* const*std::__addressof<void (* const)()>(void (* const&)()))()
00006ed8 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
10000750  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::resistor_map
10000004  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
00005f26  w    F .text	0000002e std::array<std::function<void ()>, 59u>::~array()
00005b96  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
00000320 g     F .text	00000000 _fini
0000752c g     F .text	00000018 .hidden restore_core_regs
00004b94  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00001744  w    F .text	000000f8 Bus::check_key(unsigned char, unsigned char)
00007e14  w    O .text	00000009 sjsu::lpc40xx::Gpio::IsAValidPort() const::file
00007610 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00004596  w    F .text	00000054 std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)
00008f98  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
00000e6a  w    F .text	00000024 sjsu::lpc40xx::Gpio::Read() const
000044c0  w    F .text	00000018 sjsu::SystemController::GetPlatformController()
00001e22  w    F .text	00000034 std::function<void ()>::operator=(decltype(nullptr))
00000960  w    F .text	00000020 sjsu::Gpio::Gpio()
1000003c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
0000264a  w    F .text	00000020 std::function<void ()>::operator bool() const
000057d8  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00000946  w    F .text	0000001a sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)
000065c4 g     F .text	0000016c .hidden __aeabi_frsub
00000444  w    F .text	00000034 sjsu::Pin::Pin(unsigned char, unsigned char)
00002240  w    F .text	00000042 std::function<void ()>::swap(std::function<void ()>&)
1000008c g     O .data	00000004 _impure_ptr
00008f00  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00004800  w    F .text	0000001e units::linear_scale<float>::operator()() const
000042ec  w    F .text	00000020 sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)
00000b6c  w    F .text	00000074 sjsu::lpc40xx::Gpio::GpioRegister(int)
00004d58  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000030c g       .text	00000000 __preinit_array_end
0000639e  w    F .text	00000016 void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()
000005c4  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
10000000 g       .data	00000000 _data
00001d6a  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
00005720  w    F .text	00000052 sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const
0000481e  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
000024b4  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
00002312  w    F .text	00000074 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00007a04 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
00008f20  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
10000bb4  w    O .bss	00000004 guard variable for sjsu::cortex::SystemTimer::callback
000059e6  w    F .text	0000001c std::function<void ()>::function(decltype(nullptr))
00005f08  w    F .text	0000001e std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)
00000df8  w    F .text	00000044 sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const
00002c90 g     F .text	00000080 ArmResetHandler
00006238  w    F .text	00000058 sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)
00002778  w    F .text	00000018 void (*&std::_Any_data::_M_access<void (*)()>())()
000006d0  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
00001b08  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::max()
00006ef8 g     F .text	0000002e .hidden _Unwind_VRS_Get
000003c8  w    F .text	0000001c std::_Function_base::_Function_base()
10000088 g     O .data	00000004 __cxxabiv1::__terminate_handler
000075fc g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00004c04  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
00002166  w    F .text	00000024 std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())
00004c38  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
00002e6c g     F .text	00000030 _write
000079cc g     F .text	0000002a .hidden __gnu_unwind_frame
00007690 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
100000f0 g       .data	00000000 _edata
1000053c  w    O .bss	00000018 sjsu::lpc40xx::Gpio::GpioRegister(int)::port
10000804  w    O .bss	000003b0 sjsu::cortex::InterruptController<43u, 5ul>::table
00001bb0  w    F .text	00000060 std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
10000138  w    O .bss	00000004 sjsu::lpc17xx::Pin::open_drain_map
000057c0  w    F .text	00000018 sjsu::lpc40xx::Uart::HasData() const
00000d90  w    F .text	00000068 sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const
00007e2c  w    O .text	00000024 vtable for sjsu::lpc40xx::Gpio
000022aa  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)48, (char)48>()
000021a6  w    F .text	00000056 std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00001c32  w    F .text	0000002e std::function<bool ()>::operator()() const
0000253c  w    F .text	00000018 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*>()
1000007c  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::nvic
00008f08  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
000026be  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()
00005b02  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
10000078  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::scb
00006730 g     F .text	00000024 .hidden __floatunsisf
000064fe g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
000075b8 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00008ee4  w    O .text	00000004 sjsu::cortex::SystemTimer::kFixedPointScaling
00002e50 g     F .text	0000001a _kill
00002ac8  w    F .text	0000009c sjsu::InitializeDataSection()
000061a4  w    F .text	0000001c std::array<std::function<void ()>, 59u>::end()
00005bc4  w    F .text	00000028 std::array<std::function<void ()>, 59u>::array()
000007b4  w    F .text	00000048 sjsu::DefaultUptime()
00001ab4  w    F .text	00000054 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
00009088 g     O .text	00000020 __sf_fake_stdout
00000384  w    F .text	00000018 std::numeric_limits<long long>::max()
00000980  w    F .text	00000040 sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)
00002026  w    F .text	00000016 std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)
0000030c g       .text	00000000 __init_array_start
00007a18  w    F .text	00000002 .hidden __aeabi_idiv0
00001d20  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
00001dec  w    F .text	00000036 std::function<void ()>::operator=(std::function<void ()> const&)
0000266a  w    F .text	00000016 std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))
0000039c  w    F .text	00000016 std::_Any_data::_M_access()
00005a50  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00002ee4 g     F .text	0000000c _exit
00002704  w    F .text	00000018 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const
00008f90  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000024  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
0000271c  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const* std::__addressof<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const&)
10000584 g     O .bss	000001c0 bus
00004386  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
00002060  w    F .text	00000020 std::_Function_handler<bool (), sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
000052d0  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
00000e8e  w    F .text	00000018 sjsu::lpc40xx::Gpio::GetPin() const
00000478  w    F .text	00000018 sjsu::Pin::GetPort() const
000026d6  w    F .text	00000016 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()
00007b34 g     F .text	00000010 strlen
10000120  w    O .bss	00000010 sjsu::Uptime
000004ec  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
00001b30  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
000072ac  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
00005db4  w    F .text	00000018 sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)
000011b6  w    F .text	000000aa Bus::put_address(unsigned char)
00004fcc  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000064c8 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
0000531c  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
00008fc8  w    O .text	00000014 vtable for sjsu::cortex::InterruptController<43u, 5ul>
10000018  w    O .data	00000008 sjsu::cortex::SystemTimer::nanoseconds_per_tick
00005d5c  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00000520  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
0000030c g       .text	00000000 __preinit_array_start
00005cf2  w    F .text	0000001e std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00004d10  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
10000758  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::handlers
000067e0 g     F .text	00000000 .hidden __aeabi_ldivmod
00002a54  w    F .text	00000008 sjsu::Halt()
00000c60  w    F .text	00000014 sjsu::lpc40xx::Gpio::InterruptStatus()
00008ef8  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
000064e8 g     F .text	0000000a __aeabi_atexit
00001d98  w    F .text	00000054 std::function<void ()>::function<void (*)(), void, void>(void (*)())
000059e6  w    F .text	0000001c std::function<void ()>::function(decltype(nullptr))
000065d0 g     F .text	00000160 .hidden __addsf3
00001a80  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00001cb4  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)
00000be0  w    F .text	00000080 sjsu::lpc40xx::Gpio::InterruptRegister(int)
10000134  w    O .bss	00000004 sjsu::lpc17xx::Pin::resistor_map
00008f68  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
000055e4  w    F .text	000000aa sjsu::lpc40xx::Uart::Initialize(unsigned long) const
10000010  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00007afc g     F .text	00000010 raise
000013f2  w    F .text	00000138 Bus::io_read(unsigned char)
10000554  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::GpioRegister(int)::port
00001f4a  w    F .text	00000016 std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 91 2c 00 00 ed 5b 00 00 69 2c 00 00     .....,...[..i,..
      10:	ed 5b 00 00 ed 5b 00 00 ed 5b 00 00 00 00 00 00     .[...[...[......
	...
      2c:	e1 63 00 00 ed 5b 00 00 00 00 00 00 11 64 00 00     .c...[.......d..
      3c:	ed 5b 00 00 ed 5b 00 00 ed 5b 00 00 ed 5b 00 00     .[...[...[...[..
      4c:	ed 5b 00 00 ed 5b 00 00 ed 5b 00 00 ed 5b 00 00     .[...[...[...[..
      5c:	ed 5b 00 00 ed 5b 00 00 ed 5b 00 00 ed 5b 00 00     .[...[...[...[..
      6c:	ed 5b 00 00 ed 5b 00 00 ed 5b 00 00 ed 5b 00 00     .[...[...[...[..
      7c:	ed 5b 00 00 ed 5b 00 00 ed 5b 00 00 ed 5b 00 00     .[...[...[...[..
      8c:	ed 5b 00 00 ed 5b 00 00 ed 5b 00 00 ed 5b 00 00     .[...[...[...[..
      9c:	ed 5b 00 00 ed 5b 00 00 ed 5b 00 00 ed 5b 00 00     .[...[...[...[..
      ac:	ed 5b 00 00 ed 5b 00 00 ed 5b 00 00 ed 5b 00 00     .[...[...[...[..
      bc:	ed 5b 00 00 ed 5b 00 00 ed 5b 00 00 ed 5b 00 00     .[...[...[...[..
      cc:	ed 5b 00 00 ed 5b 00 00 ed 5b 00 00 ed 5b 00 00     .[...[...[...[..
      dc:	ed 5b 00 00 ed 5b 00 00                             .[...[..

000000e4 <data_section_table>:
      e4:	00009178 	.word	0x00009178
      e8:	10000000 	.word	0x10000000
      ec:	000000f0 	.word	0x000000f0
      f0:	00009178 	.word	0x00009178
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	100000f0 	.word	0x100000f0
     100:	00000ae0 	.word	0x00000ae0
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	00000351 	.word	0x00000351
     310:	000028f9 	.word	0x000028f9
     314:	00002ab9 	.word	0x00002ab9
     318:	00002d6d 	.word	0x00002d6d
     31c:	000063cb 	.word	0x000063cb

00000320 <_fini>:
     320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     322:	bf00      	nop
     324:	bcf8      	pop	{r3, r4, r5, r6, r7}
     326:	bc08      	pop	{r3}
     328:	469e      	mov	lr, r3
     32a:	4770      	bx	lr

0000032c <__do_global_dtors_aux>:
     32c:	b510      	push	{r4, lr}
     32e:	4c05      	ldr	r4, [pc, #20]	; (344 <__do_global_dtors_aux+0x18>)
     330:	7823      	ldrb	r3, [r4, #0]
     332:	b933      	cbnz	r3, 342 <__do_global_dtors_aux+0x16>
     334:	4b04      	ldr	r3, [pc, #16]	; (348 <__do_global_dtors_aux+0x1c>)
     336:	b113      	cbz	r3, 33e <__do_global_dtors_aux+0x12>
     338:	4804      	ldr	r0, [pc, #16]	; (34c <__do_global_dtors_aux+0x20>)
     33a:	f3af 8000 	nop.w
     33e:	2301      	movs	r3, #1
     340:	7023      	strb	r3, [r4, #0]
     342:	bd10      	pop	{r4, pc}
     344:	100000f0 	.word	0x100000f0
     348:	00000000 	.word	0x00000000
     34c:	000090c0 	.word	0x000090c0

00000350 <frame_dummy>:
     350:	b508      	push	{r3, lr}
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <frame_dummy+0x10>)
     354:	b11b      	cbz	r3, 35e <frame_dummy+0xe>
     356:	4903      	ldr	r1, [pc, #12]	; (364 <frame_dummy+0x14>)
     358:	4803      	ldr	r0, [pc, #12]	; (368 <frame_dummy+0x18>)
     35a:	f3af 8000 	nop.w
     35e:	bd08      	pop	{r3, pc}
     360:	00000000 	.word	0x00000000
     364:	100000f4 	.word	0x100000f4
     368:	000090c0 	.word	0x000090c0

0000036c <operator new(unsigned int, void*)>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
     36c:	b480      	push	{r7}
     36e:	b083      	sub	sp, #12
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
     374:	6039      	str	r1, [r7, #0]
     376:	683b      	ldr	r3, [r7, #0]
     378:	4618      	mov	r0, r3
     37a:	370c      	adds	r7, #12
     37c:	46bd      	mov	sp, r7
     37e:	f85d 7b04 	ldr.w	r7, [sp], #4
     382:	4770      	bx	lr

00000384 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     384:	b480      	push	{r7}
     386:	af00      	add	r7, sp, #0
     388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     38c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
     390:	4610      	mov	r0, r2
     392:	4619      	mov	r1, r3
     394:	46bd      	mov	sp, r7
     396:	f85d 7b04 	ldr.w	r7, [sp], #4
     39a:	4770      	bx	lr

0000039c <std::_Any_data::_M_access()>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
     39c:	b480      	push	{r7}
     39e:	b083      	sub	sp, #12
     3a0:	af00      	add	r7, sp, #0
     3a2:	6078      	str	r0, [r7, #4]
     3a4:	687b      	ldr	r3, [r7, #4]
     3a6:	4618      	mov	r0, r3
     3a8:	370c      	adds	r7, #12
     3aa:	46bd      	mov	sp, r7
     3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
     3b0:	4770      	bx	lr

000003b2 <std::_Any_data::_M_access() const>:
    const void* _M_access() const { return &_M_pod_data[0]; }
     3b2:	b480      	push	{r7}
     3b4:	b083      	sub	sp, #12
     3b6:	af00      	add	r7, sp, #0
     3b8:	6078      	str	r0, [r7, #4]
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	4618      	mov	r0, r3
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <std::_Function_base::_Function_base()>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	2200      	movs	r2, #0
     3d4:	609a      	str	r2, [r3, #8]
     3d6:	687b      	ldr	r3, [r7, #4]
     3d8:	4618      	mov	r0, r3
     3da:	370c      	adds	r7, #12
     3dc:	46bd      	mov	sp, r7
     3de:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e2:	4770      	bx	lr

000003e4 <std::_Function_base::~_Function_base()>:

    ~_Function_base()
     3e4:	b580      	push	{r7, lr}
     3e6:	b082      	sub	sp, #8
     3e8:	af00      	add	r7, sp, #0
     3ea:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
     3ec:	687b      	ldr	r3, [r7, #4]
     3ee:	689b      	ldr	r3, [r3, #8]
     3f0:	2b00      	cmp	r3, #0
     3f2:	d005      	beq.n	400 <std::_Function_base::~_Function_base()+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	689b      	ldr	r3, [r3, #8]
     3f8:	6878      	ldr	r0, [r7, #4]
     3fa:	6879      	ldr	r1, [r7, #4]
     3fc:	2203      	movs	r2, #3
     3fe:	4798      	blx	r3
    }
     400:	687b      	ldr	r3, [r7, #4]
     402:	4618      	mov	r0, r3
     404:	3708      	adds	r7, #8
     406:	46bd      	mov	sp, r7
     408:	bd80      	pop	{r7, pc}

0000040a <std::_Function_base::_M_empty() const>:

    bool _M_empty() const { return !_M_manager; }
     40a:	b480      	push	{r7}
     40c:	b083      	sub	sp, #12
     40e:	af00      	add	r7, sp, #0
     410:	6078      	str	r0, [r7, #4]
     412:	687b      	ldr	r3, [r7, #4]
     414:	689b      	ldr	r3, [r3, #8]
     416:	2b00      	cmp	r3, #0
     418:	bf0c      	ite	eq
     41a:	2301      	moveq	r3, #1
     41c:	2300      	movne	r3, #0
     41e:	b2db      	uxtb	r3, r3
     420:	4618      	mov	r0, r3
     422:	370c      	adds	r7, #12
     424:	46bd      	mov	sp, r7
     426:	f85d 7b04 	ldr.w	r7, [sp], #4
     42a:	4770      	bx	lr

0000042c <sjsu::InterruptController::GetPlatformController()>:
  static void SetPlatformController(InterruptController * interrupt_controller)
  {
    platform_interrupt_controller = interrupt_controller;
  }
  /// Retrieve a reference of the platforms interrupt controller
  static sjsu::InterruptController & GetPlatformController()
     42c:	b480      	push	{r7}
     42e:	af00      	add	r7, sp, #0
  {
    return *platform_interrupt_controller;
     430:	4b03      	ldr	r3, [pc, #12]	; (440 <sjsu::InterruptController::GetPlatformController()+0x14>)
     432:	681b      	ldr	r3, [r3, #0]
  }
     434:	4618      	mov	r0, r3
     436:	46bd      	mov	sp, r7
     438:	f85d 7b04 	ldr.w	r7, [sp], #4
     43c:	4770      	bx	lr
     43e:	bf00      	nop
     440:	1000010c 	.word	0x1000010c

00000444 <sjsu::Pin::Pin(unsigned char, unsigned char)>:
    /// resistor.
    kRepeater
  };

  /// Set internal port and pin values.
  constexpr Pin(uint8_t port, uint8_t pin) : port_(port), pin_(pin) {}
     444:	b480      	push	{r7}
     446:	b083      	sub	sp, #12
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	460b      	mov	r3, r1
     44e:	70fb      	strb	r3, [r7, #3]
     450:	4613      	mov	r3, r2
     452:	70bb      	strb	r3, [r7, #2]
     454:	4a07      	ldr	r2, [pc, #28]	; (474 <sjsu::Pin::Pin(unsigned char, unsigned char)+0x30>)
     456:	687b      	ldr	r3, [r7, #4]
     458:	601a      	str	r2, [r3, #0]
     45a:	687b      	ldr	r3, [r7, #4]
     45c:	78fa      	ldrb	r2, [r7, #3]
     45e:	711a      	strb	r2, [r3, #4]
     460:	687b      	ldr	r3, [r7, #4]
     462:	78ba      	ldrb	r2, [r7, #2]
     464:	715a      	strb	r2, [r3, #5]
     466:	687b      	ldr	r3, [r7, #4]
     468:	4618      	mov	r0, r3
     46a:	370c      	adds	r7, #12
     46c:	46bd      	mov	sp, r7
     46e:	f85d 7b04 	ldr.w	r7, [sp], #4
     472:	4770      	bx	lr
     474:	00007eb4 	.word	0x00007eb4

00000478 <sjsu::Pin::GetPort() const>:
  {
    SetPull(Resistor::kNone);
  }

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     478:	b480      	push	{r7}
     47a:	b083      	sub	sp, #12
     47c:	af00      	add	r7, sp, #0
     47e:	6078      	str	r0, [r7, #4]
  {
    return port_;
     480:	687b      	ldr	r3, [r7, #4]
     482:	791b      	ldrb	r3, [r3, #4]
  }
     484:	4618      	mov	r0, r3
     486:	370c      	adds	r7, #12
     488:	46bd      	mov	sp, r7
     48a:	f85d 7b04 	ldr.w	r7, [sp], #4
     48e:	4770      	bx	lr

00000490 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     490:	b480      	push	{r7}
     492:	b083      	sub	sp, #12
     494:	af00      	add	r7, sp, #0
     496:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     498:	687b      	ldr	r3, [r7, #4]
     49a:	795b      	ldrb	r3, [r3, #5]
  }
     49c:	4618      	mov	r0, r3
     49e:	370c      	adds	r7, #12
     4a0:	46bd      	mov	sp, r7
     4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a6:	4770      	bx	lr

000004a8 <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)>:

  /// Construct a pin for the specified port and pin numbers.
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}
     4a8:	b580      	push	{r7, lr}
     4aa:	b082      	sub	sp, #8
     4ac:	af00      	add	r7, sp, #0
     4ae:	6078      	str	r0, [r7, #4]
     4b0:	460b      	mov	r3, r1
     4b2:	70fb      	strb	r3, [r7, #3]
     4b4:	4613      	mov	r3, r2
     4b6:	70bb      	strb	r3, [r7, #2]
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	78ba      	ldrb	r2, [r7, #2]
     4bc:	78f9      	ldrb	r1, [r7, #3]
     4be:	4618      	mov	r0, r3
     4c0:	f7ff ffc0 	bl	444 <sjsu::Pin::Pin(unsigned char, unsigned char)>
     4c4:	4a03      	ldr	r2, [pc, #12]	; (4d4 <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)+0x2c>)
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	601a      	str	r2, [r3, #0]
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	4618      	mov	r0, r3
     4ce:	3708      	adds	r7, #8
     4d0:	46bd      	mov	sp, r7
     4d2:	bd80      	pop	{r7, pc}
     4d4:	00007e98 	.word	0x00007e98

000004d8 <sjsu::lpc40xx::Pin::Initialize() const>:

  /// NOTE: GPIO hardare is enabled and ready by default on reset.
  void Initialize() const override {}
     4d8:	b480      	push	{r7}
     4da:	b083      	sub	sp, #12
     4dc:	af00      	add	r7, sp, #0
     4de:	6078      	str	r0, [r7, #4]
     4e0:	bf00      	nop
     4e2:	370c      	adds	r7, #12
     4e4:	46bd      	mov	sp, r7
     4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
     4ea:	4770      	bx	lr

000004ec <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:

  void SetPinFunction(uint8_t function) const override
     4ec:	b580      	push	{r7, lr}
     4ee:	b082      	sub	sp, #8
     4f0:	af00      	add	r7, sp, #0
     4f2:	6078      	str	r0, [r7, #4]
     4f4:	460b      	mov	r3, r1
     4f6:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     4f8:	4b08      	ldr	r3, [pc, #32]	; (51c <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     4fa:	78f9      	ldrb	r1, [r7, #3]
     4fc:	781a      	ldrb	r2, [r3, #0]
     4fe:	785b      	ldrb	r3, [r3, #1]
     500:	021b      	lsls	r3, r3, #8
     502:	431a      	orrs	r2, r3
     504:	2300      	movs	r3, #0
     506:	f362 030f 	bfi	r3, r2, #0, #16
     50a:	461a      	mov	r2, r3
     50c:	6878      	ldr	r0, [r7, #4]
     50e:	f000 f859 	bl	5c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     512:	bf00      	nop
     514:	3708      	adds	r7, #8
     516:	46bd      	mov	sp, r7
     518:	bd80      	pop	{r7, pc}
     51a:	bf00      	nop
     51c:	00007b44 	.word	0x00007b44

00000520 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     520:	b580      	push	{r7, lr}
     522:	b082      	sub	sp, #8
     524:	af00      	add	r7, sp, #0
     526:	6078      	str	r0, [r7, #4]
     528:	460b      	mov	r3, r1
     52a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     52c:	4b08      	ldr	r3, [pc, #32]	; (550 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     52e:	78f9      	ldrb	r1, [r7, #3]
     530:	781a      	ldrb	r2, [r3, #0]
     532:	785b      	ldrb	r3, [r3, #1]
     534:	021b      	lsls	r3, r3, #8
     536:	431a      	orrs	r2, r3
     538:	2300      	movs	r3, #0
     53a:	f362 030f 	bfi	r3, r2, #0, #16
     53e:	461a      	mov	r2, r3
     540:	6878      	ldr	r0, [r7, #4]
     542:	f000 f83f 	bl	5c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     546:	bf00      	nop
     548:	3708      	adds	r7, #8
     54a:	46bd      	mov	sp, r7
     54c:	bd80      	pop	{r7, pc}
     54e:	bf00      	nop
     550:	00007b48 	.word	0x00007b48

00000554 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     554:	b580      	push	{r7, lr}
     556:	b082      	sub	sp, #8
     558:	af00      	add	r7, sp, #0
     55a:	6078      	str	r0, [r7, #4]
     55c:	460b      	mov	r3, r1
     55e:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     560:	78fb      	ldrb	r3, [r7, #3]
     562:	f083 0301 	eor.w	r3, r3, #1
     566:	b2db      	uxtb	r3, r3
     568:	4619      	mov	r1, r3
     56a:	4b08      	ldr	r3, [pc, #32]	; (58c <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     56c:	781a      	ldrb	r2, [r3, #0]
     56e:	785b      	ldrb	r3, [r3, #1]
     570:	021b      	lsls	r3, r3, #8
     572:	431a      	orrs	r2, r3
     574:	2300      	movs	r3, #0
     576:	f362 030f 	bfi	r3, r2, #0, #16
     57a:	461a      	mov	r2, r3
     57c:	6878      	ldr	r0, [r7, #4]
     57e:	f000 f821 	bl	5c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     582:	bf00      	nop
     584:	3708      	adds	r7, #8
     586:	46bd      	mov	sp, r7
     588:	bd80      	pop	{r7, pc}
     58a:	bf00      	nop
     58c:	00007b4c 	.word	0x00007b4c

00000590 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     590:	b580      	push	{r7, lr}
     592:	b082      	sub	sp, #8
     594:	af00      	add	r7, sp, #0
     596:	6078      	str	r0, [r7, #4]
     598:	460b      	mov	r3, r1
     59a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     59c:	78f9      	ldrb	r1, [r7, #3]
     59e:	4b08      	ldr	r3, [pc, #32]	; (5c0 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     5a0:	781a      	ldrb	r2, [r3, #0]
     5a2:	785b      	ldrb	r3, [r3, #1]
     5a4:	021b      	lsls	r3, r3, #8
     5a6:	431a      	orrs	r2, r3
     5a8:	2300      	movs	r3, #0
     5aa:	f362 030f 	bfi	r3, r2, #0, #16
     5ae:	461a      	mov	r2, r3
     5b0:	6878      	ldr	r0, [r7, #4]
     5b2:	f000 f807 	bl	5c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     5b6:	bf00      	nop
     5b8:	3708      	adds	r7, #8
     5ba:	46bd      	mov	sp, r7
     5bc:	bd80      	pop	{r7, pc}
     5be:	bf00      	nop
     5c0:	00007b50 	.word	0x00007b50

000005c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5c6:	b087      	sub	sp, #28
     5c8:	af00      	add	r7, sp, #0
     5ca:	60f8      	str	r0, [r7, #12]
     5cc:	460b      	mov	r3, r1
     5ce:	80ba      	strh	r2, [r7, #4]
     5d0:	72fb      	strb	r3, [r7, #11]
     5d2:	68fb      	ldr	r3, [r7, #12]
     5d4:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     5d6:	4b19      	ldr	r3, [pc, #100]	; (63c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     5d8:	681c      	ldr	r4, [r3, #0]
     5da:	693b      	ldr	r3, [r7, #16]
     5dc:	4618      	mov	r0, r3
     5de:	f7ff ff4b 	bl	478 <sjsu::Pin::GetPort() const>
     5e2:	4603      	mov	r3, r0
     5e4:	461d      	mov	r5, r3
     5e6:	693b      	ldr	r3, [r7, #16]
     5e8:	4618      	mov	r0, r3
     5ea:	f7ff ff51 	bl	490 <sjsu::Pin::GetPin() const>
     5ee:	4603      	mov	r3, r0
     5f0:	461a      	mov	r2, r3
     5f2:	016b      	lsls	r3, r5, #5
     5f4:	4413      	add	r3, r2
     5f6:	009b      	lsls	r3, r3, #2
     5f8:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     5fa:	681b      	ldr	r3, [r3, #0]
     5fc:	7af9      	ldrb	r1, [r7, #11]
     5fe:	687a      	ldr	r2, [r7, #4]
     600:	4618      	mov	r0, r3
     602:	f001 fa1d 	bl	1a40 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     606:	4605      	mov	r5, r0
     608:	68fb      	ldr	r3, [r7, #12]
     60a:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     60c:	4b0b      	ldr	r3, [pc, #44]	; (63c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     60e:	681c      	ldr	r4, [r3, #0]
     610:	697b      	ldr	r3, [r7, #20]
     612:	4618      	mov	r0, r3
     614:	f7ff ff30 	bl	478 <sjsu::Pin::GetPort() const>
     618:	4603      	mov	r3, r0
     61a:	461e      	mov	r6, r3
     61c:	697b      	ldr	r3, [r7, #20]
     61e:	4618      	mov	r0, r3
     620:	f7ff ff36 	bl	490 <sjsu::Pin::GetPin() const>
     624:	4603      	mov	r3, r0
     626:	461a      	mov	r2, r3
     628:	0173      	lsls	r3, r6, #5
     62a:	4413      	add	r3, r2
     62c:	009b      	lsls	r3, r3, #2
     62e:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     630:	601d      	str	r5, [r3, #0]
  }
     632:	bf00      	nop
     634:	371c      	adds	r7, #28
     636:	46bd      	mov	sp, r7
     638:	bdf0      	pop	{r4, r5, r6, r7, pc}
     63a:	bf00      	nop
     63c:	10000110 	.word	0x10000110

00000640 <sjsu::Gpio::SetHigh() const>:

  // ==============================
  // Utility Methods
  // ==============================
  /// Set pin to HIGH voltage
  void SetHigh() const
     640:	b580      	push	{r7, lr}
     642:	b082      	sub	sp, #8
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
  {
    Set(State::kHigh);
     648:	687b      	ldr	r3, [r7, #4]
     64a:	681b      	ldr	r3, [r3, #0]
     64c:	3304      	adds	r3, #4
     64e:	681b      	ldr	r3, [r3, #0]
     650:	2101      	movs	r1, #1
     652:	6878      	ldr	r0, [r7, #4]
     654:	4798      	blx	r3
  }
     656:	bf00      	nop
     658:	3708      	adds	r7, #8
     65a:	46bd      	mov	sp, r7
     65c:	bd80      	pop	{r7, pc}

0000065e <sjsu::Gpio::SetLow() const>:
  /// Set pin to LOW voltage
  void SetLow() const
     65e:	b580      	push	{r7, lr}
     660:	b082      	sub	sp, #8
     662:	af00      	add	r7, sp, #0
     664:	6078      	str	r0, [r7, #4]
  {
    Set(State::kLow);
     666:	687b      	ldr	r3, [r7, #4]
     668:	681b      	ldr	r3, [r3, #0]
     66a:	3304      	adds	r3, #4
     66c:	681b      	ldr	r3, [r3, #0]
     66e:	2100      	movs	r1, #0
     670:	6878      	ldr	r0, [r7, #4]
     672:	4798      	blx	r3
  }
     674:	bf00      	nop
     676:	3708      	adds	r7, #8
     678:	46bd      	mov	sp, r7
     67a:	bd80      	pop	{r7, pc}

0000067c <sjsu::Gpio::SetAsInput() const>:
  /// Set pin direction as input
  void SetAsInput() const
     67c:	b580      	push	{r7, lr}
     67e:	b082      	sub	sp, #8
     680:	af00      	add	r7, sp, #0
     682:	6078      	str	r0, [r7, #4]
  {
    SetDirection(Direction::kInput);
     684:	687b      	ldr	r3, [r7, #4]
     686:	681b      	ldr	r3, [r3, #0]
     688:	681b      	ldr	r3, [r3, #0]
     68a:	2100      	movs	r1, #0
     68c:	6878      	ldr	r0, [r7, #4]
     68e:	4798      	blx	r3
  }
     690:	bf00      	nop
     692:	3708      	adds	r7, #8
     694:	46bd      	mov	sp, r7
     696:	bd80      	pop	{r7, pc}

00000698 <sjsu::Gpio::SetAsOutput() const>:
  /// Set pin direction as output
  void SetAsOutput() const
     698:	b580      	push	{r7, lr}
     69a:	b082      	sub	sp, #8
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
  {
    SetDirection(Direction::kOutput);
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	681b      	ldr	r3, [r3, #0]
     6a4:	681b      	ldr	r3, [r3, #0]
     6a6:	2101      	movs	r1, #1
     6a8:	6878      	ldr	r0, [r7, #4]
     6aa:	4798      	blx	r3
  }
     6ac:	bf00      	nop
     6ae:	3708      	adds	r7, #8
     6b0:	46bd      	mov	sp, r7
     6b2:	bd80      	pop	{r7, pc}

000006b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
     6b4:	b480      	push	{r7}
     6b6:	b083      	sub	sp, #12
     6b8:	af00      	add	r7, sp, #0
     6ba:	6078      	str	r0, [r7, #4]
	{ return __r; }
     6bc:	687b      	ldr	r3, [r7, #4]
     6be:	e9d3 2300 	ldrd	r2, r3, [r3]
     6c2:	4610      	mov	r0, r2
     6c4:	4619      	mov	r1, r3
     6c6:	370c      	adds	r7, #12
     6c8:	46bd      	mov	sp, r7
     6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ce:	4770      	bx	lr

000006d0 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      }

    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
     6d0:	b5b0      	push	{r4, r5, r7, lr}
     6d2:	b086      	sub	sp, #24
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
     6d8:	6039      	str	r1, [r7, #0]
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() < __ct(__rhs).count();
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
     6e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
     6e4:	f107 0308 	add.w	r3, r7, #8
     6e8:	4618      	mov	r0, r3
     6ea:	f7ff ffe3 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     6ee:	4604      	mov	r4, r0
     6f0:	460d      	mov	r5, r1
     6f2:	683b      	ldr	r3, [r7, #0]
     6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
     6f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
     6fc:	f107 0310 	add.w	r3, r7, #16
     700:	4618      	mov	r0, r3
     702:	f7ff ffd7 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     706:	4602      	mov	r2, r0
     708:	460b      	mov	r3, r1
     70a:	4294      	cmp	r4, r2
     70c:	eb75 0303 	sbcs.w	r3, r5, r3
     710:	bfb4      	ite	lt
     712:	2301      	movlt	r3, #1
     714:	2300      	movge	r3, #0
     716:	b2db      	uxtb	r3, r3
      }
     718:	4618      	mov	r0, r3
     71a:	3718      	adds	r7, #24
     71c:	46bd      	mov	sp, r7
     71e:	bdb0      	pop	{r4, r5, r7, pc}

00000720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     720:	b480      	push	{r7}
     722:	b083      	sub	sp, #12
     724:	af00      	add	r7, sp, #0
     726:	6078      	str	r0, [r7, #4]
     728:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     72a:	683b      	ldr	r3, [r7, #0]
     72c:	e9d3 2300 	ldrd	r2, r3, [r3]
     730:	6879      	ldr	r1, [r7, #4]
     732:	e9c1 2300 	strd	r2, r3, [r1]
     736:	687b      	ldr	r3, [r7, #4]
     738:	4618      	mov	r0, r3
     73a:	370c      	adds	r7, #12
     73c:	46bd      	mov	sp, r7
     73e:	f85d 7b04 	ldr.w	r7, [sp], #4
     742:	4770      	bx	lr

00000744 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)48>()>:
    operator""ns(long double __nsecs)
    { return chrono::duration<long double, nano>{__nsecs}; }

    template <char... _Digits>
      constexpr chrono::nanoseconds
      operator""ns()
     744:	b580      	push	{r7, lr}
     746:	b082      	sub	sp, #8
     748:	af00      	add	r7, sp, #0
     74a:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }
     74c:	687b      	ldr	r3, [r7, #4]
     74e:	4618      	mov	r0, r3
     750:	f000 f805 	bl	75e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)48>()>
     754:	bf00      	nop
     756:	6878      	ldr	r0, [r7, #4]
     758:	3708      	adds	r7, #8
     75a:	46bd      	mov	sp, r7
     75c:	bd80      	pop	{r7, pc}

0000075e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)48>()>:
      constexpr _Dur __check_overflow()
     75e:	b580      	push	{r7, lr}
     760:	b084      	sub	sp, #16
     762:	af00      	add	r7, sp, #0
     764:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
     766:	f04f 0200 	mov.w	r2, #0
     76a:	f04f 0300 	mov.w	r3, #0
     76e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
     772:	f107 0308 	add.w	r3, r7, #8
     776:	4619      	mov	r1, r3
     778:	6878      	ldr	r0, [r7, #4]
     77a:	f7ff ffd1 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
     77e:	6878      	ldr	r0, [r7, #4]
     780:	3710      	adds	r7, #16
     782:	46bd      	mov	sp, r7
     784:	bd80      	pop	{r7, pc}

00000786 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
	operator+=(const duration& __d)
     786:	b5b0      	push	{r4, r5, r7, lr}
     788:	b082      	sub	sp, #8
     78a:	af00      	add	r7, sp, #0
     78c:	6078      	str	r0, [r7, #4]
     78e:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
     790:	6838      	ldr	r0, [r7, #0]
     792:	f7ff ff8f 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     796:	687b      	ldr	r3, [r7, #4]
     798:	e9d3 2300 	ldrd	r2, r3, [r3]
     79c:	1884      	adds	r4, r0, r2
     79e:	eb41 0503 	adc.w	r5, r1, r3
     7a2:	687b      	ldr	r3, [r7, #4]
     7a4:	e9c3 4500 	strd	r4, r5, [r3]
	  return *this;
     7a8:	687b      	ldr	r3, [r7, #4]
	}
     7aa:	4618      	mov	r0, r3
     7ac:	3708      	adds	r7, #8
     7ae:	46bd      	mov	sp, r7
     7b0:	bdb0      	pop	{r4, r5, r7, pc}
     7b2:	Address 0x00000000000007b2 is out of bounds.


000007b4 <sjsu::DefaultUptime()>:
/// means to keep time. It should not be used in production.
///
/// @return the current number of fake uptime nanoseconds that increments each
/// time this function is called.
inline std::chrono::nanoseconds DefaultUptime()
{
     7b4:	b580      	push	{r7, lr}
     7b6:	b086      	sub	sp, #24
     7b8:	af00      	add	r7, sp, #0
     7ba:	6078      	str	r0, [r7, #4]
  static std::chrono::nanoseconds default_uptime = 0ns;
  default_uptime += 1us;
     7bc:	f107 0310 	add.w	r3, r7, #16
     7c0:	4618      	mov	r0, r3
     7c2:	f001 f950 	bl	1a66 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()>
     7c6:	f107 0210 	add.w	r2, r7, #16
     7ca:	f107 0308 	add.w	r3, r7, #8
     7ce:	4611      	mov	r1, r2
     7d0:	4618      	mov	r0, r3
     7d2:	f001 f955 	bl	1a80 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     7d6:	f107 0308 	add.w	r3, r7, #8
     7da:	4619      	mov	r1, r3
     7dc:	4806      	ldr	r0, [pc, #24]	; (7f8 <sjsu::DefaultUptime()+0x44>)
     7de:	f7ff ffd2 	bl	786 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
  return default_uptime;
     7e2:	6879      	ldr	r1, [r7, #4]
     7e4:	4b04      	ldr	r3, [pc, #16]	; (7f8 <sjsu::DefaultUptime()+0x44>)
     7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
     7ea:	e9c1 2300 	strd	r2, r3, [r1]
}
     7ee:	6878      	ldr	r0, [r7, #4]
     7f0:	3718      	adds	r7, #24
     7f2:	46bd      	mov	sp, r7
     7f4:	bd80      	pop	{r7, pc}
     7f6:	bf00      	nop
     7f8:	10000118 	.word	0x10000118

000007fc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
     7fc:	b580      	push	{r7, lr}
     7fe:	b082      	sub	sp, #8
     800:	af00      	add	r7, sp, #0
     802:	6078      	str	r0, [r7, #4]
     804:	687b      	ldr	r3, [r7, #4]
     806:	4618      	mov	r0, r3
     808:	f7ff fdec 	bl	3e4 <std::_Function_base::~_Function_base()>
     80c:	687b      	ldr	r3, [r7, #4]
     80e:	4618      	mov	r0, r3
     810:	3708      	adds	r7, #8
     812:	46bd      	mov	sp, r7
     814:	bd80      	pop	{r7, pc}
     816:	Address 0x0000000000000816 is out of bounds.


00000818 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)>:
///        return true.
/// @param is_done will be run in a tight loop until it returns true or the
///        timeout time has elapsed.
inline Status Wait(std::chrono::nanoseconds timeout,
                   std::function<bool()> is_done)
{
     818:	b580      	push	{r7, lr}
     81a:	b092      	sub	sp, #72	; 0x48
     81c:	af00      	add	r7, sp, #0
     81e:	e9c7 0104 	strd	r0, r1, [r7, #16]
     822:	60fa      	str	r2, [r7, #12]
  std::chrono::nanoseconds timeout_time;
  if (timeout == std::chrono::nanoseconds::max())
     824:	f107 0320 	add.w	r3, r7, #32
     828:	4618      	mov	r0, r3
     82a:	f001 f96d 	bl	1b08 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::max()>
     82e:	f107 0220 	add.w	r2, r7, #32
     832:	f107 0310 	add.w	r3, r7, #16
     836:	4611      	mov	r1, r2
     838:	4618      	mov	r0, r3
     83a:	f001 f979 	bl	1b30 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     83e:	4603      	mov	r3, r0
     840:	2b00      	cmp	r3, #0
     842:	d004      	beq.n	84e <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x36>
  {
    // TODO(#983): This is a cheap hack to keep overflows from happening, but
    // what if the system hsa been on for a long period of time and a new
    // timeout overflows? This needs to be handled properly.
    timeout_time = timeout;
     844:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     848:	e9c7 2306 	strd	r2, r3, [r7, #24]
     84c:	e023      	b.n	896 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x7e>
  }
  else if (timeout == 0ns)
     84e:	f107 0328 	add.w	r3, r7, #40	; 0x28
     852:	4618      	mov	r0, r3
     854:	f7ff ff76 	bl	744 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)48>()>
     858:	f107 0228 	add.w	r2, r7, #40	; 0x28
     85c:	f107 0310 	add.w	r3, r7, #16
     860:	4611      	mov	r1, r2
     862:	4618      	mov	r0, r3
     864:	f001 f964 	bl	1b30 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     868:	4603      	mov	r3, r0
     86a:	2b00      	cmp	r3, #0
     86c:	d001      	beq.n	872 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x5a>
  {
    return Status::kTimedOut;
     86e:	2301      	movs	r3, #1
     870:	e02d      	b.n	8ce <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xb6>
      // this function, we substract 2ns.
      timeout_time = (Uptime() + timeout) - 2us;
    }
    else
    {
      timeout_time = Uptime() + timeout;
     872:	f107 0330 	add.w	r3, r7, #48	; 0x30
     876:	4918      	ldr	r1, [pc, #96]	; (8d8 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xc0>)
     878:	4618      	mov	r0, r3
     87a:	f001 f980 	bl	1b7e <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const>
     87e:	463b      	mov	r3, r7
     880:	f107 0210 	add.w	r2, r7, #16
     884:	f107 0130 	add.w	r1, r7, #48	; 0x30
     888:	4618      	mov	r0, r3
     88a:	f001 f991 	bl	1bb0 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     88e:	e9d7 2300 	ldrd	r2, r3, [r7]
     892:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
  }

  Status status = Status::kTimedOut;
     896:	2301      	movs	r3, #1
     898:	647b      	str	r3, [r7, #68]	; 0x44
  while (Uptime() <= timeout_time)
     89a:	f107 0338 	add.w	r3, r7, #56	; 0x38
     89e:	490e      	ldr	r1, [pc, #56]	; (8d8 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xc0>)
     8a0:	4618      	mov	r0, r3
     8a2:	f001 f96c 	bl	1b7e <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const>
     8a6:	f107 0218 	add.w	r2, r7, #24
     8aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
     8ae:	4611      	mov	r1, r2
     8b0:	4618      	mov	r0, r3
     8b2:	f001 f9ad 	bl	1c10 <bool std::chrono::operator<=<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     8b6:	4603      	mov	r3, r0
     8b8:	2b00      	cmp	r3, #0
     8ba:	d007      	beq.n	8cc <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xb4>
  {
    if (is_done())
     8bc:	68f8      	ldr	r0, [r7, #12]
     8be:	f001 f9b8 	bl	1c32 <std::function<bool ()>::operator()() const>
     8c2:	4603      	mov	r3, r0
     8c4:	2b00      	cmp	r3, #0
     8c6:	d0e8      	beq.n	89a <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x82>
    {
      status = Status::kSuccess;
     8c8:	2300      	movs	r3, #0
     8ca:	647b      	str	r3, [r7, #68]	; 0x44
      break;
    }
  }
  return status;
     8cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
     8ce:	4618      	mov	r0, r3
     8d0:	3748      	adds	r7, #72	; 0x48
     8d2:	46bd      	mov	sp, r7
     8d4:	bd80      	pop	{r7, pc}
     8d6:	bf00      	nop
     8d8:	10000120 	.word	0x10000120

000008dc <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}::operator()() const>:
///
/// @param timeout - the amount of time to wait.
/// @return always returns Status::kTimedOut
inline Status Wait(std::chrono::nanoseconds timeout)
{
  return Wait(timeout, []() -> bool { return false; });
     8dc:	b480      	push	{r7}
     8de:	b083      	sub	sp, #12
     8e0:	af00      	add	r7, sp, #0
     8e2:	6078      	str	r0, [r7, #4]
     8e4:	2300      	movs	r3, #0
     8e6:	4618      	mov	r0, r3
     8e8:	370c      	adds	r7, #12
     8ea:	46bd      	mov	sp, r7
     8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
     8f0:	4770      	bx	lr

000008f2 <std::function<bool ()>::~function()>:
     8f2:	b580      	push	{r7, lr}
     8f4:	b082      	sub	sp, #8
     8f6:	af00      	add	r7, sp, #0
     8f8:	6078      	str	r0, [r7, #4]
     8fa:	687b      	ldr	r3, [r7, #4]
     8fc:	4618      	mov	r0, r3
     8fe:	f7ff fd71 	bl	3e4 <std::_Function_base::~_Function_base()>
     902:	687b      	ldr	r3, [r7, #4]
     904:	4618      	mov	r0, r3
     906:	3708      	adds	r7, #8
     908:	46bd      	mov	sp, r7
     90a:	bd80      	pop	{r7, pc}

0000090c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>:
{
     90c:	b590      	push	{r4, r7, lr}
     90e:	b089      	sub	sp, #36	; 0x24
     910:	af00      	add	r7, sp, #0
     912:	e9c7 0100 	strd	r0, r1, [r7]
  return Wait(timeout, []() -> bool { return false; });
     916:	f107 030c 	add.w	r3, r7, #12
     91a:	4611      	mov	r1, r2
     91c:	4618      	mov	r0, r3
     91e:	f001 f99f 	bl	1c60 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})>
     922:	f107 030c 	add.w	r3, r7, #12
     926:	461a      	mov	r2, r3
     928:	e9d7 0100 	ldrd	r0, r1, [r7]
     92c:	f7ff ff74 	bl	818 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)>
     930:	4604      	mov	r4, r0
     932:	f107 030c 	add.w	r3, r7, #12
     936:	4618      	mov	r0, r3
     938:	f7ff ffdb 	bl	8f2 <std::function<bool ()>::~function()>
     93c:	4623      	mov	r3, r4
}
     93e:	4618      	mov	r0, r3
     940:	3724      	adds	r7, #36	; 0x24
     942:	46bd      	mov	sp, r7
     944:	bd90      	pop	{r4, r7, pc}

00000946 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>:

/// Delay the system for a duration of time
inline void Delay(std::chrono::nanoseconds delay_time)
{
     946:	b580      	push	{r7, lr}
     948:	b082      	sub	sp, #8
     94a:	af00      	add	r7, sp, #0
     94c:	e9c7 0100 	strd	r0, r1, [r7]
  Wait(delay_time);
     950:	e9d7 0100 	ldrd	r0, r1, [r7]
     954:	f7ff ffda 	bl	90c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
}
     958:	bf00      	nop
     95a:	3708      	adds	r7, #8
     95c:	46bd      	mov	sp, r7
     95e:	bd80      	pop	{r7, pc}

00000960 <sjsu::Gpio::Gpio()>:
class Gpio
     960:	b480      	push	{r7}
     962:	b083      	sub	sp, #12
     964:	af00      	add	r7, sp, #0
     966:	6078      	str	r0, [r7, #4]
     968:	4a04      	ldr	r2, [pc, #16]	; (97c <sjsu::Gpio::Gpio()+0x1c>)
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	601a      	str	r2, [r3, #0]
     96e:	687b      	ldr	r3, [r7, #4]
     970:	4618      	mov	r0, r3
     972:	370c      	adds	r7, #12
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr
     97c:	00007e74 	.word	0x00007e74

00000980 <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)>:
  }
  /// Construct a pin for the specified port and pin numbers.
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin)
     980:	b590      	push	{r4, r7, lr}
     982:	b083      	sub	sp, #12
     984:	af00      	add	r7, sp, #0
     986:	6078      	str	r0, [r7, #4]
     988:	460b      	mov	r3, r1
     98a:	70fb      	strb	r3, [r7, #3]
     98c:	4613      	mov	r3, r2
     98e:	70bb      	strb	r3, [r7, #2]
      : sjsu::Pin(port, pin), kPinMask(GetPinsBitmask(pin))
     990:	687b      	ldr	r3, [r7, #4]
     992:	78ba      	ldrb	r2, [r7, #2]
     994:	78f9      	ldrb	r1, [r7, #3]
     996:	4618      	mov	r0, r3
     998:	f7ff fd54 	bl	444 <sjsu::Pin::Pin(unsigned char, unsigned char)>
     99c:	4a07      	ldr	r2, [pc, #28]	; (9bc <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)+0x3c>)
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	601a      	str	r2, [r3, #0]
     9a2:	687c      	ldr	r4, [r7, #4]
     9a4:	78bb      	ldrb	r3, [r7, #2]
     9a6:	4618      	mov	r0, r3
     9a8:	f000 f8ac 	bl	b04 <sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)>
     9ac:	4603      	mov	r3, r0
     9ae:	80e3      	strh	r3, [r4, #6]
  {
  }
     9b0:	687b      	ldr	r3, [r7, #4]
     9b2:	4618      	mov	r0, r3
     9b4:	370c      	adds	r7, #12
     9b6:	46bd      	mov	sp, r7
     9b8:	bd90      	pop	{r4, r7, pc}
     9ba:	bf00      	nop
     9bc:	00007e58 	.word	0x00007e58

000009c0 <sjsu::lpc17xx::Pin::Initialize() const>:

  /// NOTE: GPIO hardare is enabled and ready by default on reset.
  void Initialize() const override {}
     9c0:	b480      	push	{r7}
     9c2:	b083      	sub	sp, #12
     9c4:	af00      	add	r7, sp, #0
     9c6:	6078      	str	r0, [r7, #4]
     9c8:	bf00      	nop
     9ca:	370c      	adds	r7, #12
     9cc:	46bd      	mov	sp, r7
     9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
     9d2:	4770      	bx	lr

000009d4 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const>:

  void SetPinFunction(uint8_t function) const override
     9d4:	b590      	push	{r4, r7, lr}
     9d6:	b085      	sub	sp, #20
     9d8:	af00      	add	r7, sp, #0
     9da:	6078      	str	r0, [r7, #4]
     9dc:	460b      	mov	r3, r1
     9de:	70fb      	strb	r3, [r7, #3]
  {
    uint32_t pin_reg_select = PinRegisterLookup();
     9e0:	6878      	ldr	r0, [r7, #4]
     9e2:	f000 f8aa 	bl	b3a <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
     9e6:	60f8      	str	r0, [r7, #12]
    function_map->pin[pin_reg_select] =
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
     9e8:	4b0b      	ldr	r3, [pc, #44]	; (a18 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
     9ea:	681b      	ldr	r3, [r3, #0]
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    function_map->pin[pin_reg_select] =
     9f2:	4b09      	ldr	r3, [pc, #36]	; (a18 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
     9f4:	681c      	ldr	r4, [r3, #0]
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	78f9      	ldrb	r1, [r7, #3]
     9fa:	88da      	ldrh	r2, [r3, #6]
     9fc:	2300      	movs	r3, #0
     9fe:	f362 030f 	bfi	r3, r2, #0, #16
     a02:	461a      	mov	r2, r3
     a04:	f001 f81c 	bl	1a40 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     a08:	4602      	mov	r2, r0
    function_map->pin[pin_reg_select] =
     a0a:	68fb      	ldr	r3, [r7, #12]
     a0c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  }
     a10:	bf00      	nop
     a12:	3714      	adds	r7, #20
     a14:	46bd      	mov	sp, r7
     a16:	bd90      	pop	{r4, r7, pc}
     a18:	10000130 	.word	0x10000130

00000a1c <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>:
/// @param enum_type_value variable you would like to get the value of.
/// @return the numeric value of the enum class type variable of with the
///         underlying type of the enum class. This should be used in place of
///         static_cast<some_numeric_type>(some_variable).
template <typename Enum>
constexpr auto Value(Enum enum_type_value)
     a1c:	b480      	push	{r7}
     a1e:	b083      	sub	sp, #12
     a20:	af00      	add	r7, sp, #0
     a22:	4603      	mov	r3, r0
     a24:	71fb      	strb	r3, [r7, #7]
{
  using EnumType = std::underlying_type_t<Enum>;
  return static_cast<EnumType>(enum_type_value);
     a26:	79fb      	ldrb	r3, [r7, #7]
}
     a28:	4618      	mov	r0, r3
     a2a:	370c      	adds	r7, #12
     a2c:	46bd      	mov	sp, r7
     a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
     a32:	4770      	bx	lr

00000a34 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     a34:	b5b0      	push	{r4, r5, r7, lr}
     a36:	b084      	sub	sp, #16
     a38:	af00      	add	r7, sp, #0
     a3a:	6078      	str	r0, [r7, #4]
     a3c:	460b      	mov	r3, r1
     a3e:	70fb      	strb	r3, [r7, #3]
      0b10,  // kNone [0]
      0b11,  // kPullDown [1]
      0b00,  // kPullUp   [2]
      0b01,  // kRepeater [3]
    };
    uint32_t pin_reg_select = PinRegisterLookup();
     a40:	6878      	ldr	r0, [r7, #4]
     a42:	f000 f87a 	bl	b3a <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
     a46:	60f8      	str	r0, [r7, #12]
    resistor_map->pin[pin_reg_select] =
        bit::Insert(resistor_map->pin[pin_reg_select],
     a48:	4b0f      	ldr	r3, [pc, #60]	; (a88 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
     a4a:	681b      	ldr	r3, [r3, #0]
     a4c:	68fa      	ldr	r2, [r7, #12]
     a4e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
                    kResistorModes[Value(resistor)],
     a52:	78fb      	ldrb	r3, [r7, #3]
     a54:	4618      	mov	r0, r3
     a56:	f7ff ffe1 	bl	a1c <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>
     a5a:	4603      	mov	r3, r0
     a5c:	461a      	mov	r2, r3
     a5e:	4b0b      	ldr	r3, [pc, #44]	; (a8c <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x58>)
     a60:	5c99      	ldrb	r1, [r3, r2]
    resistor_map->pin[pin_reg_select] =
     a62:	4b09      	ldr	r3, [pc, #36]	; (a88 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
     a64:	681c      	ldr	r4, [r3, #0]
        bit::Insert(resistor_map->pin[pin_reg_select],
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	88da      	ldrh	r2, [r3, #6]
     a6a:	2300      	movs	r3, #0
     a6c:	f362 030f 	bfi	r3, r2, #0, #16
     a70:	461a      	mov	r2, r3
     a72:	4628      	mov	r0, r5
     a74:	f000 ffe4 	bl	1a40 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     a78:	4602      	mov	r2, r0
    resistor_map->pin[pin_reg_select] =
     a7a:	68fb      	ldr	r3, [r7, #12]
     a7c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    kPinMask);
  }
     a80:	bf00      	nop
     a82:	3710      	adds	r7, #16
     a84:	46bd      	mov	sp, r7
     a86:	bdb0      	pop	{r4, r5, r7, pc}
     a88:	10000134 	.word	0x10000134
     a8c:	00007b54 	.word	0x00007b54

00000a90 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const>:
  /// Implement SetAsAnalogMode as deprecated and unsupported
  [[deprecated("Unsupported operation")]]
  void SetAsAnalogMode(bool) const override {
     a90:	b580      	push	{r7, lr}
     a92:	b082      	sub	sp, #8
     a94:	af00      	add	r7, sp, #0
     a96:	6078      	str	r0, [r7, #4]
     a98:	460b      	mov	r3, r1
     a9a:	70fb      	strb	r3, [r7, #3]
    LOG_WARNING("Unsupported operation");
     a9c:	2357      	movs	r3, #87	; 0x57
     a9e:	4a04      	ldr	r2, [pc, #16]	; (ab0 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x20>)
     aa0:	4904      	ldr	r1, [pc, #16]	; (ab4 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x24>)
     aa2:	4805      	ldr	r0, [pc, #20]	; (ab8 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x28>)
     aa4:	f003 fb40 	bl	4128 <printf>
  }
     aa8:	bf00      	nop
     aaa:	3708      	adds	r7, #8
     aac:	46bd      	mov	sp, r7
     aae:	bd80      	pop	{r7, pc}
     ab0:	00007b60 	.word	0x00007b60
     ab4:	00007b58 	.word	0x00007b58
     ab8:	00007ba0 	.word	0x00007ba0

00000abc <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const>:

  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     abc:	b5b0      	push	{r4, r5, r7, lr}
     abe:	b084      	sub	sp, #16
     ac0:	af00      	add	r7, sp, #0
     ac2:	6078      	str	r0, [r7, #4]
     ac4:	460b      	mov	r3, r1
     ac6:	70fb      	strb	r3, [r7, #3]
  {
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
     ac8:	4b0d      	ldr	r3, [pc, #52]	; (b00 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	687a      	ldr	r2, [r7, #4]
     ace:	7912      	ldrb	r2, [r2, #4]
     ad0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                                             set_as_open_drain,
                                             {
                                                 .position = pin_,
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	795b      	ldrb	r3, [r3, #5]
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
     ad8:	733b      	strb	r3, [r7, #12]
     ada:	2301      	movs	r3, #1
     adc:	737b      	strb	r3, [r7, #13]
     ade:	4b08      	ldr	r3, [pc, #32]	; (b00 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
     ae0:	681c      	ldr	r4, [r3, #0]
     ae2:	687b      	ldr	r3, [r7, #4]
     ae4:	791b      	ldrb	r3, [r3, #4]
     ae6:	461d      	mov	r5, r3
     ae8:	78fb      	ldrb	r3, [r7, #3]
     aea:	68fa      	ldr	r2, [r7, #12]
     aec:	4619      	mov	r1, r3
     aee:	f001 f8e1 	bl	1cb4 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
     af2:	4603      	mov	r3, r0
     af4:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
                                                 .width    = 1,
                                             });
  }
     af8:	bf00      	nop
     afa:	3710      	adds	r7, #16
     afc:	46bd      	mov	sp, r7
     afe:	bdb0      	pop	{r4, r5, r7, pc}
     b00:	10000138 	.word	0x10000138

00000b04 <sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)>:

 private:
  /// Utility function for generating bitmasks for specific pins.
  static constexpr bit::Mask GetPinsBitmask(uint8_t pin)
     b04:	b480      	push	{r7}
     b06:	b085      	sub	sp, #20
     b08:	af00      	add	r7, sp, #0
     b0a:	4603      	mov	r3, r0
     b0c:	71fb      	strb	r3, [r7, #7]
  {
    return {
      .position = static_cast<uint8_t>((pin * 2) % kNumberOfPins),
     b0e:	79fb      	ldrb	r3, [r7, #7]
     b10:	005b      	lsls	r3, r3, #1
     b12:	b2db      	uxtb	r3, r3
     b14:	f003 031e 	and.w	r3, r3, #30
     b18:	b2db      	uxtb	r3, r3
      .width    = 2,
    };
     b1a:	733b      	strb	r3, [r7, #12]
     b1c:	2302      	movs	r3, #2
     b1e:	737b      	strb	r3, [r7, #13]
     b20:	2300      	movs	r3, #0
     b22:	7b3a      	ldrb	r2, [r7, #12]
     b24:	f362 0307 	bfi	r3, r2, #0, #8
     b28:	7b7a      	ldrb	r2, [r7, #13]
     b2a:	f362 230f 	bfi	r3, r2, #8, #8
  }
     b2e:	4618      	mov	r0, r3
     b30:	3714      	adds	r7, #20
     b32:	46bd      	mov	sp, r7
     b34:	f85d 7b04 	ldr.w	r7, [sp], #4
     b38:	4770      	bx	lr

00000b3a <sjsu::lpc17xx::Pin::PinRegisterLookup() const>:
  /// Performs the necessary math to figure out which register corresponds to
  /// this objects port.
  ///
  /// @returns index of register in PinTable_t map.
  uint32_t PinRegisterLookup() const
     b3a:	b480      	push	{r7}
     b3c:	b085      	sub	sp, #20
     b3e:	af00      	add	r7, sp, #0
     b40:	6078      	str	r0, [r7, #4]
  {
    uint32_t odd_register = (pin_ > 15) ? 1 : 0;
     b42:	687b      	ldr	r3, [r7, #4]
     b44:	795b      	ldrb	r3, [r3, #5]
     b46:	2b0f      	cmp	r3, #15
     b48:	d901      	bls.n	b4e <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x14>
     b4a:	2301      	movs	r3, #1
     b4c:	e000      	b.n	b50 <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x16>
     b4e:	2300      	movs	r3, #0
     b50:	60fb      	str	r3, [r7, #12]
    return (port_ * 2) + odd_register;
     b52:	687b      	ldr	r3, [r7, #4]
     b54:	791b      	ldrb	r3, [r3, #4]
     b56:	005b      	lsls	r3, r3, #1
     b58:	461a      	mov	r2, r3
     b5a:	68fb      	ldr	r3, [r7, #12]
     b5c:	4413      	add	r3, r2
  }
     b5e:	4618      	mov	r0, r3
     b60:	3714      	adds	r7, #20
     b62:	46bd      	mov	sp, r7
     b64:	f85d 7b04 	ldr.w	r7, [sp], #4
     b68:	4770      	bx	lr
     b6a:	Address 0x0000000000000b6a is out of bounds.


00000b6c <sjsu::lpc40xx::Gpio::GpioRegister(int)>:
  /// @param port_index - which gpio port to get a pointer of.
  /// @return returns a pointer to a LPC_GPIO_TypeDef pointer internal to this
  /// function. The purpose for the double pointer nature is to allow test code
  /// to re-assign the lookup table contents simply by running this function and
  /// assigning the returned result to what ever block of memory you desire.
  static lpc40xx::LPC_GPIO_TypeDef ** GpioRegister(int port_index)
     b6c:	b480      	push	{r7}
     b6e:	b083      	sub	sp, #12
     b70:	af00      	add	r7, sp, #0
     b72:	6078      	str	r0, [r7, #4]
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      static lpc40xx::LPC_GPIO_TypeDef * port[] = {
        lpc40xx::LPC_GPIO0, lpc40xx::LPC_GPIO1, lpc40xx::LPC_GPIO2,
        lpc40xx::LPC_GPIO3, lpc40xx::LPC_GPIO4, lpc40xx::LPC_GPIO5,
      };
     b74:	4b12      	ldr	r3, [pc, #72]	; (bc0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x54>)
     b76:	681b      	ldr	r3, [r3, #0]
     b78:	f003 0301 	and.w	r3, r3, #1
     b7c:	2b00      	cmp	r3, #0
     b7e:	d114      	bne.n	baa <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x3e>
     b80:	4a10      	ldr	r2, [pc, #64]	; (bc4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x58>)
     b82:	4b11      	ldr	r3, [pc, #68]	; (bc8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     b84:	601a      	str	r2, [r3, #0]
     b86:	4a11      	ldr	r2, [pc, #68]	; (bcc <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x60>)
     b88:	4b0f      	ldr	r3, [pc, #60]	; (bc8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     b8a:	605a      	str	r2, [r3, #4]
     b8c:	4a10      	ldr	r2, [pc, #64]	; (bd0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x64>)
     b8e:	4b0e      	ldr	r3, [pc, #56]	; (bc8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     b90:	609a      	str	r2, [r3, #8]
     b92:	4a10      	ldr	r2, [pc, #64]	; (bd4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x68>)
     b94:	4b0c      	ldr	r3, [pc, #48]	; (bc8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     b96:	60da      	str	r2, [r3, #12]
     b98:	4a0f      	ldr	r2, [pc, #60]	; (bd8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x6c>)
     b9a:	4b0b      	ldr	r3, [pc, #44]	; (bc8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     b9c:	611a      	str	r2, [r3, #16]
     b9e:	4a0f      	ldr	r2, [pc, #60]	; (bdc <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x70>)
     ba0:	4b09      	ldr	r3, [pc, #36]	; (bc8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     ba2:	615a      	str	r2, [r3, #20]
     ba4:	4b06      	ldr	r3, [pc, #24]	; (bc0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x54>)
     ba6:	2201      	movs	r2, #1
     ba8:	601a      	str	r2, [r3, #0]
      return &port[port_index];
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	009b      	lsls	r3, r3, #2
     bae:	4a06      	ldr	r2, [pc, #24]	; (bc8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     bb0:	4413      	add	r3, r2
    else  // Used for unit testing
    {
      static lpc40xx::LPC_GPIO_TypeDef * port[6];
      return &port[port_index];
    }
  }
     bb2:	4618      	mov	r0, r3
     bb4:	370c      	adds	r7, #12
     bb6:	46bd      	mov	sp, r7
     bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bbc:	4770      	bx	lr
     bbe:	bf00      	nop
     bc0:	10000554 	.word	0x10000554
     bc4:	20098000 	.word	0x20098000
     bc8:	1000053c 	.word	0x1000053c
     bcc:	20098020 	.word	0x20098020
     bd0:	20098040 	.word	0x20098040
     bd4:	20098060 	.word	0x20098060
     bd8:	20098080 	.word	0x20098080
     bdc:	200980a0 	.word	0x200980a0

00000be0 <sjsu::lpc40xx::Gpio::InterruptRegister(int)>:
  ///
  /// @param interrupt_index - which interrupt port you want to work with. Only
  ///        0 and 1 are valid.
  /// @return returns a pointer to a GpioInterruptRegisterMap_t object internal
  /// to this function.
  static GpioInterruptRegisterMap_t * InterruptRegister(int interrupt_index)
     be0:	b480      	push	{r7}
     be2:	b083      	sub	sp, #12
     be4:	af00      	add	r7, sp, #0
     be6:	6078      	str	r0, [r7, #4]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO2IntStatF),
            .clear          = &(lpc40xx::LPC_GPIOINT->IO2IntClr),
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO2IntEnR),
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO2IntEnF),
        },
      };
     be8:	4b1a      	ldr	r3, [pc, #104]	; (c54 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x74>)
     bea:	681b      	ldr	r3, [r3, #0]
     bec:	f003 0301 	and.w	r3, r3, #1
     bf0:	2b00      	cmp	r3, #0
     bf2:	d122      	bne.n	c3a <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x5a>
     bf4:	4b18      	ldr	r3, [pc, #96]	; (c58 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x78>)
            .rising_status  = &(lpc40xx::LPC_GPIOINT->IO0IntStatR),
     bf6:	4a19      	ldr	r2, [pc, #100]	; (c5c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     bf8:	3204      	adds	r2, #4
      };
     bfa:	601a      	str	r2, [r3, #0]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO0IntStatF),
     bfc:	4a17      	ldr	r2, [pc, #92]	; (c5c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     bfe:	3208      	adds	r2, #8
      };
     c00:	605a      	str	r2, [r3, #4]
            .clear          = &(lpc40xx::LPC_GPIOINT->IO0IntClr),
     c02:	4a16      	ldr	r2, [pc, #88]	; (c5c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c04:	320c      	adds	r2, #12
      };
     c06:	609a      	str	r2, [r3, #8]
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO0IntEnR),
     c08:	4a14      	ldr	r2, [pc, #80]	; (c5c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c0a:	3210      	adds	r2, #16
      };
     c0c:	60da      	str	r2, [r3, #12]
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO0IntEnF),
     c0e:	4a13      	ldr	r2, [pc, #76]	; (c5c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c10:	3214      	adds	r2, #20
      };
     c12:	611a      	str	r2, [r3, #16]
     c14:	3314      	adds	r3, #20
            .rising_status  = &(lpc40xx::LPC_GPIOINT->IO2IntStatR),
     c16:	4a11      	ldr	r2, [pc, #68]	; (c5c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c18:	3224      	adds	r2, #36	; 0x24
      };
     c1a:	601a      	str	r2, [r3, #0]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO2IntStatF),
     c1c:	4a0f      	ldr	r2, [pc, #60]	; (c5c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c1e:	3228      	adds	r2, #40	; 0x28
      };
     c20:	605a      	str	r2, [r3, #4]
            .clear          = &(lpc40xx::LPC_GPIOINT->IO2IntClr),
     c22:	4a0e      	ldr	r2, [pc, #56]	; (c5c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c24:	322c      	adds	r2, #44	; 0x2c
      };
     c26:	609a      	str	r2, [r3, #8]
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO2IntEnR),
     c28:	4a0c      	ldr	r2, [pc, #48]	; (c5c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c2a:	3230      	adds	r2, #48	; 0x30
      };
     c2c:	60da      	str	r2, [r3, #12]
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO2IntEnF),
     c2e:	4a0b      	ldr	r2, [pc, #44]	; (c5c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c30:	3234      	adds	r2, #52	; 0x34
      };
     c32:	611a      	str	r2, [r3, #16]
     c34:	4b07      	ldr	r3, [pc, #28]	; (c54 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x74>)
     c36:	2201      	movs	r2, #1
     c38:	601a      	str	r2, [r3, #0]
      return &interrupt[interrupt_index];
     c3a:	687a      	ldr	r2, [r7, #4]
     c3c:	4613      	mov	r3, r2
     c3e:	009b      	lsls	r3, r3, #2
     c40:	4413      	add	r3, r2
     c42:	009b      	lsls	r3, r3, #2
     c44:	4a04      	ldr	r2, [pc, #16]	; (c58 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x78>)
     c46:	4413      	add	r3, r2
    else  // Used for unit testing
    {
      static GpioInterruptRegisterMap_t interrupt[kInterruptPorts];
      return &interrupt[interrupt_index];
    }
  }
     c48:	4618      	mov	r0, r3
     c4a:	370c      	adds	r7, #12
     c4c:	46bd      	mov	sp, r7
     c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
     c52:	4770      	bx	lr
     c54:	10000580 	.word	0x10000580
     c58:	10000558 	.word	0x10000558
     c5c:	40028080 	.word	0x40028080

00000c60 <sjsu::lpc40xx::Gpio::InterruptStatus()>:

  /// @return a pointer to the interrupt status register based on the current
  /// building platform.
  static volatile uint32_t * InterruptStatus()
     c60:	b480      	push	{r7}
     c62:	af00      	add	r7, sp, #0
  {
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      return &lpc40xx::LPC_GPIOINT->IntStatus;
     c64:	4b02      	ldr	r3, [pc, #8]	; (c70 <sjsu::lpc40xx::Gpio::InterruptStatus()+0x10>)
    else  // Used for unit testing
    {
      static volatile uint32_t status;
      return &status;
    }
  }
     c66:	4618      	mov	r0, r3
     c68:	46bd      	mov	sp, r7
     c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
     c6e:	4770      	bx	lr
     c70:	40028080 	.word	0x40028080

00000c74 <sjsu::lpc40xx::Gpio::InterruptHandler()>:

  /// The gpio interrupt handler that calls the attached interrupt callbacks.
  static void InterruptHandler()
     c74:	b580      	push	{r7, lr}
     c76:	b084      	sub	sp, #16
     c78:	af00      	add	r7, sp, #0
  {
    int triggered_port;
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      triggered_port = *InterruptStatus() >> 2;
     c7a:	f7ff fff1 	bl	c60 <sjsu::lpc40xx::Gpio::InterruptStatus()>
     c7e:	4603      	mov	r3, r0
     c80:	681b      	ldr	r3, [r3, #0]
     c82:	089b      	lsrs	r3, r3, #2
     c84:	60fb      	str	r3, [r7, #12]
    else
    {
      triggered_port = *InterruptStatus() >> 2;
    }

    auto * interrupt  = InterruptRegister(triggered_port);
     c86:	68f8      	ldr	r0, [r7, #12]
     c88:	f7ff ffaa 	bl	be0 <sjsu::lpc40xx::Gpio::InterruptRegister(int)>
     c8c:	60b8      	str	r0, [r7, #8]
    int status        = *interrupt->rising_status | *interrupt->falling_status;
     c8e:	68bb      	ldr	r3, [r7, #8]
     c90:	681b      	ldr	r3, [r3, #0]
     c92:	681a      	ldr	r2, [r3, #0]
     c94:	68bb      	ldr	r3, [r7, #8]
     c96:	685b      	ldr	r3, [r3, #4]
     c98:	681b      	ldr	r3, [r3, #0]
     c9a:	4313      	orrs	r3, r2
     c9c:	607b      	str	r3, [r7, #4]
    int triggered_pin = __builtin_ctz(status);
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	fa93 f3a3 	rbit	r3, r3
     ca4:	fab3 f383 	clz	r3, r3
     ca8:	603b      	str	r3, [r7, #0]

    handlers[triggered_port][triggered_pin]();
     caa:	68fb      	ldr	r3, [r7, #12]
     cac:	015a      	lsls	r2, r3, #5
     cae:	683b      	ldr	r3, [r7, #0]
     cb0:	4413      	add	r3, r2
     cb2:	011b      	lsls	r3, r3, #4
     cb4:	4a0a      	ldr	r2, [pc, #40]	; (ce0 <sjsu::lpc40xx::Gpio::InterruptHandler()+0x6c>)
     cb6:	4413      	add	r3, r2
     cb8:	4618      	mov	r0, r3
     cba:	f001 f81b 	bl	1cf4 <std::function<void ()>::operator()() const>
    *interrupt->clear |= (1 << triggered_pin);
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	689b      	ldr	r3, [r3, #8]
     cc2:	681a      	ldr	r2, [r3, #0]
     cc4:	2101      	movs	r1, #1
     cc6:	683b      	ldr	r3, [r7, #0]
     cc8:	fa01 f303 	lsl.w	r3, r1, r3
     ccc:	4619      	mov	r1, r3
     cce:	68bb      	ldr	r3, [r7, #8]
     cd0:	689b      	ldr	r3, [r3, #8]
     cd2:	430a      	orrs	r2, r1
     cd4:	601a      	str	r2, [r3, #0]
  }
     cd6:	bf00      	nop
     cd8:	3710      	adds	r7, #16
     cda:	46bd      	mov	sp, r7
     cdc:	bd80      	pop	{r7, pc}
     cde:	bf00      	nop
     ce0:	1000013c 	.word	0x1000013c

00000ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>:
  /// For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  ///
  /// @param port_number - port number
  /// @param pin_number - pin number
  /// @param pin - pointer to an sjsu::Pin, keep as nullptr to ignore this a
  constexpr Gpio(uint8_t port_number,
     ce4:	b580      	push	{r7, lr}
     ce6:	b084      	sub	sp, #16
     ce8:	af00      	add	r7, sp, #0
     cea:	60f8      	str	r0, [r7, #12]
     cec:	607b      	str	r3, [r7, #4]
     cee:	460b      	mov	r3, r1
     cf0:	72fb      	strb	r3, [r7, #11]
     cf2:	4613      	mov	r3, r2
     cf4:	72bb      	strb	r3, [r7, #10]
      : kLpc17xxPin(port_number, pin_number),
        kLpc40xxPin(port_number, pin_number),
        pin_obj_(nullptr),
        gpio_port_(nullptr),
        pin_(pin_number),
        interrupt_index_(0)
     cf6:	68fb      	ldr	r3, [r7, #12]
     cf8:	4618      	mov	r0, r3
     cfa:	f7ff fe31 	bl	960 <sjsu::Gpio::Gpio()>
     cfe:	4a23      	ldr	r2, [pc, #140]	; (d8c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0xa8>)
     d00:	68fb      	ldr	r3, [r7, #12]
     d02:	601a      	str	r2, [r3, #0]
     d04:	68fb      	ldr	r3, [r7, #12]
     d06:	3304      	adds	r3, #4
     d08:	7aba      	ldrb	r2, [r7, #10]
     d0a:	7af9      	ldrb	r1, [r7, #11]
     d0c:	4618      	mov	r0, r3
     d0e:	f7ff fe37 	bl	980 <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)>
     d12:	68fb      	ldr	r3, [r7, #12]
     d14:	330c      	adds	r3, #12
     d16:	7aba      	ldrb	r2, [r7, #10]
     d18:	7af9      	ldrb	r1, [r7, #11]
     d1a:	4618      	mov	r0, r3
     d1c:	f7ff fbc4 	bl	4a8 <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)>
     d20:	68fb      	ldr	r3, [r7, #12]
     d22:	2200      	movs	r2, #0
     d24:	615a      	str	r2, [r3, #20]
     d26:	68fb      	ldr	r3, [r7, #12]
     d28:	2200      	movs	r2, #0
     d2a:	619a      	str	r2, [r3, #24]
     d2c:	68fb      	ldr	r3, [r7, #12]
     d2e:	7aba      	ldrb	r2, [r7, #10]
     d30:	771a      	strb	r2, [r3, #28]
     d32:	68fb      	ldr	r3, [r7, #12]
     d34:	2200      	movs	r2, #0
     d36:	775a      	strb	r2, [r3, #29]
  {
    // Assign pin object pointer
    if (pin == nullptr)
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	2b00      	cmp	r3, #0
     d3c:	d105      	bne.n	d4a <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x66>
    {
      if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
      {
        pin_obj_ = &kLpc40xxPin;
     d3e:	68fb      	ldr	r3, [r7, #12]
     d40:	f103 020c 	add.w	r2, r3, #12
     d44:	68fb      	ldr	r3, [r7, #12]
     d46:	615a      	str	r2, [r3, #20]
     d48:	e002      	b.n	d50 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x6c>
        pin_obj_ = &sjsu::GetInactive<sjsu::Pin>();
      }
    }
    else
    {
      pin_obj_ = pin;
     d4a:	68fb      	ldr	r3, [r7, #12]
     d4c:	687a      	ldr	r2, [r7, #4]
     d4e:	615a      	str	r2, [r3, #20]
    }

    // Assign interrupt_index_ pointer
    if (port_number == 2)
     d50:	7afb      	ldrb	r3, [r7, #11]
     d52:	2b02      	cmp	r3, #2
     d54:	d103      	bne.n	d5e <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x7a>
    {
      interrupt_index_ = 1;
     d56:	68fb      	ldr	r3, [r7, #12]
     d58:	2201      	movs	r2, #1
     d5a:	775a      	strb	r2, [r3, #29]
     d5c:	e009      	b.n	d72 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x8e>
    }
    else if (port_number == 0)
     d5e:	7afb      	ldrb	r3, [r7, #11]
     d60:	2b00      	cmp	r3, #0
     d62:	d103      	bne.n	d6c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x88>
    {
      interrupt_index_ = 0;
     d64:	68fb      	ldr	r3, [r7, #12]
     d66:	2200      	movs	r2, #0
     d68:	775a      	strb	r2, [r3, #29]
     d6a:	e002      	b.n	d72 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x8e>
    }
    else
    {
      interrupt_index_ = kInterruptPorts;
     d6c:	68fb      	ldr	r3, [r7, #12]
     d6e:	2202      	movs	r2, #2
     d70:	775a      	strb	r2, [r3, #29]
    }

    // Assign gpio port
    gpio_port_ = *GpioRegister(port_number);
     d72:	7afb      	ldrb	r3, [r7, #11]
     d74:	4618      	mov	r0, r3
     d76:	f7ff fef9 	bl	b6c <sjsu::lpc40xx::Gpio::GpioRegister(int)>
     d7a:	4603      	mov	r3, r0
     d7c:	681a      	ldr	r2, [r3, #0]
     d7e:	68fb      	ldr	r3, [r7, #12]
     d80:	619a      	str	r2, [r3, #24]
  }
     d82:	68fb      	ldr	r3, [r7, #12]
     d84:	4618      	mov	r0, r3
     d86:	3710      	adds	r7, #16
     d88:	46bd      	mov	sp, r7
     d8a:	bd80      	pop	{r7, pc}
     d8c:	00007e34 	.word	0x00007e34

00000d90 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const>:
  void SetDirection(Direction direction) const override
     d90:	b590      	push	{r4, r7, lr}
     d92:	b085      	sub	sp, #20
     d94:	af00      	add	r7, sp, #0
     d96:	6078      	str	r0, [r7, #4]
     d98:	460b      	mov	r3, r1
     d9a:	70fb      	strb	r3, [r7, #3]
  {
    /// Pin function is zero fall pins on the LPC40xx and LPC17xx.
    constexpr uint8_t kGpioFunction = 0;
     d9c:	2300      	movs	r3, #0
     d9e:	73fb      	strb	r3, [r7, #15]
    pin_obj_->SetPinFunction(kGpioFunction);
     da0:	687b      	ldr	r3, [r7, #4]
     da2:	695b      	ldr	r3, [r3, #20]
     da4:	681b      	ldr	r3, [r3, #0]
     da6:	3304      	adds	r3, #4
     da8:	681b      	ldr	r3, [r3, #0]
     daa:	687a      	ldr	r2, [r7, #4]
     dac:	6952      	ldr	r2, [r2, #20]
     dae:	2100      	movs	r1, #0
     db0:	4610      	mov	r0, r2
     db2:	4798      	blx	r3

    if (direction == Direction::kInput)
     db4:	78fb      	ldrb	r3, [r7, #3]
     db6:	2b00      	cmp	r3, #0
     db8:	d10d      	bne.n	dd6 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x46>
    {
      gpio_port_->DIR = bit::Clear(gpio_port_->DIR, pin_);
     dba:	687b      	ldr	r3, [r7, #4]
     dbc:	699b      	ldr	r3, [r3, #24]
     dbe:	681a      	ldr	r2, [r3, #0]
     dc0:	687b      	ldr	r3, [r7, #4]
     dc2:	7f1b      	ldrb	r3, [r3, #28]
     dc4:	4619      	mov	r1, r3
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	699c      	ldr	r4, [r3, #24]
     dca:	4610      	mov	r0, r2
     dcc:	f000 ffa8 	bl	1d20 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     dd0:	4603      	mov	r3, r0
     dd2:	6023      	str	r3, [r4, #0]
    }
    else
    {
      gpio_port_->DIR = bit::Set(gpio_port_->DIR, pin_);
    }
  }
     dd4:	e00c      	b.n	df0 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x60>
      gpio_port_->DIR = bit::Set(gpio_port_->DIR, pin_);
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	699b      	ldr	r3, [r3, #24]
     dda:	681a      	ldr	r2, [r3, #0]
     ddc:	687b      	ldr	r3, [r7, #4]
     dde:	7f1b      	ldrb	r3, [r3, #28]
     de0:	4619      	mov	r1, r3
     de2:	687b      	ldr	r3, [r7, #4]
     de4:	699c      	ldr	r4, [r3, #24]
     de6:	4610      	mov	r0, r2
     de8:	f000 ffad 	bl	1d46 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     dec:	4603      	mov	r3, r0
     dee:	6023      	str	r3, [r4, #0]
  }
     df0:	bf00      	nop
     df2:	3714      	adds	r7, #20
     df4:	46bd      	mov	sp, r7
     df6:	bd90      	pop	{r4, r7, pc}

00000df8 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const>:
  void Set(State output = kHigh) const override
     df8:	b480      	push	{r7}
     dfa:	b083      	sub	sp, #12
     dfc:	af00      	add	r7, sp, #0
     dfe:	6078      	str	r0, [r7, #4]
     e00:	460b      	mov	r3, r1
     e02:	70fb      	strb	r3, [r7, #3]
  {
    if (output == State::kHigh)
     e04:	78fb      	ldrb	r3, [r7, #3]
     e06:	2b01      	cmp	r3, #1
     e08:	d109      	bne.n	e1e <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x26>
    {
      gpio_port_->SET = (1 << pin_);
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	7f1b      	ldrb	r3, [r3, #28]
     e0e:	461a      	mov	r2, r3
     e10:	2301      	movs	r3, #1
     e12:	fa03 f202 	lsl.w	r2, r3, r2
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	699b      	ldr	r3, [r3, #24]
     e1a:	619a      	str	r2, [r3, #24]
    }
    else
    {
      gpio_port_->CLR = (1 << pin_);
    }
  }
     e1c:	e008      	b.n	e30 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x38>
      gpio_port_->CLR = (1 << pin_);
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	7f1b      	ldrb	r3, [r3, #28]
     e22:	461a      	mov	r2, r3
     e24:	2301      	movs	r3, #1
     e26:	fa03 f202 	lsl.w	r2, r3, r2
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	699b      	ldr	r3, [r3, #24]
     e2e:	61da      	str	r2, [r3, #28]
  }
     e30:	bf00      	nop
     e32:	370c      	adds	r7, #12
     e34:	46bd      	mov	sp, r7
     e36:	f85d 7b04 	ldr.w	r7, [sp], #4
     e3a:	4770      	bx	lr

00000e3c <sjsu::lpc40xx::Gpio::Toggle() const>:
  void Toggle() const override
     e3c:	b480      	push	{r7}
     e3e:	b083      	sub	sp, #12
     e40:	af00      	add	r7, sp, #0
     e42:	6078      	str	r0, [r7, #4]
  {
    gpio_port_->PIN ^= (1 << pin_);
     e44:	687b      	ldr	r3, [r7, #4]
     e46:	699b      	ldr	r3, [r3, #24]
     e48:	695a      	ldr	r2, [r3, #20]
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	7f1b      	ldrb	r3, [r3, #28]
     e4e:	4619      	mov	r1, r3
     e50:	2301      	movs	r3, #1
     e52:	408b      	lsls	r3, r1
     e54:	4619      	mov	r1, r3
     e56:	687b      	ldr	r3, [r7, #4]
     e58:	699b      	ldr	r3, [r3, #24]
     e5a:	404a      	eors	r2, r1
     e5c:	615a      	str	r2, [r3, #20]
  }
     e5e:	bf00      	nop
     e60:	370c      	adds	r7, #12
     e62:	46bd      	mov	sp, r7
     e64:	f85d 7b04 	ldr.w	r7, [sp], #4
     e68:	4770      	bx	lr

00000e6a <sjsu::lpc40xx::Gpio::Read() const>:
  bool Read() const override
     e6a:	b580      	push	{r7, lr}
     e6c:	b082      	sub	sp, #8
     e6e:	af00      	add	r7, sp, #0
     e70:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(gpio_port_->PIN, pin_);
     e72:	687b      	ldr	r3, [r7, #4]
     e74:	699b      	ldr	r3, [r3, #24]
     e76:	695a      	ldr	r2, [r3, #20]
     e78:	687b      	ldr	r3, [r7, #4]
     e7a:	7f1b      	ldrb	r3, [r3, #28]
     e7c:	4619      	mov	r1, r3
     e7e:	4610      	mov	r0, r2
     e80:	f000 ff73 	bl	1d6a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
     e84:	4603      	mov	r3, r0
  }
     e86:	4618      	mov	r0, r3
     e88:	3708      	adds	r7, #8
     e8a:	46bd      	mov	sp, r7
     e8c:	bd80      	pop	{r7, pc}

00000e8e <sjsu::lpc40xx::Gpio::GetPin() const>:
  const sjsu::Pin & GetPin() const override
     e8e:	b480      	push	{r7}
     e90:	b083      	sub	sp, #12
     e92:	af00      	add	r7, sp, #0
     e94:	6078      	str	r0, [r7, #4]
  {
    return *pin_obj_;
     e96:	687b      	ldr	r3, [r7, #4]
     e98:	695b      	ldr	r3, [r3, #20]
  }
     e9a:	4618      	mov	r0, r3
     e9c:	370c      	adds	r7, #12
     e9e:	46bd      	mov	sp, r7
     ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ea4:	4770      	bx	lr

00000ea6 <std::function<void ()>::~function()>:
     ea6:	b580      	push	{r7, lr}
     ea8:	b082      	sub	sp, #8
     eaa:	af00      	add	r7, sp, #0
     eac:	6078      	str	r0, [r7, #4]
     eae:	687b      	ldr	r3, [r7, #4]
     eb0:	4618      	mov	r0, r3
     eb2:	f7ff fa97 	bl	3e4 <std::_Function_base::~_Function_base()>
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	4618      	mov	r0, r3
     eba:	3708      	adds	r7, #8
     ebc:	46bd      	mov	sp, r7
     ebe:	bd80      	pop	{r7, pc}

00000ec0 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>:
  struct RegistrationInfo_t
     ec0:	b580      	push	{r7, lr}
     ec2:	b082      	sub	sp, #8
     ec4:	af00      	add	r7, sp, #0
     ec6:	6078      	str	r0, [r7, #4]
     ec8:	687b      	ldr	r3, [r7, #4]
     eca:	3304      	adds	r3, #4
     ecc:	4618      	mov	r0, r3
     ece:	f7ff ffea 	bl	ea6 <std::function<void ()>::~function()>
     ed2:	687b      	ldr	r3, [r7, #4]
     ed4:	4618      	mov	r0, r3
     ed6:	3708      	adds	r7, #8
     ed8:	46bd      	mov	sp, r7
     eda:	bd80      	pop	{r7, pc}

00000edc <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)>:

  /// Assign the developer's ISR and sets the selected edge that the gpio
  /// interrupt will be triggered on.
  void AttachInterrupt(InterruptCallback callback, Edge edge) override
     edc:	b5b0      	push	{r4, r5, r7, lr}
     ede:	b08c      	sub	sp, #48	; 0x30
     ee0:	af00      	add	r7, sp, #0
     ee2:	60f8      	str	r0, [r7, #12]
     ee4:	60b9      	str	r1, [r7, #8]
     ee6:	4613      	mov	r3, r2
     ee8:	71fb      	strb	r3, [r7, #7]
  {
    if (!IsAValidPort())
     eea:	68f8      	ldr	r0, [r7, #12]
     eec:	f000 f8a6 	bl	103c <sjsu::lpc40xx::Gpio::IsAValidPort() const>
     ef0:	4603      	mov	r3, r0
     ef2:	f083 0301 	eor.w	r3, r3, #1
     ef6:	b2db      	uxtb	r3, r3
     ef8:	2b00      	cmp	r3, #0
     efa:	d155      	bne.n	fa8 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xcc>
          .interrupt_handler        = InterruptHandler,
      });
    }
    else  // For LPC40xx and host tests
    {
      sjsu::InterruptController::GetPlatformController().Enable({
     efc:	f7ff fa96 	bl	42c <sjsu::InterruptController::GetPlatformController()>
     f00:	4604      	mov	r4, r0
          .interrupt_request_number = lpc40xx::GPIO_IRQn,
          .interrupt_handler        = InterruptHandler,
      });
     f02:	6823      	ldr	r3, [r4, #0]
     f04:	3304      	adds	r3, #4
     f06:	681d      	ldr	r5, [r3, #0]
      sjsu::InterruptController::GetPlatformController().Enable({
     f08:	2326      	movs	r3, #38	; 0x26
     f0a:	617b      	str	r3, [r7, #20]
     f0c:	f107 0314 	add.w	r3, r7, #20
     f10:	3304      	adds	r3, #4
     f12:	4927      	ldr	r1, [pc, #156]	; (fb0 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xd4>)
     f14:	4618      	mov	r0, r3
     f16:	f000 ff3f 	bl	1d98 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
     f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f1e:	62bb      	str	r3, [r7, #40]	; 0x28
     f20:	f107 0314 	add.w	r3, r7, #20
     f24:	4619      	mov	r1, r3
     f26:	4620      	mov	r0, r4
     f28:	47a8      	blx	r5
      });
     f2a:	f107 0314 	add.w	r3, r7, #20
     f2e:	4618      	mov	r0, r3
     f30:	f7ff ffc6 	bl	ec0 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>
    }

    handlers[interrupt_index_][pin_] = callback;
     f34:	68fb      	ldr	r3, [r7, #12]
     f36:	7f5b      	ldrb	r3, [r3, #29]
     f38:	4619      	mov	r1, r3
     f3a:	68fb      	ldr	r3, [r7, #12]
     f3c:	7f1b      	ldrb	r3, [r3, #28]
     f3e:	461a      	mov	r2, r3
     f40:	014b      	lsls	r3, r1, #5
     f42:	4413      	add	r3, r2
     f44:	011b      	lsls	r3, r3, #4
     f46:	4a1b      	ldr	r2, [pc, #108]	; (fb4 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xd8>)
     f48:	4413      	add	r3, r2
     f4a:	68b9      	ldr	r1, [r7, #8]
     f4c:	4618      	mov	r0, r3
     f4e:	f000 ff4d 	bl	1dec <std::function<void ()>::operator=(std::function<void ()> const&)>

    auto * interrupt = LocalInterruptRegister();
     f52:	68f8      	ldr	r0, [r7, #12]
     f54:	f000 f896 	bl	1084 <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>
     f58:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (edge == Edge::kEdgeBoth || edge == Edge::kEdgeRising)
     f5a:	79fb      	ldrb	r3, [r7, #7]
     f5c:	2b02      	cmp	r3, #2
     f5e:	d002      	beq.n	f66 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0x8a>
     f60:	79fb      	ldrb	r3, [r7, #7]
     f62:	2b00      	cmp	r3, #0
     f64:	d10c      	bne.n	f80 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xa4>
    {
      *interrupt->rising_enable = bit::Set(*interrupt->rising_enable, pin_);
     f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f68:	68db      	ldr	r3, [r3, #12]
     f6a:	681a      	ldr	r2, [r3, #0]
     f6c:	68fb      	ldr	r3, [r7, #12]
     f6e:	7f1b      	ldrb	r3, [r3, #28]
     f70:	4619      	mov	r1, r3
     f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f74:	68dc      	ldr	r4, [r3, #12]
     f76:	4610      	mov	r0, r2
     f78:	f000 fee5 	bl	1d46 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     f7c:	4603      	mov	r3, r0
     f7e:	6023      	str	r3, [r4, #0]
    }
    if (edge == Edge::kEdgeBoth || edge == Edge::kEdgeFalling)
     f80:	79fb      	ldrb	r3, [r7, #7]
     f82:	2b02      	cmp	r3, #2
     f84:	d002      	beq.n	f8c <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xb0>
     f86:	79fb      	ldrb	r3, [r7, #7]
     f88:	2b01      	cmp	r3, #1
     f8a:	d10e      	bne.n	faa <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xce>
    {
      *interrupt->falling_enable = bit::Set(*interrupt->falling_enable, pin_);
     f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f8e:	691b      	ldr	r3, [r3, #16]
     f90:	681a      	ldr	r2, [r3, #0]
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	7f1b      	ldrb	r3, [r3, #28]
     f96:	4619      	mov	r1, r3
     f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f9a:	691c      	ldr	r4, [r3, #16]
     f9c:	4610      	mov	r0, r2
     f9e:	f000 fed2 	bl	1d46 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     fa2:	4603      	mov	r3, r0
     fa4:	6023      	str	r3, [r4, #0]
     fa6:	e000      	b.n	faa <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xce>
      return;
     fa8:	bf00      	nop
    }
  }
     faa:	3730      	adds	r7, #48	; 0x30
     fac:	46bd      	mov	sp, r7
     fae:	bdb0      	pop	{r4, r5, r7, pc}
     fb0:	00000c75 	.word	0x00000c75
     fb4:	1000013c 	.word	0x1000013c

00000fb8 <sjsu::lpc40xx::Gpio::DetachInterrupt() const>:

  /// Removes the developer's ISR and clears the selected edge of the gpio
  /// interrupt from being triggered.
  void DetachInterrupt() const override
     fb8:	b590      	push	{r4, r7, lr}
     fba:	b085      	sub	sp, #20
     fbc:	af00      	add	r7, sp, #0
     fbe:	6078      	str	r0, [r7, #4]
  {
    if (!IsAValidPort())
     fc0:	6878      	ldr	r0, [r7, #4]
     fc2:	f000 f83b 	bl	103c <sjsu::lpc40xx::Gpio::IsAValidPort() const>
     fc6:	4603      	mov	r3, r0
     fc8:	f083 0301 	eor.w	r3, r3, #1
     fcc:	b2db      	uxtb	r3, r3
     fce:	2b00      	cmp	r3, #0
     fd0:	d12d      	bne.n	102e <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x76>
    {
      return;
    }

    handlers[interrupt_index_][pin_] = nullptr;
     fd2:	687b      	ldr	r3, [r7, #4]
     fd4:	7f5b      	ldrb	r3, [r3, #29]
     fd6:	4619      	mov	r1, r3
     fd8:	687b      	ldr	r3, [r7, #4]
     fda:	7f1b      	ldrb	r3, [r3, #28]
     fdc:	461a      	mov	r2, r3
     fde:	014b      	lsls	r3, r1, #5
     fe0:	4413      	add	r3, r2
     fe2:	011b      	lsls	r3, r3, #4
     fe4:	4a14      	ldr	r2, [pc, #80]	; (1038 <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x80>)
     fe6:	4413      	add	r3, r2
     fe8:	2100      	movs	r1, #0
     fea:	4618      	mov	r0, r3
     fec:	f000 ff19 	bl	1e22 <std::function<void ()>::operator=(decltype(nullptr))>

    auto * interrupt           = LocalInterruptRegister();
     ff0:	6878      	ldr	r0, [r7, #4]
     ff2:	f000 f847 	bl	1084 <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>
     ff6:	60f8      	str	r0, [r7, #12]
    *interrupt->rising_enable  = bit::Clear(*interrupt->rising_enable, pin_);
     ff8:	68fb      	ldr	r3, [r7, #12]
     ffa:	68db      	ldr	r3, [r3, #12]
     ffc:	681a      	ldr	r2, [r3, #0]
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	7f1b      	ldrb	r3, [r3, #28]
    1002:	4619      	mov	r1, r3
    1004:	68fb      	ldr	r3, [r7, #12]
    1006:	68dc      	ldr	r4, [r3, #12]
    1008:	4610      	mov	r0, r2
    100a:	f000 fe89 	bl	1d20 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    100e:	4603      	mov	r3, r0
    1010:	6023      	str	r3, [r4, #0]
    *interrupt->falling_enable = bit::Clear(*interrupt->falling_enable, pin_);
    1012:	68fb      	ldr	r3, [r7, #12]
    1014:	691b      	ldr	r3, [r3, #16]
    1016:	681a      	ldr	r2, [r3, #0]
    1018:	687b      	ldr	r3, [r7, #4]
    101a:	7f1b      	ldrb	r3, [r3, #28]
    101c:	4619      	mov	r1, r3
    101e:	68fb      	ldr	r3, [r7, #12]
    1020:	691c      	ldr	r4, [r3, #16]
    1022:	4610      	mov	r0, r2
    1024:	f000 fe7c 	bl	1d20 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    1028:	4603      	mov	r3, r0
    102a:	6023      	str	r3, [r4, #0]
    102c:	e000      	b.n	1030 <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x78>
      return;
    102e:	bf00      	nop
  }
    1030:	3714      	adds	r7, #20
    1032:	46bd      	mov	sp, r7
    1034:	bd90      	pop	{r4, r7, pc}
    1036:	bf00      	nop
    1038:	1000013c 	.word	0x1000013c

0000103c <sjsu::lpc40xx::Gpio::IsAValidPort() const>:

 private:
  /// Checks if the selected gpio port is valid for external interrupts.
  bool IsAValidPort() const
    103c:	b580      	push	{r7, lr}
    103e:	b084      	sub	sp, #16
    1040:	af00      	add	r7, sp, #0
    1042:	6078      	str	r0, [r7, #4]
  {
    bool is_valid = !(interrupt_index_ == kInterruptPorts);
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	7f5b      	ldrb	r3, [r3, #29]
    1048:	2b02      	cmp	r3, #2
    104a:	bf14      	ite	ne
    104c:	2301      	movne	r3, #1
    104e:	2300      	moveq	r3, #0
    1050:	73fb      	strb	r3, [r7, #15]
    SJ2_ASSERT_WARNING(
    1052:	7bfb      	ldrb	r3, [r7, #15]
    1054:	f083 0301 	eor.w	r3, r3, #1
    1058:	b2db      	uxtb	r3, r3
    105a:	2b00      	cmp	r3, #0
    105c:	d006      	beq.n	106c <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x30>
    105e:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    1062:	4a05      	ldr	r2, [pc, #20]	; (1078 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x3c>)
    1064:	4905      	ldr	r1, [pc, #20]	; (107c <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x40>)
    1066:	4806      	ldr	r0, [pc, #24]	; (1080 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x44>)
    1068:	f003 f85e 	bl	4128 <printf>
        is_valid,
        "This gpio port cannot be used for External Interrupts. Need "
        "to use GPIOs on Port 0 or 2.");
    return is_valid;
    106c:	7bfb      	ldrb	r3, [r7, #15]
  }
    106e:	4618      	mov	r0, r3
    1070:	3710      	adds	r7, #16
    1072:	46bd      	mov	sp, r7
    1074:	bd80      	pop	{r7, pc}
    1076:	bf00      	nop
    1078:	00007bf0 	.word	0x00007bf0
    107c:	00007e14 	.word	0x00007e14
    1080:	00007c20 	.word	0x00007c20

00001084 <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>:

  GpioInterruptRegisterMap_t * LocalInterruptRegister() const
    1084:	b580      	push	{r7, lr}
    1086:	b082      	sub	sp, #8
    1088:	af00      	add	r7, sp, #0
    108a:	6078      	str	r0, [r7, #4]
  {
    return InterruptRegister(interrupt_index_);
    108c:	687b      	ldr	r3, [r7, #4]
    108e:	7f5b      	ldrb	r3, [r3, #29]
    1090:	4618      	mov	r0, r3
    1092:	f7ff fda5 	bl	be0 <sjsu::lpc40xx::Gpio::InterruptRegister(int)>
    1096:	4603      	mov	r3, r0
  }
    1098:	4618      	mov	r0, r3
    109a:	3708      	adds	r7, #8
    109c:	46bd      	mov	sp, r7
    109e:	bd80      	pop	{r7, pc}

000010a0 <Bus::Initialize()>:

#include "L1_Peripheral/lpc40xx/gpio.hpp"
class Bus	
{
public:
	void Initialize()
    10a0:	b580      	push	{r7, lr}
    10a2:	b082      	sub	sp, #8
    10a4:	af00      	add	r7, sp, #0
    10a6:	6078      	str	r0, [r7, #4]
	{
		//SettingeachpinasOpenDrain
		ad[0].GetPin().SetAsOpenDrain();
    10a8:	687b      	ldr	r3, [r7, #4]
    10aa:	4618      	mov	r0, r3
    10ac:	f7ff feef 	bl	e8e <sjsu::lpc40xx::Gpio::GetPin() const>
    10b0:	4603      	mov	r3, r0
    10b2:	681a      	ldr	r2, [r3, #0]
    10b4:	320c      	adds	r2, #12
    10b6:	6812      	ldr	r2, [r2, #0]
    10b8:	2101      	movs	r1, #1
    10ba:	4618      	mov	r0, r3
    10bc:	4790      	blx	r2
		ad[1].GetPin().SetAsOpenDrain();
    10be:	687b      	ldr	r3, [r7, #4]
    10c0:	3320      	adds	r3, #32
    10c2:	4618      	mov	r0, r3
    10c4:	f7ff fee3 	bl	e8e <sjsu::lpc40xx::Gpio::GetPin() const>
    10c8:	4603      	mov	r3, r0
    10ca:	681a      	ldr	r2, [r3, #0]
    10cc:	320c      	adds	r2, #12
    10ce:	6812      	ldr	r2, [r2, #0]
    10d0:	2101      	movs	r1, #1
    10d2:	4618      	mov	r0, r3
    10d4:	4790      	blx	r2
		ad[2].GetPin().SetAsOpenDrain();
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	3340      	adds	r3, #64	; 0x40
    10da:	4618      	mov	r0, r3
    10dc:	f7ff fed7 	bl	e8e <sjsu::lpc40xx::Gpio::GetPin() const>
    10e0:	4603      	mov	r3, r0
    10e2:	681a      	ldr	r2, [r3, #0]
    10e4:	320c      	adds	r2, #12
    10e6:	6812      	ldr	r2, [r2, #0]
    10e8:	2101      	movs	r1, #1
    10ea:	4618      	mov	r0, r3
    10ec:	4790      	blx	r2
		ad[3].GetPin().SetAsOpenDrain();
    10ee:	687b      	ldr	r3, [r7, #4]
    10f0:	3360      	adds	r3, #96	; 0x60
    10f2:	4618      	mov	r0, r3
    10f4:	f7ff fecb 	bl	e8e <sjsu::lpc40xx::Gpio::GetPin() const>
    10f8:	4603      	mov	r3, r0
    10fa:	681a      	ldr	r2, [r3, #0]
    10fc:	320c      	adds	r2, #12
    10fe:	6812      	ldr	r2, [r2, #0]
    1100:	2101      	movs	r1, #1
    1102:	4618      	mov	r0, r3
    1104:	4790      	blx	r2
		ad[4].GetPin().SetAsOpenDrain();
    1106:	687b      	ldr	r3, [r7, #4]
    1108:	3380      	adds	r3, #128	; 0x80
    110a:	4618      	mov	r0, r3
    110c:	f7ff febf 	bl	e8e <sjsu::lpc40xx::Gpio::GetPin() const>
    1110:	4603      	mov	r3, r0
    1112:	681a      	ldr	r2, [r3, #0]
    1114:	320c      	adds	r2, #12
    1116:	6812      	ldr	r2, [r2, #0]
    1118:	2101      	movs	r1, #1
    111a:	4618      	mov	r0, r3
    111c:	4790      	blx	r2
		ad[5].GetPin().SetAsOpenDrain();
    111e:	687b      	ldr	r3, [r7, #4]
    1120:	33a0      	adds	r3, #160	; 0xa0
    1122:	4618      	mov	r0, r3
    1124:	f7ff feb3 	bl	e8e <sjsu::lpc40xx::Gpio::GetPin() const>
    1128:	4603      	mov	r3, r0
    112a:	681a      	ldr	r2, [r3, #0]
    112c:	320c      	adds	r2, #12
    112e:	6812      	ldr	r2, [r2, #0]
    1130:	2101      	movs	r1, #1
    1132:	4618      	mov	r0, r3
    1134:	4790      	blx	r2
		ad[6].GetPin().SetAsOpenDrain();
    1136:	687b      	ldr	r3, [r7, #4]
    1138:	33c0      	adds	r3, #192	; 0xc0
    113a:	4618      	mov	r0, r3
    113c:	f7ff fea7 	bl	e8e <sjsu::lpc40xx::Gpio::GetPin() const>
    1140:	4603      	mov	r3, r0
    1142:	681a      	ldr	r2, [r3, #0]
    1144:	320c      	adds	r2, #12
    1146:	6812      	ldr	r2, [r2, #0]
    1148:	2101      	movs	r1, #1
    114a:	4618      	mov	r0, r3
    114c:	4790      	blx	r2
		ad[7].GetPin().SetAsOpenDrain();
    114e:	687b      	ldr	r3, [r7, #4]
    1150:	33e0      	adds	r3, #224	; 0xe0
    1152:	4618      	mov	r0, r3
    1154:	f7ff fe9b 	bl	e8e <sjsu::lpc40xx::Gpio::GetPin() const>
    1158:	4603      	mov	r3, r0
    115a:	681a      	ldr	r2, [r3, #0]
    115c:	320c      	adds	r2, #12
    115e:	6812      	ldr	r2, [r2, #0]
    1160:	2101      	movs	r1, #1
    1162:	4618      	mov	r0, r3
    1164:	4790      	blx	r2
		write_enable.SetAsOutput();
    1166:	687b      	ldr	r3, [r7, #4]
    1168:	f503 7380 	add.w	r3, r3, #256	; 0x100
    116c:	4618      	mov	r0, r3
    116e:	f7ff fa93 	bl	698 <sjsu::Gpio::SetAsOutput() const>
		ale.SetAsOutput();
    1172:	687b      	ldr	r3, [r7, #4]
    1174:	f503 7390 	add.w	r3, r3, #288	; 0x120
    1178:	4618      	mov	r0, r3
    117a:	f7ff fa8d 	bl	698 <sjsu::Gpio::SetAsOutput() const>
		m_io.SetAsOutput();
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    1184:	4618      	mov	r0, r3
    1186:	f7ff fa87 	bl	698 <sjsu::Gpio::SetAsOutput() const>
		write.SetAsOutput();
    118a:	687b      	ldr	r3, [r7, #4]
    118c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    1190:	4618      	mov	r0, r3
    1192:	f7ff fa81 	bl	698 <sjsu::Gpio::SetAsOutput() const>
		read.SetAsOutput();
    1196:	687b      	ldr	r3, [r7, #4]
    1198:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
    119c:	4618      	mov	r0, r3
    119e:	f7ff fa7b 	bl	698 <sjsu::Gpio::SetAsOutput() const>
		interrupt.SetAsInput();
    11a2:	687b      	ldr	r3, [r7, #4]
    11a4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
    11a8:	4618      	mov	r0, r3
    11aa:	f7ff fa67 	bl	67c <sjsu::Gpio::SetAsInput() const>
	}
    11ae:	bf00      	nop
    11b0:	3708      	adds	r7, #8
    11b2:	46bd      	mov	sp, r7
    11b4:	bd80      	pop	{r7, pc}

000011b6 <Bus::put_address(unsigned char)>:

	void put_address(uint8_t address)
    11b6:	b580      	push	{r7, lr}
    11b8:	b088      	sub	sp, #32
    11ba:	af00      	add	r7, sp, #0
    11bc:	6078      	str	r0, [r7, #4]
    11be:	460b      	mov	r3, r1
    11c0:	70fb      	strb	r3, [r7, #3]
	{
		write_enable.SetHigh();
    11c2:	687b      	ldr	r3, [r7, #4]
    11c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
    11c8:	4618      	mov	r0, r3
    11ca:	f7ff fa39 	bl	640 <sjsu::Gpio::SetHigh() const>
		for(int i = 7; i >= 0; i--)
    11ce:	2307      	movs	r3, #7
    11d0:	61fb      	str	r3, [r7, #28]
    11d2:	69fb      	ldr	r3, [r7, #28]
    11d4:	2b00      	cmp	r3, #0
    11d6:	db21      	blt.n	121c <Bus::put_address(unsigned char)+0x66>
		{
			ad[i].SetAsOutput();
    11d8:	69fb      	ldr	r3, [r7, #28]
    11da:	015b      	lsls	r3, r3, #5
    11dc:	687a      	ldr	r2, [r7, #4]
    11de:	4413      	add	r3, r2
    11e0:	4618      	mov	r0, r3
    11e2:	f7ff fa59 	bl	698 <sjsu::Gpio::SetAsOutput() const>
   			if(address & (1 << (i))) 
    11e6:	78fa      	ldrb	r2, [r7, #3]
    11e8:	69fb      	ldr	r3, [r7, #28]
    11ea:	fa42 f303 	asr.w	r3, r2, r3
    11ee:	f003 0301 	and.w	r3, r3, #1
    11f2:	2b00      	cmp	r3, #0
    11f4:	d007      	beq.n	1206 <Bus::put_address(unsigned char)+0x50>
			{
				ad[i].SetHigh();
    11f6:	69fb      	ldr	r3, [r7, #28]
    11f8:	015b      	lsls	r3, r3, #5
    11fa:	687a      	ldr	r2, [r7, #4]
    11fc:	4413      	add	r3, r2
    11fe:	4618      	mov	r0, r3
    1200:	f7ff fa1e 	bl	640 <sjsu::Gpio::SetHigh() const>
    1204:	e006      	b.n	1214 <Bus::put_address(unsigned char)+0x5e>
			} 
    		else
			{
				ad[i].SetLow();
    1206:	69fb      	ldr	r3, [r7, #28]
    1208:	015b      	lsls	r3, r3, #5
    120a:	687a      	ldr	r2, [r7, #4]
    120c:	4413      	add	r3, r2
    120e:	4618      	mov	r0, r3
    1210:	f7ff fa25 	bl	65e <sjsu::Gpio::SetLow() const>
		for(int i = 7; i >= 0; i--)
    1214:	69fb      	ldr	r3, [r7, #28]
    1216:	3b01      	subs	r3, #1
    1218:	61fb      	str	r3, [r7, #28]
    121a:	e7da      	b.n	11d2 <Bus::put_address(unsigned char)+0x1c>
			}
		}
		sjsu::Delay(80ns);
    121c:	f107 0308 	add.w	r3, r7, #8
    1220:	4618      	mov	r0, r3
    1222:	f000 fe18 	bl	1e56 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)56, (char)48>()>
    1226:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    122a:	f7ff fb8c 	bl	946 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
		ale.SetHigh();
    122e:	687b      	ldr	r3, [r7, #4]
    1230:	f503 7390 	add.w	r3, r3, #288	; 0x120
    1234:	4618      	mov	r0, r3
    1236:	f7ff fa03 	bl	640 <sjsu::Gpio::SetHigh() const>
		sjsu::Delay(80ns);
    123a:	f107 0310 	add.w	r3, r7, #16
    123e:	4618      	mov	r0, r3
    1240:	f000 fe09 	bl	1e56 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)56, (char)48>()>
    1244:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    1248:	f7ff fb7d 	bl	946 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
		ale.SetLow();
    124c:	687b      	ldr	r3, [r7, #4]
    124e:	f503 7390 	add.w	r3, r3, #288	; 0x120
    1252:	4618      	mov	r0, r3
    1254:	f7ff fa03 	bl	65e <sjsu::Gpio::SetLow() const>
	}
    1258:	bf00      	nop
    125a:	3720      	adds	r7, #32
    125c:	46bd      	mov	sp, r7
    125e:	bd80      	pop	{r7, pc}

00001260 <Bus::put_data_address(unsigned char, unsigned char)>:
			}
		}
		sjsu::Delay(80ns);		
	}
	
	void put_data_address(uint8_t address, uint8_t data) 
    1260:	b580      	push	{r7, lr}
    1262:	b088      	sub	sp, #32
    1264:	af00      	add	r7, sp, #0
    1266:	6078      	str	r0, [r7, #4]
    1268:	460b      	mov	r3, r1
    126a:	70fb      	strb	r3, [r7, #3]
    126c:	4613      	mov	r3, r2
    126e:	70bb      	strb	r3, [r7, #2]
	{
		write_enable.SetHigh();
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1276:	4618      	mov	r0, r3
    1278:	f7ff f9e2 	bl	640 <sjsu::Gpio::SetHigh() const>
		for(int i = 7; i >= 0; i--)
    127c:	2307      	movs	r3, #7
    127e:	61fb      	str	r3, [r7, #28]
    1280:	69fb      	ldr	r3, [r7, #28]
    1282:	2b00      	cmp	r3, #0
    1284:	db21      	blt.n	12ca <Bus::put_data_address(unsigned char, unsigned char)+0x6a>
		{
			ad[i].SetAsOutput();
    1286:	69fb      	ldr	r3, [r7, #28]
    1288:	015b      	lsls	r3, r3, #5
    128a:	687a      	ldr	r2, [r7, #4]
    128c:	4413      	add	r3, r2
    128e:	4618      	mov	r0, r3
    1290:	f7ff fa02 	bl	698 <sjsu::Gpio::SetAsOutput() const>
   			if(address & (1 << (i))) 
    1294:	78fa      	ldrb	r2, [r7, #3]
    1296:	69fb      	ldr	r3, [r7, #28]
    1298:	fa42 f303 	asr.w	r3, r2, r3
    129c:	f003 0301 	and.w	r3, r3, #1
    12a0:	2b00      	cmp	r3, #0
    12a2:	d007      	beq.n	12b4 <Bus::put_data_address(unsigned char, unsigned char)+0x54>
			{
				ad[i].SetHigh();
    12a4:	69fb      	ldr	r3, [r7, #28]
    12a6:	015b      	lsls	r3, r3, #5
    12a8:	687a      	ldr	r2, [r7, #4]
    12aa:	4413      	add	r3, r2
    12ac:	4618      	mov	r0, r3
    12ae:	f7ff f9c7 	bl	640 <sjsu::Gpio::SetHigh() const>
    12b2:	e006      	b.n	12c2 <Bus::put_data_address(unsigned char, unsigned char)+0x62>
			} 
    		else
			{
				ad[i].SetLow();
    12b4:	69fb      	ldr	r3, [r7, #28]
    12b6:	015b      	lsls	r3, r3, #5
    12b8:	687a      	ldr	r2, [r7, #4]
    12ba:	4413      	add	r3, r2
    12bc:	4618      	mov	r0, r3
    12be:	f7ff f9ce 	bl	65e <sjsu::Gpio::SetLow() const>
		for(int i = 7; i >= 0; i--)
    12c2:	69fb      	ldr	r3, [r7, #28]
    12c4:	3b01      	subs	r3, #1
    12c6:	61fb      	str	r3, [r7, #28]
    12c8:	e7da      	b.n	1280 <Bus::put_data_address(unsigned char, unsigned char)+0x20>
			}
		}
		sjsu::Delay(80ns);
    12ca:	f107 0308 	add.w	r3, r7, #8
    12ce:	4618      	mov	r0, r3
    12d0:	f000 fdc1 	bl	1e56 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)56, (char)48>()>
    12d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    12d8:	f7ff fb35 	bl	946 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
		ale.SetHigh();
    12dc:	687b      	ldr	r3, [r7, #4]
    12de:	f503 7390 	add.w	r3, r3, #288	; 0x120
    12e2:	4618      	mov	r0, r3
    12e4:	f7ff f9ac 	bl	640 <sjsu::Gpio::SetHigh() const>
		sjsu::Delay(80ns);
    12e8:	f107 0310 	add.w	r3, r7, #16
    12ec:	4618      	mov	r0, r3
    12ee:	f000 fdb2 	bl	1e56 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)56, (char)48>()>
    12f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    12f6:	f7ff fb26 	bl	946 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
		ale.SetLow();
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	f503 7390 	add.w	r3, r3, #288	; 0x120
    1300:	4618      	mov	r0, r3
    1302:	f7ff f9ac 	bl	65e <sjsu::Gpio::SetLow() const>

		for(int i = 7; i >= 0; i--)
    1306:	2307      	movs	r3, #7
    1308:	61bb      	str	r3, [r7, #24]
    130a:	69bb      	ldr	r3, [r7, #24]
    130c:	2b00      	cmp	r3, #0
    130e:	db21      	blt.n	1354 <Bus::put_data_address(unsigned char, unsigned char)+0xf4>
		{
			ad[i].SetAsOutput();		
    1310:	69bb      	ldr	r3, [r7, #24]
    1312:	015b      	lsls	r3, r3, #5
    1314:	687a      	ldr	r2, [r7, #4]
    1316:	4413      	add	r3, r2
    1318:	4618      	mov	r0, r3
    131a:	f7ff f9bd 	bl	698 <sjsu::Gpio::SetAsOutput() const>
   			if(data & (1 << (i))) 
    131e:	78ba      	ldrb	r2, [r7, #2]
    1320:	69bb      	ldr	r3, [r7, #24]
    1322:	fa42 f303 	asr.w	r3, r2, r3
    1326:	f003 0301 	and.w	r3, r3, #1
    132a:	2b00      	cmp	r3, #0
    132c:	d007      	beq.n	133e <Bus::put_data_address(unsigned char, unsigned char)+0xde>
			{
				ad[i].SetHigh();
    132e:	69bb      	ldr	r3, [r7, #24]
    1330:	015b      	lsls	r3, r3, #5
    1332:	687a      	ldr	r2, [r7, #4]
    1334:	4413      	add	r3, r2
    1336:	4618      	mov	r0, r3
    1338:	f7ff f982 	bl	640 <sjsu::Gpio::SetHigh() const>
    133c:	e006      	b.n	134c <Bus::put_data_address(unsigned char, unsigned char)+0xec>
			} 
    		else
			{
				ad[i].SetLow();
    133e:	69bb      	ldr	r3, [r7, #24]
    1340:	015b      	lsls	r3, r3, #5
    1342:	687a      	ldr	r2, [r7, #4]
    1344:	4413      	add	r3, r2
    1346:	4618      	mov	r0, r3
    1348:	f7ff f989 	bl	65e <sjsu::Gpio::SetLow() const>
		for(int i = 7; i >= 0; i--)
    134c:	69bb      	ldr	r3, [r7, #24]
    134e:	3b01      	subs	r3, #1
    1350:	61bb      	str	r3, [r7, #24]
    1352:	e7da      	b.n	130a <Bus::put_data_address(unsigned char, unsigned char)+0xaa>
			}
		}
	}
    1354:	bf00      	nop
    1356:	3720      	adds	r7, #32
    1358:	46bd      	mov	sp, r7
    135a:	bd80      	pop	{r7, pc}

0000135c <Bus::io_write(unsigned char, unsigned char)>:
 
	void io_write(uint8_t address, uint8_t data)
    135c:	b580      	push	{r7, lr}
    135e:	b088      	sub	sp, #32
    1360:	af00      	add	r7, sp, #0
    1362:	6078      	str	r0, [r7, #4]
    1364:	460b      	mov	r3, r1
    1366:	70fb      	strb	r3, [r7, #3]
    1368:	4613      	mov	r3, r2
    136a:	70bb      	strb	r3, [r7, #2]
	{
		m_io.SetLow();
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    1372:	4618      	mov	r0, r3
    1374:	f7ff f973 	bl	65e <sjsu::Gpio::SetLow() const>
		write.SetHigh();
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    137e:	4618      	mov	r0, r3
    1380:	f7ff f95e 	bl	640 <sjsu::Gpio::SetHigh() const>
		read.SetHigh();
    1384:	687b      	ldr	r3, [r7, #4]
    1386:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
    138a:	4618      	mov	r0, r3
    138c:	f7ff f958 	bl	640 <sjsu::Gpio::SetHigh() const>
		put_data_address(address, data);
    1390:	78ba      	ldrb	r2, [r7, #2]
    1392:	78fb      	ldrb	r3, [r7, #3]
    1394:	4619      	mov	r1, r3
    1396:	6878      	ldr	r0, [r7, #4]
    1398:	f7ff ff62 	bl	1260 <Bus::put_data_address(unsigned char, unsigned char)>
		sjsu::Delay(80ns);
    139c:	f107 0308 	add.w	r3, r7, #8
    13a0:	4618      	mov	r0, r3
    13a2:	f000 fd58 	bl	1e56 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)56, (char)48>()>
    13a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    13aa:	f7ff facc 	bl	946 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
		write.SetLow();
    13ae:	687b      	ldr	r3, [r7, #4]
    13b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    13b4:	4618      	mov	r0, r3
    13b6:	f7ff f952 	bl	65e <sjsu::Gpio::SetLow() const>
		sjsu::Delay(80ns);
    13ba:	f107 0310 	add.w	r3, r7, #16
    13be:	4618      	mov	r0, r3
    13c0:	f000 fd49 	bl	1e56 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)56, (char)48>()>
    13c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    13c8:	f7ff fabd 	bl	946 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
		write.SetHigh();
    13cc:	687b      	ldr	r3, [r7, #4]
    13ce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    13d2:	4618      	mov	r0, r3
    13d4:	f7ff f934 	bl	640 <sjsu::Gpio::SetHigh() const>
		sjsu::Delay(80ns);		
    13d8:	f107 0318 	add.w	r3, r7, #24
    13dc:	4618      	mov	r0, r3
    13de:	f000 fd3a 	bl	1e56 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)56, (char)48>()>
    13e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
    13e6:	f7ff faae 	bl	946 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
	}
    13ea:	bf00      	nop
    13ec:	3720      	adds	r7, #32
    13ee:	46bd      	mov	sp, r7
    13f0:	bd80      	pop	{r7, pc}

000013f2 <Bus::io_read(unsigned char)>:
	{
		read.SetLow();
		read.SetHigh();
	}

	uint8_t io_read(uint8_t address)
    13f2:	b580      	push	{r7, lr}
    13f4:	b08e      	sub	sp, #56	; 0x38
    13f6:	af00      	add	r7, sp, #0
    13f8:	6078      	str	r0, [r7, #4]
    13fa:	460b      	mov	r3, r1
    13fc:	70fb      	strb	r3, [r7, #3]
	{
		m_io.SetLow();
    13fe:	687b      	ldr	r3, [r7, #4]
    1400:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    1404:	4618      	mov	r0, r3
    1406:	f7ff f92a 	bl	65e <sjsu::Gpio::SetLow() const>
		write.SetHigh();
    140a:	687b      	ldr	r3, [r7, #4]
    140c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    1410:	4618      	mov	r0, r3
    1412:	f7ff f915 	bl	640 <sjsu::Gpio::SetHigh() const>
		read.SetHigh();
    1416:	687b      	ldr	r3, [r7, #4]
    1418:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
    141c:	4618      	mov	r0, r3
    141e:	f7ff f90f 	bl	640 <sjsu::Gpio::SetHigh() const>
		uint8_t read_data;
		put_address(address);
    1422:	78fb      	ldrb	r3, [r7, #3]
    1424:	4619      	mov	r1, r3
    1426:	6878      	ldr	r0, [r7, #4]
    1428:	f7ff fec5 	bl	11b6 <Bus::put_address(unsigned char)>
		sjsu::Delay(80ns);
    142c:	f107 0308 	add.w	r3, r7, #8
    1430:	4618      	mov	r0, r3
    1432:	f000 fd10 	bl	1e56 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)56, (char)48>()>
    1436:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    143a:	f7ff fa84 	bl	946 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
		write_enable.SetLow();
    143e:	687b      	ldr	r3, [r7, #4]
    1440:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1444:	4618      	mov	r0, r3
    1446:	f7ff f90a 	bl	65e <sjsu::Gpio::SetLow() const>
		sjsu::Delay(100ns);
    144a:	f107 0310 	add.w	r3, r7, #16
    144e:	4618      	mov	r0, r3
    1450:	f000 fd0e 	bl	1e70 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)48, (char)48>()>
    1454:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    1458:	f7ff fa75 	bl	946 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
		ad[0].SetAsInput();
    145c:	687b      	ldr	r3, [r7, #4]
    145e:	4618      	mov	r0, r3
    1460:	f7ff f90c 	bl	67c <sjsu::Gpio::SetAsInput() const>
		ad[1].SetAsInput();
    1464:	687b      	ldr	r3, [r7, #4]
    1466:	3320      	adds	r3, #32
    1468:	4618      	mov	r0, r3
    146a:	f7ff f907 	bl	67c <sjsu::Gpio::SetAsInput() const>
		ad[2].SetAsInput();
    146e:	687b      	ldr	r3, [r7, #4]
    1470:	3340      	adds	r3, #64	; 0x40
    1472:	4618      	mov	r0, r3
    1474:	f7ff f902 	bl	67c <sjsu::Gpio::SetAsInput() const>
		ad[3].SetAsInput();
    1478:	687b      	ldr	r3, [r7, #4]
    147a:	3360      	adds	r3, #96	; 0x60
    147c:	4618      	mov	r0, r3
    147e:	f7ff f8fd 	bl	67c <sjsu::Gpio::SetAsInput() const>
		ad[4].SetAsInput();	
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	3380      	adds	r3, #128	; 0x80
    1486:	4618      	mov	r0, r3
    1488:	f7ff f8f8 	bl	67c <sjsu::Gpio::SetAsInput() const>
		ad[5].SetAsInput();
    148c:	687b      	ldr	r3, [r7, #4]
    148e:	33a0      	adds	r3, #160	; 0xa0
    1490:	4618      	mov	r0, r3
    1492:	f7ff f8f3 	bl	67c <sjsu::Gpio::SetAsInput() const>
		ad[6].SetAsInput();
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	33c0      	adds	r3, #192	; 0xc0
    149a:	4618      	mov	r0, r3
    149c:	f7ff f8ee 	bl	67c <sjsu::Gpio::SetAsInput() const>
		ad[7].SetAsInput();
    14a0:	687b      	ldr	r3, [r7, #4]
    14a2:	33e0      	adds	r3, #224	; 0xe0
    14a4:	4618      	mov	r0, r3
    14a6:	f7ff f8e9 	bl	67c <sjsu::Gpio::SetAsInput() const>
		read.SetLow();
    14aa:	687b      	ldr	r3, [r7, #4]
    14ac:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
    14b0:	4618      	mov	r0, r3
    14b2:	f7ff f8d4 	bl	65e <sjsu::Gpio::SetLow() const>
		sjsu::Delay(80ns);
    14b6:	f107 0318 	add.w	r3, r7, #24
    14ba:	4618      	mov	r0, r3
    14bc:	f000 fccb 	bl	1e56 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)56, (char)48>()>
    14c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
    14c4:	f7ff fa3f 	bl	946 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
		for(int i = 0; i < 8; i++)
    14c8:	2300      	movs	r3, #0
    14ca:	633b      	str	r3, [r7, #48]	; 0x30
    14cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    14ce:	2b07      	cmp	r3, #7
    14d0:	dc16      	bgt.n	1500 <Bus::io_read(unsigned char)+0x10e>
		{
			read_data = read_data | (ad[i].Read() << i);
    14d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    14d4:	015b      	lsls	r3, r3, #5
    14d6:	687a      	ldr	r2, [r7, #4]
    14d8:	4413      	add	r3, r2
    14da:	4618      	mov	r0, r3
    14dc:	f7ff fcc5 	bl	e6a <sjsu::lpc40xx::Gpio::Read() const>
    14e0:	4603      	mov	r3, r0
    14e2:	461a      	mov	r2, r3
    14e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    14e6:	fa02 f303 	lsl.w	r3, r2, r3
    14ea:	b25a      	sxtb	r2, r3
    14ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
    14f0:	4313      	orrs	r3, r2
    14f2:	b25b      	sxtb	r3, r3
    14f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0; i < 8; i++)
    14f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    14fa:	3301      	adds	r3, #1
    14fc:	633b      	str	r3, [r7, #48]	; 0x30
    14fe:	e7e5      	b.n	14cc <Bus::io_read(unsigned char)+0xda>
		}		
		read.SetHigh();
    1500:	687b      	ldr	r3, [r7, #4]
    1502:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
    1506:	4618      	mov	r0, r3
    1508:	f7ff f89a 	bl	640 <sjsu::Gpio::SetHigh() const>
		sjsu::Delay(80ns);
    150c:	f107 0320 	add.w	r3, r7, #32
    1510:	4618      	mov	r0, r3
    1512:	f000 fca0 	bl	1e56 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)56, (char)48>()>
    1516:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    151a:	f7ff fa14 	bl	946 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
		return read_data;
    151e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
		sjsu::Delay(80ns);
	}
    1522:	4618      	mov	r0, r3
    1524:	3738      	adds	r7, #56	; 0x38
    1526:	46bd      	mov	sp, r7
    1528:	bd80      	pop	{r7, pc}
    152a:	Address 0x000000000000152a is out of bounds.


0000152c <Bus::polling(unsigned char, unsigned char)>:

	void polling(uint8_t address1, uint8_t address2)
    152c:	b580      	push	{r7, lr}
    152e:	b086      	sub	sp, #24
    1530:	af00      	add	r7, sp, #0
    1532:	6078      	str	r0, [r7, #4]
    1534:	460b      	mov	r3, r1
    1536:	70fb      	strb	r3, [r7, #3]
    1538:	4613      	mov	r3, r2
    153a:	70bb      	strb	r3, [r7, #2]
	{
		uint8_t read_data;
		uint8_t key;
		int i = 0;
    153c:	2300      	movs	r3, #0
    153e:	613b      	str	r3, [r7, #16]
		bool n;
		n = true;
    1540:	2301      	movs	r3, #1
    1542:	73fb      	strb	r3, [r7, #15]
		while(n == true)
    1544:	7bfb      	ldrb	r3, [r7, #15]
    1546:	2b01      	cmp	r3, #1
    1548:	d171      	bne.n	162e <Bus::polling(unsigned char, unsigned char)+0x102>
		{
    		if(i == 0)
    154a:	693b      	ldr	r3, [r7, #16]
    154c:	2b00      	cmp	r3, #0
    154e:	d115      	bne.n	157c <Bus::polling(unsigned char, unsigned char)+0x50>
    		{
      			io_write(address1, 1);
    1550:	78fb      	ldrb	r3, [r7, #3]
    1552:	2201      	movs	r2, #1
    1554:	4619      	mov	r1, r3
    1556:	6878      	ldr	r0, [r7, #4]
    1558:	f7ff ff00 	bl	135c <Bus::io_write(unsigned char, unsigned char)>
      			read_data = io_read(address2);
    155c:	78bb      	ldrb	r3, [r7, #2]
    155e:	4619      	mov	r1, r3
    1560:	6878      	ldr	r0, [r7, #4]
    1562:	f7ff ff46 	bl	13f2 <Bus::io_read(unsigned char)>
    1566:	4603      	mov	r3, r0
    1568:	73bb      	strb	r3, [r7, #14]
      			key = check_key(1, read_data); 
    156a:	7bbb      	ldrb	r3, [r7, #14]
    156c:	461a      	mov	r2, r3
    156e:	2101      	movs	r1, #1
    1570:	6878      	ldr	r0, [r7, #4]
    1572:	f000 f8e7 	bl	1744 <Bus::check_key(unsigned char, unsigned char)>
    1576:	4603      	mov	r3, r0
    1578:	75fb      	strb	r3, [r7, #23]
    157a:	e049      	b.n	1610 <Bus::polling(unsigned char, unsigned char)+0xe4>
    		}
    		else if(i == 1)
    157c:	693b      	ldr	r3, [r7, #16]
    157e:	2b01      	cmp	r3, #1
    1580:	d115      	bne.n	15ae <Bus::polling(unsigned char, unsigned char)+0x82>
    		{
      			io_write(address1, 2);
    1582:	78fb      	ldrb	r3, [r7, #3]
    1584:	2202      	movs	r2, #2
    1586:	4619      	mov	r1, r3
    1588:	6878      	ldr	r0, [r7, #4]
    158a:	f7ff fee7 	bl	135c <Bus::io_write(unsigned char, unsigned char)>
     			read_data = io_read(address2);
    158e:	78bb      	ldrb	r3, [r7, #2]
    1590:	4619      	mov	r1, r3
    1592:	6878      	ldr	r0, [r7, #4]
    1594:	f7ff ff2d 	bl	13f2 <Bus::io_read(unsigned char)>
    1598:	4603      	mov	r3, r0
    159a:	73bb      	strb	r3, [r7, #14]
      			key = check_key(2, read_data);     
    159c:	7bbb      	ldrb	r3, [r7, #14]
    159e:	461a      	mov	r2, r3
    15a0:	2102      	movs	r1, #2
    15a2:	6878      	ldr	r0, [r7, #4]
    15a4:	f000 f8ce 	bl	1744 <Bus::check_key(unsigned char, unsigned char)>
    15a8:	4603      	mov	r3, r0
    15aa:	75fb      	strb	r3, [r7, #23]
    15ac:	e030      	b.n	1610 <Bus::polling(unsigned char, unsigned char)+0xe4>
    		}
			else if(i == 2)
    15ae:	693b      	ldr	r3, [r7, #16]
    15b0:	2b02      	cmp	r3, #2
    15b2:	d115      	bne.n	15e0 <Bus::polling(unsigned char, unsigned char)+0xb4>
			{
				io_write(address1, 4);
    15b4:	78fb      	ldrb	r3, [r7, #3]
    15b6:	2204      	movs	r2, #4
    15b8:	4619      	mov	r1, r3
    15ba:	6878      	ldr	r0, [r7, #4]
    15bc:	f7ff fece 	bl	135c <Bus::io_write(unsigned char, unsigned char)>
     			read_data = io_read(address2);
    15c0:	78bb      	ldrb	r3, [r7, #2]
    15c2:	4619      	mov	r1, r3
    15c4:	6878      	ldr	r0, [r7, #4]
    15c6:	f7ff ff14 	bl	13f2 <Bus::io_read(unsigned char)>
    15ca:	4603      	mov	r3, r0
    15cc:	73bb      	strb	r3, [r7, #14]
      			key = check_key(4, read_data); 
    15ce:	7bbb      	ldrb	r3, [r7, #14]
    15d0:	461a      	mov	r2, r3
    15d2:	2104      	movs	r1, #4
    15d4:	6878      	ldr	r0, [r7, #4]
    15d6:	f000 f8b5 	bl	1744 <Bus::check_key(unsigned char, unsigned char)>
    15da:	4603      	mov	r3, r0
    15dc:	75fb      	strb	r3, [r7, #23]
    15de:	e017      	b.n	1610 <Bus::polling(unsigned char, unsigned char)+0xe4>
			} 			
			else if(i == 3)
    15e0:	693b      	ldr	r3, [r7, #16]
    15e2:	2b03      	cmp	r3, #3
    15e4:	d114      	bne.n	1610 <Bus::polling(unsigned char, unsigned char)+0xe4>
			{
				io_write(address1, 8);
    15e6:	78fb      	ldrb	r3, [r7, #3]
    15e8:	2208      	movs	r2, #8
    15ea:	4619      	mov	r1, r3
    15ec:	6878      	ldr	r0, [r7, #4]
    15ee:	f7ff feb5 	bl	135c <Bus::io_write(unsigned char, unsigned char)>
     			read_data = io_read(address2);
    15f2:	78bb      	ldrb	r3, [r7, #2]
    15f4:	4619      	mov	r1, r3
    15f6:	6878      	ldr	r0, [r7, #4]
    15f8:	f7ff fefb 	bl	13f2 <Bus::io_read(unsigned char)>
    15fc:	4603      	mov	r3, r0
    15fe:	73bb      	strb	r3, [r7, #14]
      			key = check_key(8, read_data); 
    1600:	7bbb      	ldrb	r3, [r7, #14]
    1602:	461a      	mov	r2, r3
    1604:	2108      	movs	r1, #8
    1606:	6878      	ldr	r0, [r7, #4]
    1608:	f000 f89c 	bl	1744 <Bus::check_key(unsigned char, unsigned char)>
    160c:	4603      	mov	r3, r0
    160e:	75fb      	strb	r3, [r7, #23]
			}
			if(key != 255)
    1610:	7dfb      	ldrb	r3, [r7, #23]
    1612:	2bff      	cmp	r3, #255	; 0xff
    1614:	d002      	beq.n	161c <Bus::polling(unsigned char, unsigned char)+0xf0>
			{
				n = false;
    1616:	2300      	movs	r3, #0
    1618:	73fb      	strb	r3, [r7, #15]
    161a:	e793      	b.n	1544 <Bus::polling(unsigned char, unsigned char)+0x18>
			}
			else
			{
				i = i + 1;
    161c:	693b      	ldr	r3, [r7, #16]
    161e:	3301      	adds	r3, #1
    1620:	613b      	str	r3, [r7, #16]
				if(i == 4)
    1622:	693b      	ldr	r3, [r7, #16]
    1624:	2b04      	cmp	r3, #4
    1626:	d18d      	bne.n	1544 <Bus::polling(unsigned char, unsigned char)+0x18>
				{
					i = 0;
    1628:	2300      	movs	r3, #0
    162a:	613b      	str	r3, [r7, #16]
		while(n == true)
    162c:	e78a      	b.n	1544 <Bus::polling(unsigned char, unsigned char)+0x18>
				}
			}
		}
		switch(key)
    162e:	7dfb      	ldrb	r3, [r7, #23]
    1630:	2b0f      	cmp	r3, #15
    1632:	d863      	bhi.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
    1634:	a201      	add	r2, pc, #4	; (adr r2, 163c <Bus::polling(unsigned char, unsigned char)+0x110>)
    1636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    163a:	bf00      	nop
    163c:	0000167d 	.word	0x0000167d
    1640:	00001685 	.word	0x00001685
    1644:	0000168d 	.word	0x0000168d
    1648:	00001695 	.word	0x00001695
    164c:	0000169d 	.word	0x0000169d
    1650:	000016a5 	.word	0x000016a5
    1654:	000016ad 	.word	0x000016ad
    1658:	000016b5 	.word	0x000016b5
    165c:	000016bd 	.word	0x000016bd
    1660:	000016c5 	.word	0x000016c5
    1664:	000016cd 	.word	0x000016cd
    1668:	000016d5 	.word	0x000016d5
    166c:	000016dd 	.word	0x000016dd
    1670:	000016e5 	.word	0x000016e5
    1674:	000016ed 	.word	0x000016ed
    1678:	000016f5 	.word	0x000016f5
    	{
      	case 0:
        	printf("Pressed Key: 0\n");
    167c:	4821      	ldr	r0, [pc, #132]	; (1704 <Bus::polling(unsigned char, unsigned char)+0x1d8>)
    167e:	f001 fc0d 	bl	2e9c <puts>
        	break;
    1682:	e03b      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 1:
        	printf("Pressed Key: 1\n");
    1684:	4820      	ldr	r0, [pc, #128]	; (1708 <Bus::polling(unsigned char, unsigned char)+0x1dc>)
    1686:	f001 fc09 	bl	2e9c <puts>
        	break;
    168a:	e037      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 2:
        	printf("Pressed Key: 2\n");
    168c:	481f      	ldr	r0, [pc, #124]	; (170c <Bus::polling(unsigned char, unsigned char)+0x1e0>)
    168e:	f001 fc05 	bl	2e9c <puts>
        	break;
    1692:	e033      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 3:
        	printf("Pressed Key: 3\n");
    1694:	481e      	ldr	r0, [pc, #120]	; (1710 <Bus::polling(unsigned char, unsigned char)+0x1e4>)
    1696:	f001 fc01 	bl	2e9c <puts>
        	break;
    169a:	e02f      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 4:
        	printf("Pressed Key: 4\n");
    169c:	481d      	ldr	r0, [pc, #116]	; (1714 <Bus::polling(unsigned char, unsigned char)+0x1e8>)
    169e:	f001 fbfd 	bl	2e9c <puts>
        	break;
    16a2:	e02b      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 5:
        	printf("Pressed Key: 5\n");
    16a4:	481c      	ldr	r0, [pc, #112]	; (1718 <Bus::polling(unsigned char, unsigned char)+0x1ec>)
    16a6:	f001 fbf9 	bl	2e9c <puts>
        	break;
    16aa:	e027      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 6:
        	printf("Pressed Key: 6\n");
    16ac:	481b      	ldr	r0, [pc, #108]	; (171c <Bus::polling(unsigned char, unsigned char)+0x1f0>)
    16ae:	f001 fbf5 	bl	2e9c <puts>
        	break;
    16b2:	e023      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 7:
        	printf("Pressed Key: 7\n");
    16b4:	481a      	ldr	r0, [pc, #104]	; (1720 <Bus::polling(unsigned char, unsigned char)+0x1f4>)
    16b6:	f001 fbf1 	bl	2e9c <puts>
        	break;
    16ba:	e01f      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 8:
        	printf("Pressed Key: 8\n");
    16bc:	4819      	ldr	r0, [pc, #100]	; (1724 <Bus::polling(unsigned char, unsigned char)+0x1f8>)
    16be:	f001 fbed 	bl	2e9c <puts>
        	break;
    16c2:	e01b      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 9:
        	printf("Pressed Key: 9\n");
    16c4:	4818      	ldr	r0, [pc, #96]	; (1728 <Bus::polling(unsigned char, unsigned char)+0x1fc>)
    16c6:	f001 fbe9 	bl	2e9c <puts>
        	break;
    16ca:	e017      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 10:
        	printf("Pressed Key: A\n");
    16cc:	4817      	ldr	r0, [pc, #92]	; (172c <Bus::polling(unsigned char, unsigned char)+0x200>)
    16ce:	f001 fbe5 	bl	2e9c <puts>
        	break;
    16d2:	e013      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 11:
        	printf("Pressed Key: B\n");
    16d4:	4816      	ldr	r0, [pc, #88]	; (1730 <Bus::polling(unsigned char, unsigned char)+0x204>)
    16d6:	f001 fbe1 	bl	2e9c <puts>
        	break;
    16da:	e00f      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 12:
        	printf("Pressed Key: C\n");
    16dc:	4815      	ldr	r0, [pc, #84]	; (1734 <Bus::polling(unsigned char, unsigned char)+0x208>)
    16de:	f001 fbdd 	bl	2e9c <puts>
        	break;
    16e2:	e00b      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 13:
        	printf("Pressed Key: D\n");
    16e4:	4814      	ldr	r0, [pc, #80]	; (1738 <Bus::polling(unsigned char, unsigned char)+0x20c>)
    16e6:	f001 fbd9 	bl	2e9c <puts>
        	break;
    16ea:	e007      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 14:
        	printf("Pressed Key: *\n");
    16ec:	4813      	ldr	r0, [pc, #76]	; (173c <Bus::polling(unsigned char, unsigned char)+0x210>)
    16ee:	f001 fbd5 	bl	2e9c <puts>
        	break;
    16f2:	e003      	b.n	16fc <Bus::polling(unsigned char, unsigned char)+0x1d0>
      	case 15:
        	printf("Pressed Key: #\n");
    16f4:	4812      	ldr	r0, [pc, #72]	; (1740 <Bus::polling(unsigned char, unsigned char)+0x214>)
    16f6:	f001 fbd1 	bl	2e9c <puts>
        	break;      
    16fa:	bf00      	nop
   		}		
	}
    16fc:	bf00      	nop
    16fe:	3718      	adds	r7, #24
    1700:	46bd      	mov	sp, r7
    1702:	bd80      	pop	{r7, pc}
    1704:	00007cb8 	.word	0x00007cb8
    1708:	00007cc8 	.word	0x00007cc8
    170c:	00007cd8 	.word	0x00007cd8
    1710:	00007ce8 	.word	0x00007ce8
    1714:	00007cf8 	.word	0x00007cf8
    1718:	00007d08 	.word	0x00007d08
    171c:	00007d18 	.word	0x00007d18
    1720:	00007d28 	.word	0x00007d28
    1724:	00007d38 	.word	0x00007d38
    1728:	00007d48 	.word	0x00007d48
    172c:	00007d58 	.word	0x00007d58
    1730:	00007d68 	.word	0x00007d68
    1734:	00007d78 	.word	0x00007d78
    1738:	00007d88 	.word	0x00007d88
    173c:	00007d98 	.word	0x00007d98
    1740:	00007da8 	.word	0x00007da8

00001744 <Bus::check_key(unsigned char, unsigned char)>:


	uint8_t check_key(uint8_t row_data, uint8_t col_data)
    1744:	b480      	push	{r7}
    1746:	b085      	sub	sp, #20
    1748:	af00      	add	r7, sp, #0
    174a:	6078      	str	r0, [r7, #4]
    174c:	460b      	mov	r3, r1
    174e:	70fb      	strb	r3, [r7, #3]
    1750:	4613      	mov	r3, r2
    1752:	70bb      	strb	r3, [r7, #2]
	{
		uint8_t key = 255;
    1754:	23ff      	movs	r3, #255	; 0xff
    1756:	73fb      	strb	r3, [r7, #15]
		if(row_data == 1)
    1758:	78fb      	ldrb	r3, [r7, #3]
    175a:	2b01      	cmp	r3, #1
    175c:	d117      	bne.n	178e <Bus::check_key(unsigned char, unsigned char)+0x4a>
		{
			if(col_data == 1)
    175e:	78bb      	ldrb	r3, [r7, #2]
    1760:	2b01      	cmp	r3, #1
    1762:	d102      	bne.n	176a <Bus::check_key(unsigned char, unsigned char)+0x26>
			{
				key = 1;
    1764:	2301      	movs	r3, #1
    1766:	73fb      	strb	r3, [r7, #15]
    1768:	e061      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
			else if(col_data == 2)
    176a:	78bb      	ldrb	r3, [r7, #2]
    176c:	2b02      	cmp	r3, #2
    176e:	d102      	bne.n	1776 <Bus::check_key(unsigned char, unsigned char)+0x32>
			{
				key = 2;
    1770:	2302      	movs	r3, #2
    1772:	73fb      	strb	r3, [r7, #15]
    1774:	e05b      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
			else if(col_data == 4)
    1776:	78bb      	ldrb	r3, [r7, #2]
    1778:	2b04      	cmp	r3, #4
    177a:	d102      	bne.n	1782 <Bus::check_key(unsigned char, unsigned char)+0x3e>
			{
				key = 3;
    177c:	2303      	movs	r3, #3
    177e:	73fb      	strb	r3, [r7, #15]
    1780:	e055      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
			else if(col_data == 8)
    1782:	78bb      	ldrb	r3, [r7, #2]
    1784:	2b08      	cmp	r3, #8
    1786:	d152      	bne.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			{
				key = 10;
    1788:	230a      	movs	r3, #10
    178a:	73fb      	strb	r3, [r7, #15]
    178c:	e04f      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
		}
		else if(row_data == 2)
    178e:	78fb      	ldrb	r3, [r7, #3]
    1790:	2b02      	cmp	r3, #2
    1792:	d117      	bne.n	17c4 <Bus::check_key(unsigned char, unsigned char)+0x80>
		{
			if(col_data == 1)
    1794:	78bb      	ldrb	r3, [r7, #2]
    1796:	2b01      	cmp	r3, #1
    1798:	d102      	bne.n	17a0 <Bus::check_key(unsigned char, unsigned char)+0x5c>
			{
				key = 4;
    179a:	2304      	movs	r3, #4
    179c:	73fb      	strb	r3, [r7, #15]
    179e:	e046      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
			else if(col_data == 2)
    17a0:	78bb      	ldrb	r3, [r7, #2]
    17a2:	2b02      	cmp	r3, #2
    17a4:	d102      	bne.n	17ac <Bus::check_key(unsigned char, unsigned char)+0x68>
			{
				key = 5;
    17a6:	2305      	movs	r3, #5
    17a8:	73fb      	strb	r3, [r7, #15]
    17aa:	e040      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
			else if(col_data == 4)
    17ac:	78bb      	ldrb	r3, [r7, #2]
    17ae:	2b04      	cmp	r3, #4
    17b0:	d102      	bne.n	17b8 <Bus::check_key(unsigned char, unsigned char)+0x74>
			{
				key = 6;
    17b2:	2306      	movs	r3, #6
    17b4:	73fb      	strb	r3, [r7, #15]
    17b6:	e03a      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
			else if(col_data == 8)
    17b8:	78bb      	ldrb	r3, [r7, #2]
    17ba:	2b08      	cmp	r3, #8
    17bc:	d137      	bne.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			{
				key = 11;
    17be:	230b      	movs	r3, #11
    17c0:	73fb      	strb	r3, [r7, #15]
    17c2:	e034      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}		
		}
		else if(row_data == 4)
    17c4:	78fb      	ldrb	r3, [r7, #3]
    17c6:	2b04      	cmp	r3, #4
    17c8:	d117      	bne.n	17fa <Bus::check_key(unsigned char, unsigned char)+0xb6>
		{
			if(col_data == 1)
    17ca:	78bb      	ldrb	r3, [r7, #2]
    17cc:	2b01      	cmp	r3, #1
    17ce:	d102      	bne.n	17d6 <Bus::check_key(unsigned char, unsigned char)+0x92>
			{
				key = 7;
    17d0:	2307      	movs	r3, #7
    17d2:	73fb      	strb	r3, [r7, #15]
    17d4:	e02b      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
			else if(col_data == 2)
    17d6:	78bb      	ldrb	r3, [r7, #2]
    17d8:	2b02      	cmp	r3, #2
    17da:	d102      	bne.n	17e2 <Bus::check_key(unsigned char, unsigned char)+0x9e>
			{
				key = 8;
    17dc:	2308      	movs	r3, #8
    17de:	73fb      	strb	r3, [r7, #15]
    17e0:	e025      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
			else if(col_data == 4)
    17e2:	78bb      	ldrb	r3, [r7, #2]
    17e4:	2b04      	cmp	r3, #4
    17e6:	d102      	bne.n	17ee <Bus::check_key(unsigned char, unsigned char)+0xaa>
			{
				key = 9;
    17e8:	2309      	movs	r3, #9
    17ea:	73fb      	strb	r3, [r7, #15]
    17ec:	e01f      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
			else if(col_data == 8)
    17ee:	78bb      	ldrb	r3, [r7, #2]
    17f0:	2b08      	cmp	r3, #8
    17f2:	d11c      	bne.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			{
				key = 12;
    17f4:	230c      	movs	r3, #12
    17f6:	73fb      	strb	r3, [r7, #15]
    17f8:	e019      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
		}
		else if(row_data == 8)
    17fa:	78fb      	ldrb	r3, [r7, #3]
    17fc:	2b08      	cmp	r3, #8
    17fe:	d116      	bne.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
		{
			if(col_data == 1)
    1800:	78bb      	ldrb	r3, [r7, #2]
    1802:	2b01      	cmp	r3, #1
    1804:	d102      	bne.n	180c <Bus::check_key(unsigned char, unsigned char)+0xc8>
			{
				key = 14;
    1806:	230e      	movs	r3, #14
    1808:	73fb      	strb	r3, [r7, #15]
    180a:	e010      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
			else if(col_data == 2)
    180c:	78bb      	ldrb	r3, [r7, #2]
    180e:	2b02      	cmp	r3, #2
    1810:	d102      	bne.n	1818 <Bus::check_key(unsigned char, unsigned char)+0xd4>
			{
				key = 0;
    1812:	2300      	movs	r3, #0
    1814:	73fb      	strb	r3, [r7, #15]
    1816:	e00a      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
			else if(col_data == 4)
    1818:	78bb      	ldrb	r3, [r7, #2]
    181a:	2b04      	cmp	r3, #4
    181c:	d102      	bne.n	1824 <Bus::check_key(unsigned char, unsigned char)+0xe0>
			{
				key = 15;
    181e:	230f      	movs	r3, #15
    1820:	73fb      	strb	r3, [r7, #15]
    1822:	e004      	b.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			}
			else if(col_data == 8)
    1824:	78bb      	ldrb	r3, [r7, #2]
    1826:	2b08      	cmp	r3, #8
    1828:	d101      	bne.n	182e <Bus::check_key(unsigned char, unsigned char)+0xea>
			{
				key = 13;
    182a:	230d      	movs	r3, #13
    182c:	73fb      	strb	r3, [r7, #15]
			}		
		}
		return key;
    182e:	7bfb      	ldrb	r3, [r7, #15]
	}
    1830:	4618      	mov	r0, r3
    1832:	3714      	adds	r7, #20
    1834:	46bd      	mov	sp, r7
    1836:	f85d 7b04 	ldr.w	r7, [sp], #4
    183a:	4770      	bx	lr

0000183c <Bus::Bus()>:
class Bus	
    183c:	b580      	push	{r7, lr}
    183e:	b082      	sub	sp, #8
    1840:	af00      	add	r7, sp, #0
    1842:	6078      	str	r0, [r7, #4]
    1844:	6878      	ldr	r0, [r7, #4]
    1846:	2300      	movs	r3, #0
    1848:	2202      	movs	r2, #2
    184a:	2102      	movs	r1, #2
    184c:	f7ff fa4a 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1850:	687b      	ldr	r3, [r7, #4]
    1852:	f103 0020 	add.w	r0, r3, #32
    1856:	2300      	movs	r3, #0
    1858:	2205      	movs	r2, #5
    185a:	2102      	movs	r1, #2
    185c:	f7ff fa42 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1860:	687b      	ldr	r3, [r7, #4]
    1862:	f103 0040 	add.w	r0, r3, #64	; 0x40
    1866:	2300      	movs	r3, #0
    1868:	2207      	movs	r2, #7
    186a:	2102      	movs	r1, #2
    186c:	f7ff fa3a 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1870:	687b      	ldr	r3, [r7, #4]
    1872:	f103 0060 	add.w	r0, r3, #96	; 0x60
    1876:	2300      	movs	r3, #0
    1878:	2209      	movs	r2, #9
    187a:	2102      	movs	r1, #2
    187c:	f7ff fa32 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1880:	687b      	ldr	r3, [r7, #4]
    1882:	f103 0080 	add.w	r0, r3, #128	; 0x80
    1886:	2300      	movs	r3, #0
    1888:	220f      	movs	r2, #15
    188a:	2100      	movs	r1, #0
    188c:	f7ff fa2a 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1890:	687b      	ldr	r3, [r7, #4]
    1892:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
    1896:	2300      	movs	r3, #0
    1898:	2212      	movs	r2, #18
    189a:	2100      	movs	r1, #0
    189c:	f7ff fa22 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    18a0:	687b      	ldr	r3, [r7, #4]
    18a2:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
    18a6:	2300      	movs	r3, #0
    18a8:	2201      	movs	r2, #1
    18aa:	2100      	movs	r1, #0
    18ac:	f7ff fa1a 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
    18b6:	2300      	movs	r3, #0
    18b8:	220a      	movs	r2, #10
    18ba:	2100      	movs	r1, #0
    18bc:	f7ff fa12 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    18c0:	687b      	ldr	r3, [r7, #4]
    18c2:	f503 7080 	add.w	r0, r3, #256	; 0x100
    18c6:	2300      	movs	r3, #0
    18c8:	2211      	movs	r2, #17
    18ca:	2100      	movs	r1, #0
    18cc:	f7ff fa0a 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    18d0:	687b      	ldr	r3, [r7, #4]
    18d2:	f503 7090 	add.w	r0, r3, #288	; 0x120
    18d6:	2300      	movs	r3, #0
    18d8:	2216      	movs	r2, #22
    18da:	2100      	movs	r1, #0
    18dc:	f7ff fa02 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	f503 70a0 	add.w	r0, r3, #320	; 0x140
    18e6:	2300      	movs	r3, #0
    18e8:	2200      	movs	r2, #0
    18ea:	2100      	movs	r1, #0
    18ec:	f7ff f9fa 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    18f0:	687b      	ldr	r3, [r7, #4]
    18f2:	f503 70b0 	add.w	r0, r3, #352	; 0x160
    18f6:	2300      	movs	r3, #0
    18f8:	220b      	movs	r2, #11
    18fa:	2100      	movs	r1, #0
    18fc:	f7ff f9f2 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1900:	687b      	ldr	r3, [r7, #4]
    1902:	f503 70c0 	add.w	r0, r3, #384	; 0x180
    1906:	2300      	movs	r3, #0
    1908:	2210      	movs	r2, #16
    190a:	2100      	movs	r1, #0
    190c:	f7ff f9ea 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
    1916:	2300      	movs	r3, #0
    1918:	2208      	movs	r2, #8
    191a:	2102      	movs	r1, #2
    191c:	f7ff f9e2 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1920:	687b      	ldr	r3, [r7, #4]
    1922:	4618      	mov	r0, r3
    1924:	3708      	adds	r7, #8
    1926:	46bd      	mov	sp, r7
    1928:	bd80      	pop	{r7, pc}
    192a:	Address 0x000000000000192a is out of bounds.


0000192c <irs()>:
#include "Bus.hpp"

Bus bus;

void irs()
{
    192c:	b580      	push	{r7, lr}
    192e:	b082      	sub	sp, #8
    1930:	af00      	add	r7, sp, #0
  LOG_INFO("Interrupt Detected\n");
    1932:	2308      	movs	r3, #8
    1934:	4a0d      	ldr	r2, [pc, #52]	; (196c <irs()+0x40>)
    1936:	490e      	ldr	r1, [pc, #56]	; (1970 <irs()+0x44>)
    1938:	480e      	ldr	r0, [pc, #56]	; (1974 <irs()+0x48>)
    193a:	f002 fbf5 	bl	4128 <printf>
  uint8_t data5;
  uint8_t address10;
  uint8_t address11;
  address10 = 0;
    193e:	2300      	movs	r3, #0
    1940:	71fb      	strb	r3, [r7, #7]
  address11 = 1;
    1942:	2301      	movs	r3, #1
    1944:	71bb      	strb	r3, [r7, #6]
  bus.polling(address10, address11);
    1946:	79ba      	ldrb	r2, [r7, #6]
    1948:	79fb      	ldrb	r3, [r7, #7]
    194a:	4619      	mov	r1, r3
    194c:	480a      	ldr	r0, [pc, #40]	; (1978 <irs()+0x4c>)
    194e:	f7ff fded 	bl	152c <Bus::polling(unsigned char, unsigned char)>
  data5 = 15;
    1952:	230f      	movs	r3, #15
    1954:	717b      	strb	r3, [r7, #5]
  bus.io_write(address10, data5);
    1956:	797a      	ldrb	r2, [r7, #5]
    1958:	79fb      	ldrb	r3, [r7, #7]
    195a:	4619      	mov	r1, r3
    195c:	4806      	ldr	r0, [pc, #24]	; (1978 <irs()+0x4c>)
    195e:	f7ff fcfd 	bl	135c <Bus::io_write(unsigned char, unsigned char)>
}
    1962:	bf00      	nop
    1964:	3708      	adds	r7, #8
    1966:	46bd      	mov	sp, r7
    1968:	bd80      	pop	{r7, pc}
    196a:	bf00      	nop
    196c:	00007db8 	.word	0x00007db8
    1970:	00007e20 	.word	0x00007e20
    1974:	00007dc4 	.word	0x00007dc4
    1978:	10000584 	.word	0x10000584

0000197c <main>:

int main()
{
    197c:	b580      	push	{r7, lr}
    197e:	b090      	sub	sp, #64	; 0x40
    1980:	af00      	add	r7, sp, #0
  sjsu::lpc40xx::Gpio interrupt = sjsu::lpc40xx::Gpio(0,11);
    1982:	1d38      	adds	r0, r7, #4
    1984:	2300      	movs	r3, #0
    1986:	220b      	movs	r2, #11
    1988:	2100      	movs	r1, #0
    198a:	f7ff f9ab 	bl	ce4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  uint8_t address2;
  uint8_t address3;
  uint8_t data1;
  uint8_t data2;

  int n = 0;
    198e:	2300      	movs	r3, #0
    1990:	63fb      	str	r3, [r7, #60]	; 0x3c
  address1 = 3;
    1992:	2303      	movs	r3, #3
    1994:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  address2 = 0;
    1998:	2300      	movs	r3, #0
    199a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  address3 = 1;
    199e:	2301      	movs	r3, #1
    19a0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data1 = 134;
    19a4:	2386      	movs	r3, #134	; 0x86
    19a6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  bus.Initialize();
    19aa:	4823      	ldr	r0, [pc, #140]	; (1a38 <main+0xbc>)
    19ac:	f7ff fb78 	bl	10a0 <Bus::Initialize()>
  bus.io_write(address1, data1);
    19b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    19b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    19b8:	4619      	mov	r1, r3
    19ba:	481f      	ldr	r0, [pc, #124]	; (1a38 <main+0xbc>)
    19bc:	f7ff fcce 	bl	135c <Bus::io_write(unsigned char, unsigned char)>
  data1 = 5; // Used to set INTE B which was 0b 0000 0101  
    19c0:	2305      	movs	r3, #5
    19c2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

  bus.io_write(address1, data1);
    19c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    19ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    19ce:	4619      	mov	r1, r3
    19d0:	4819      	ldr	r0, [pc, #100]	; (1a38 <main+0xbc>)
    19d2:	f7ff fcc3 	bl	135c <Bus::io_write(unsigned char, unsigned char)>
  data2 = 15;
    19d6:	230f      	movs	r3, #15
    19d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  bus.io_write(address2, data2);
    19dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
    19e0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    19e4:	4619      	mov	r1, r3
    19e6:	4814      	ldr	r0, [pc, #80]	; (1a38 <main+0xbc>)
    19e8:	f7ff fcb8 	bl	135c <Bus::io_write(unsigned char, unsigned char)>
  interrupt.GetPin().SetPull(sjsu::Pin::Resistor::kPullUp);
    19ec:	1d3b      	adds	r3, r7, #4
    19ee:	4618      	mov	r0, r3
    19f0:	f7ff fa4d 	bl	e8e <sjsu::lpc40xx::Gpio::GetPin() const>
    19f4:	4603      	mov	r3, r0
    19f6:	681a      	ldr	r2, [r3, #0]
    19f8:	3208      	adds	r2, #8
    19fa:	6812      	ldr	r2, [r2, #0]
    19fc:	2102      	movs	r1, #2
    19fe:	4618      	mov	r0, r3
    1a00:	4790      	blx	r2
  interrupt.AttachInterrupt(irs, sjsu::Gpio::Edge::kEdgeRising);  
    1a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1a06:	490d      	ldr	r1, [pc, #52]	; (1a3c <main+0xc0>)
    1a08:	4618      	mov	r0, r3
    1a0a:	f000 f9c5 	bl	1d98 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
    1a0e:	f107 0124 	add.w	r1, r7, #36	; 0x24
    1a12:	1d3b      	adds	r3, r7, #4
    1a14:	2200      	movs	r2, #0
    1a16:	4618      	mov	r0, r3
    1a18:	f7ff fa60 	bl	edc <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)>
    1a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1a20:	4618      	mov	r0, r3
    1a22:	f7ff fa40 	bl	ea6 <std::function<void ()>::~function()>
  
  while(n == 0)
    1a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d100      	bne.n	1a2e <main+0xb2>
    1a2c:	e7fb      	b.n	1a26 <main+0xaa>
  {
  }
  
  
  return 0;
    1a2e:	2300      	movs	r3, #0
  

}
    1a30:	4618      	mov	r0, r3
    1a32:	3740      	adds	r7, #64	; 0x40
    1a34:	46bd      	mov	sp, r7
    1a36:	bd80      	pop	{r7, pc}
    1a38:	10000584 	.word	0x10000584
    1a3c:	0000192d 	.word	0x0000192d

00001a40 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    1a40:	b580      	push	{r7, lr}
    1a42:	b084      	sub	sp, #16
    1a44:	af00      	add	r7, sp, #0
    1a46:	60f8      	str	r0, [r7, #12]
    1a48:	460b      	mov	r3, r1
    1a4a:	80ba      	strh	r2, [r7, #4]
    1a4c:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    1a4e:	793b      	ldrb	r3, [r7, #4]
    1a50:	461a      	mov	r2, r3
    1a52:	797b      	ldrb	r3, [r7, #5]
    1a54:	7af9      	ldrb	r1, [r7, #11]
    1a56:	68f8      	ldr	r0, [r7, #12]
    1a58:	f000 fa17 	bl	1e8a <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    1a5c:	4603      	mov	r3, r0
}
    1a5e:	4618      	mov	r0, r3
    1a60:	3710      	adds	r7, #16
    1a62:	46bd      	mov	sp, r7
    1a64:	bd80      	pop	{r7, pc}

00001a66 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()>:
      operator""us()
    1a66:	b580      	push	{r7, lr}
    1a68:	b082      	sub	sp, #8
    1a6a:	af00      	add	r7, sp, #0
    1a6c:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::microseconds, _Digits...>(); }
    1a6e:	687b      	ldr	r3, [r7, #4]
    1a70:	4618      	mov	r0, r3
    1a72:	f000 fa37 	bl	1ee4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()>
    1a76:	bf00      	nop
    1a78:	6878      	ldr	r0, [r7, #4]
    1a7a:	3708      	adds	r7, #8
    1a7c:	46bd      	mov	sp, r7
    1a7e:	bd80      	pop	{r7, pc}

00001a80 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    1a80:	b580      	push	{r7, lr}
    1a82:	b084      	sub	sp, #16
    1a84:	af00      	add	r7, sp, #0
    1a86:	6078      	str	r0, [r7, #4]
    1a88:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    1a8a:	f107 0308 	add.w	r3, r7, #8
    1a8e:	6839      	ldr	r1, [r7, #0]
    1a90:	4618      	mov	r0, r3
    1a92:	f000 fa3b 	bl	1f0c <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1a96:	f107 0308 	add.w	r3, r7, #8
    1a9a:	4618      	mov	r0, r3
    1a9c:	f7fe fe0a 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    1aa0:	4602      	mov	r2, r0
    1aa2:	460b      	mov	r3, r1
    1aa4:	6879      	ldr	r1, [r7, #4]
    1aa6:	e9c1 2300 	strd	r2, r3, [r1]
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	4618      	mov	r0, r3
    1aae:	3710      	adds	r7, #16
    1ab0:	46bd      	mov	sp, r7
    1ab2:	bd80      	pop	{r7, pc}

00001ab4 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
    1ab4:	b590      	push	{r4, r7, lr}
    1ab6:	b083      	sub	sp, #12
    1ab8:	af00      	add	r7, sp, #0
    1aba:	6078      	str	r0, [r7, #4]
    1abc:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	4618      	mov	r0, r3
    1ac2:	f7fe fc81 	bl	3c8 <std::_Function_base::_Function_base()>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
    1ac6:	683b      	ldr	r3, [r7, #0]
    1ac8:	4618      	mov	r0, r3
    1aca:	f000 fa2e 	bl	1f2a <bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    1ace:	4603      	mov	r3, r0
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d00f      	beq.n	1af4 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    1ad4:	687c      	ldr	r4, [r7, #4]
    1ad6:	463b      	mov	r3, r7
    1ad8:	4618      	mov	r0, r3
    1ada:	f000 fa36 	bl	1f4a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    1ade:	4603      	mov	r3, r0
    1ae0:	4619      	mov	r1, r3
    1ae2:	4620      	mov	r0, r4
    1ae4:	f000 fa3c 	bl	1f60 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())>
	    _M_invoker = &_My_handler::_M_invoke;
    1ae8:	687b      	ldr	r3, [r7, #4]
    1aea:	4a05      	ldr	r2, [pc, #20]	; (1b00 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x4c>)
    1aec:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    1aee:	687b      	ldr	r3, [r7, #4]
    1af0:	4a04      	ldr	r2, [pc, #16]	; (1b04 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x50>)
    1af2:	609a      	str	r2, [r3, #8]
	  }
      }
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	4618      	mov	r0, r3
    1af8:	370c      	adds	r7, #12
    1afa:	46bd      	mov	sp, r7
    1afc:	bd90      	pop	{r4, r7, pc}
    1afe:	bf00      	nop
    1b00:	00001f85 	.word	0x00001f85
    1b04:	00001fa9 	.word	0x00001fa9

00001b08 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::max()>:
	max() noexcept
    1b08:	b580      	push	{r7, lr}
    1b0a:	b084      	sub	sp, #16
    1b0c:	af00      	add	r7, sp, #0
    1b0e:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    1b10:	f000 fa75 	bl	1ffe <std::chrono::duration_values<long long>::max()>
    1b14:	4602      	mov	r2, r0
    1b16:	460b      	mov	r3, r1
    1b18:	e9c7 2302 	strd	r2, r3, [r7, #8]
    1b1c:	f107 0308 	add.w	r3, r7, #8
    1b20:	4619      	mov	r1, r3
    1b22:	6878      	ldr	r0, [r7, #4]
    1b24:	f7fe fdfc 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
    1b28:	6878      	ldr	r0, [r7, #4]
    1b2a:	3710      	adds	r7, #16
    1b2c:	46bd      	mov	sp, r7
    1b2e:	bd80      	pop	{r7, pc}

00001b30 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
    1b30:	b5b0      	push	{r4, r5, r7, lr}
    1b32:	b086      	sub	sp, #24
    1b34:	af00      	add	r7, sp, #0
    1b36:	6078      	str	r0, [r7, #4]
    1b38:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b40:	e9c7 2302 	strd	r2, r3, [r7, #8]
    1b44:	f107 0308 	add.w	r3, r7, #8
    1b48:	4618      	mov	r0, r3
    1b4a:	f7fe fdb3 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    1b4e:	4604      	mov	r4, r0
    1b50:	460d      	mov	r5, r1
    1b52:	683b      	ldr	r3, [r7, #0]
    1b54:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    1b5c:	f107 0310 	add.w	r3, r7, #16
    1b60:	4618      	mov	r0, r3
    1b62:	f7fe fda7 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    1b66:	4602      	mov	r2, r0
    1b68:	460b      	mov	r3, r1
    1b6a:	429d      	cmp	r5, r3
    1b6c:	bf06      	itte	eq
    1b6e:	4294      	cmpeq	r4, r2
    1b70:	2301      	moveq	r3, #1
    1b72:	2300      	movne	r3, #0
    1b74:	b2db      	uxtb	r3, r3
      }
    1b76:	4618      	mov	r0, r3
    1b78:	3718      	adds	r7, #24
    1b7a:	46bd      	mov	sp, r7
    1b7c:	bdb0      	pop	{r4, r5, r7, pc}

00001b7e <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    1b7e:	b580      	push	{r7, lr}
    1b80:	b082      	sub	sp, #8
    1b82:	af00      	add	r7, sp, #0
    1b84:	6078      	str	r0, [r7, #4]
    1b86:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    1b88:	683b      	ldr	r3, [r7, #0]
    1b8a:	4618      	mov	r0, r3
    1b8c:	f7fe fc3d 	bl	40a <std::_Function_base::_M_empty() const>
    1b90:	4603      	mov	r3, r0
    1b92:	2b00      	cmp	r3, #0
    1b94:	d001      	beq.n	1b9a <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const+0x1c>
	__throw_bad_function_call();
    1b96:	f004 fcaf 	bl	64f8 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1b9a:	683b      	ldr	r3, [r7, #0]
    1b9c:	68db      	ldr	r3, [r3, #12]
    1b9e:	6839      	ldr	r1, [r7, #0]
    1ba0:	687a      	ldr	r2, [r7, #4]
    1ba2:	4610      	mov	r0, r2
    1ba4:	4798      	blx	r3
    1ba6:	bf00      	nop
    }
    1ba8:	6878      	ldr	r0, [r7, #4]
    1baa:	3708      	adds	r7, #8
    1bac:	46bd      	mov	sp, r7
    1bae:	bd80      	pop	{r7, pc}

00001bb0 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    1bb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    1bb4:	b08a      	sub	sp, #40	; 0x28
    1bb6:	af00      	add	r7, sp, #0
    1bb8:	60f8      	str	r0, [r7, #12]
    1bba:	60b9      	str	r1, [r7, #8]
    1bbc:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    1bbe:	68bb      	ldr	r3, [r7, #8]
    1bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    1bc8:	f107 0318 	add.w	r3, r7, #24
    1bcc:	4618      	mov	r0, r3
    1bce:	f7fe fd71 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    1bd2:	4604      	mov	r4, r0
    1bd4:	460d      	mov	r5, r1
    1bd6:	687b      	ldr	r3, [r7, #4]
    1bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bdc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    1be0:	f107 0320 	add.w	r3, r7, #32
    1be4:	4618      	mov	r0, r3
    1be6:	f7fe fd65 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    1bea:	4602      	mov	r2, r0
    1bec:	460b      	mov	r3, r1
    1bee:	eb14 0802 	adds.w	r8, r4, r2
    1bf2:	eb45 0903 	adc.w	r9, r5, r3
    1bf6:	e9c7 8904 	strd	r8, r9, [r7, #16]
    1bfa:	f107 0310 	add.w	r3, r7, #16
    1bfe:	4619      	mov	r1, r3
    1c00:	68f8      	ldr	r0, [r7, #12]
    1c02:	f7fe fd8d 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    1c06:	68f8      	ldr	r0, [r7, #12]
    1c08:	3728      	adds	r7, #40	; 0x28
    1c0a:	46bd      	mov	sp, r7
    1c0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

00001c10 <bool std::chrono::operator<=<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator<=(const duration<_Rep1, _Period1>& __lhs,
    1c10:	b580      	push	{r7, lr}
    1c12:	b082      	sub	sp, #8
    1c14:	af00      	add	r7, sp, #0
    1c16:	6078      	str	r0, [r7, #4]
    1c18:	6039      	str	r1, [r7, #0]
      { return !(__rhs < __lhs); }
    1c1a:	6879      	ldr	r1, [r7, #4]
    1c1c:	6838      	ldr	r0, [r7, #0]
    1c1e:	f7fe fd57 	bl	6d0 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    1c22:	4603      	mov	r3, r0
    1c24:	f083 0301 	eor.w	r3, r3, #1
    1c28:	b2db      	uxtb	r3, r3
    1c2a:	4618      	mov	r0, r3
    1c2c:	3708      	adds	r7, #8
    1c2e:	46bd      	mov	sp, r7
    1c30:	bd80      	pop	{r7, pc}

00001c32 <std::function<bool ()>::operator()() const>:
    function<_Res(_ArgTypes...)>::
    1c32:	b580      	push	{r7, lr}
    1c34:	b082      	sub	sp, #8
    1c36:	af00      	add	r7, sp, #0
    1c38:	6078      	str	r0, [r7, #4]
      if (_M_empty())
    1c3a:	687b      	ldr	r3, [r7, #4]
    1c3c:	4618      	mov	r0, r3
    1c3e:	f7fe fbe4 	bl	40a <std::_Function_base::_M_empty() const>
    1c42:	4603      	mov	r3, r0
    1c44:	2b00      	cmp	r3, #0
    1c46:	d001      	beq.n	1c4c <std::function<bool ()>::operator()() const+0x1a>
	__throw_bad_function_call();
    1c48:	f004 fc56 	bl	64f8 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	68db      	ldr	r3, [r3, #12]
    1c50:	687a      	ldr	r2, [r7, #4]
    1c52:	4610      	mov	r0, r2
    1c54:	4798      	blx	r3
    1c56:	4603      	mov	r3, r0
    }
    1c58:	4618      	mov	r0, r3
    1c5a:	3708      	adds	r7, #8
    1c5c:	46bd      	mov	sp, r7
    1c5e:	bd80      	pop	{r7, pc}

00001c60 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})>:
      function<_Res(_ArgTypes...)>::
    1c60:	b590      	push	{r4, r7, lr}
    1c62:	b083      	sub	sp, #12
    1c64:	af00      	add	r7, sp, #0
    1c66:	6078      	str	r0, [r7, #4]
    1c68:	7039      	strb	r1, [r7, #0]
      : _Function_base()
    1c6a:	687b      	ldr	r3, [r7, #4]
    1c6c:	4618      	mov	r0, r3
    1c6e:	f7fe fbab 	bl	3c8 <std::_Function_base::_Function_base()>
	if (_My_handler::_M_not_empty_function(__f))
    1c72:	463b      	mov	r3, r7
    1c74:	4618      	mov	r0, r3
    1c76:	f000 f9cb 	bl	2010 <bool std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_not_empty_function<{lambda()#1}>({lambda()#1} const&)>
    1c7a:	4603      	mov	r3, r0
    1c7c:	2b00      	cmp	r3, #0
    1c7e:	d00f      	beq.n	1ca0 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    1c80:	687c      	ldr	r4, [r7, #4]
    1c82:	463b      	mov	r3, r7
    1c84:	4618      	mov	r0, r3
    1c86:	f000 f9ce 	bl	2026 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>
    1c8a:	4603      	mov	r3, r0
    1c8c:	4619      	mov	r1, r3
    1c8e:	4620      	mov	r0, r4
    1c90:	f000 f9d4 	bl	203c <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&)>
	    _M_invoker = &_My_handler::_M_invoke;
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	4a05      	ldr	r2, [pc, #20]	; (1cac <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})+0x4c>)
    1c98:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    1c9a:	687b      	ldr	r3, [r7, #4]
    1c9c:	4a04      	ldr	r2, [pc, #16]	; (1cb0 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})+0x50>)
    1c9e:	609a      	str	r2, [r3, #8]
      }
    1ca0:	687b      	ldr	r3, [r7, #4]
    1ca2:	4618      	mov	r0, r3
    1ca4:	370c      	adds	r7, #12
    1ca6:	46bd      	mov	sp, r7
    1ca8:	bd90      	pop	{r4, r7, pc}
    1caa:	bf00      	nop
    1cac:	00002061 	.word	0x00002061
    1cb0:	00002081 	.word	0x00002081

00001cb4 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    1cb4:	b580      	push	{r7, lr}
    1cb6:	b084      	sub	sp, #16
    1cb8:	af00      	add	r7, sp, #0
    1cba:	60f8      	str	r0, [r7, #12]
    1cbc:	460b      	mov	r3, r1
    1cbe:	80ba      	strh	r2, [r7, #4]
    1cc0:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    1cc2:	793b      	ldrb	r3, [r7, #4]
    1cc4:	461a      	mov	r2, r3
    1cc6:	797b      	ldrb	r3, [r7, #5]
    1cc8:	7af9      	ldrb	r1, [r7, #11]
    1cca:	68f8      	ldr	r0, [r7, #12]
    1ccc:	f000 fa03 	bl	20d6 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>
    1cd0:	4603      	mov	r3, r0
}
    1cd2:	4618      	mov	r0, r3
    1cd4:	3710      	adds	r7, #16
    1cd6:	46bd      	mov	sp, r7
    1cd8:	bd80      	pop	{r7, pc}

00001cda <std::function<void ()>::function()>:
      function() noexcept
    1cda:	b580      	push	{r7, lr}
    1cdc:	b082      	sub	sp, #8
    1cde:	af00      	add	r7, sp, #0
    1ce0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	4618      	mov	r0, r3
    1ce6:	f7fe fb6f 	bl	3c8 <std::_Function_base::_Function_base()>
    1cea:	687b      	ldr	r3, [r7, #4]
    1cec:	4618      	mov	r0, r3
    1cee:	3708      	adds	r7, #8
    1cf0:	46bd      	mov	sp, r7
    1cf2:	bd80      	pop	{r7, pc}

00001cf4 <std::function<void ()>::operator()() const>:
    function<_Res(_ArgTypes...)>::
    1cf4:	b580      	push	{r7, lr}
    1cf6:	b082      	sub	sp, #8
    1cf8:	af00      	add	r7, sp, #0
    1cfa:	6078      	str	r0, [r7, #4]
      if (_M_empty())
    1cfc:	687b      	ldr	r3, [r7, #4]
    1cfe:	4618      	mov	r0, r3
    1d00:	f7fe fb83 	bl	40a <std::_Function_base::_M_empty() const>
    1d04:	4603      	mov	r3, r0
    1d06:	2b00      	cmp	r3, #0
    1d08:	d001      	beq.n	1d0e <std::function<void ()>::operator()() const+0x1a>
	__throw_bad_function_call();
    1d0a:	f004 fbf5 	bl	64f8 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1d0e:	687b      	ldr	r3, [r7, #4]
    1d10:	68db      	ldr	r3, [r3, #12]
    1d12:	687a      	ldr	r2, [r7, #4]
    1d14:	4610      	mov	r0, r2
    1d16:	4798      	blx	r3
    1d18:	bf00      	nop
    }
    1d1a:	3708      	adds	r7, #8
    1d1c:	46bd      	mov	sp, r7
    1d1e:	bd80      	pop	{r7, pc}

00001d20 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    1d20:	b480      	push	{r7}
    1d22:	b083      	sub	sp, #12
    1d24:	af00      	add	r7, sp, #0
    1d26:	6078      	str	r0, [r7, #4]
    1d28:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    1d2a:	2201      	movs	r2, #1
    1d2c:	683b      	ldr	r3, [r7, #0]
    1d2e:	fa02 f303 	lsl.w	r3, r2, r3
    1d32:	43db      	mvns	r3, r3
    1d34:	461a      	mov	r2, r3
    1d36:	687b      	ldr	r3, [r7, #4]
    1d38:	4013      	ands	r3, r2
}
    1d3a:	4618      	mov	r0, r3
    1d3c:	370c      	adds	r7, #12
    1d3e:	46bd      	mov	sp, r7
    1d40:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d44:	4770      	bx	lr

00001d46 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    1d46:	b480      	push	{r7}
    1d48:	b083      	sub	sp, #12
    1d4a:	af00      	add	r7, sp, #0
    1d4c:	6078      	str	r0, [r7, #4]
    1d4e:	6039      	str	r1, [r7, #0]
  return static_cast<T>(target | (1 << position));
    1d50:	2201      	movs	r2, #1
    1d52:	683b      	ldr	r3, [r7, #0]
    1d54:	fa02 f303 	lsl.w	r3, r2, r3
    1d58:	461a      	mov	r2, r3
    1d5a:	687b      	ldr	r3, [r7, #4]
    1d5c:	4313      	orrs	r3, r2
}
    1d5e:	4618      	mov	r0, r3
    1d60:	370c      	adds	r7, #12
    1d62:	46bd      	mov	sp, r7
    1d64:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d68:	4770      	bx	lr

00001d6a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    1d6a:	b480      	push	{r7}
    1d6c:	b083      	sub	sp, #12
    1d6e:	af00      	add	r7, sp, #0
    1d70:	6078      	str	r0, [r7, #4]
    1d72:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    1d74:	2201      	movs	r2, #1
    1d76:	683b      	ldr	r3, [r7, #0]
    1d78:	fa02 f303 	lsl.w	r3, r2, r3
    1d7c:	461a      	mov	r2, r3
    1d7e:	687b      	ldr	r3, [r7, #4]
    1d80:	4013      	ands	r3, r2
    1d82:	2b00      	cmp	r3, #0
    1d84:	bf14      	ite	ne
    1d86:	2301      	movne	r3, #1
    1d88:	2300      	moveq	r3, #0
    1d8a:	b2db      	uxtb	r3, r3
}
    1d8c:	4618      	mov	r0, r3
    1d8e:	370c      	adds	r7, #12
    1d90:	46bd      	mov	sp, r7
    1d92:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d96:	4770      	bx	lr

00001d98 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>:
      function<_Res(_ArgTypes...)>::
    1d98:	b590      	push	{r4, r7, lr}
    1d9a:	b083      	sub	sp, #12
    1d9c:	af00      	add	r7, sp, #0
    1d9e:	6078      	str	r0, [r7, #4]
    1da0:	6039      	str	r1, [r7, #0]
      : _Function_base()
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	4618      	mov	r0, r3
    1da6:	f7fe fb0f 	bl	3c8 <std::_Function_base::_Function_base()>
	if (_My_handler::_M_not_empty_function(__f))
    1daa:	683b      	ldr	r3, [r7, #0]
    1dac:	4618      	mov	r0, r3
    1dae:	f000 f9bf 	bl	2130 <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>
    1db2:	4603      	mov	r3, r0
    1db4:	2b00      	cmp	r3, #0
    1db6:	d00f      	beq.n	1dd8 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    1db8:	687c      	ldr	r4, [r7, #4]
    1dba:	463b      	mov	r3, r7
    1dbc:	4618      	mov	r0, r3
    1dbe:	f000 f9c7 	bl	2150 <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    1dc2:	4603      	mov	r3, r0
    1dc4:	4619      	mov	r1, r3
    1dc6:	4620      	mov	r0, r4
    1dc8:	f000 f9cd 	bl	2166 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>
	    _M_invoker = &_My_handler::_M_invoke;
    1dcc:	687b      	ldr	r3, [r7, #4]
    1dce:	4a05      	ldr	r2, [pc, #20]	; (1de4 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x4c>)
    1dd0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	4a04      	ldr	r2, [pc, #16]	; (1de8 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x50>)
    1dd6:	609a      	str	r2, [r3, #8]
      }
    1dd8:	687b      	ldr	r3, [r7, #4]
    1dda:	4618      	mov	r0, r3
    1ddc:	370c      	adds	r7, #12
    1dde:	46bd      	mov	sp, r7
    1de0:	bd90      	pop	{r4, r7, pc}
    1de2:	bf00      	nop
    1de4:	0000218b 	.word	0x0000218b
    1de8:	000021a7 	.word	0x000021a7

00001dec <std::function<void ()>::operator=(std::function<void ()> const&)>:
      operator=(const function& __x)
    1dec:	b580      	push	{r7, lr}
    1dee:	b086      	sub	sp, #24
    1df0:	af00      	add	r7, sp, #0
    1df2:	6078      	str	r0, [r7, #4]
    1df4:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
    1df6:	f107 0308 	add.w	r3, r7, #8
    1dfa:	6839      	ldr	r1, [r7, #0]
    1dfc:	4618      	mov	r0, r3
    1dfe:	f000 f9fd 	bl	21fc <std::function<void ()>::function(std::function<void ()> const&)>
    1e02:	f107 0308 	add.w	r3, r7, #8
    1e06:	6879      	ldr	r1, [r7, #4]
    1e08:	4618      	mov	r0, r3
    1e0a:	f000 fa19 	bl	2240 <std::function<void ()>::swap(std::function<void ()>&)>
    1e0e:	f107 0308 	add.w	r3, r7, #8
    1e12:	4618      	mov	r0, r3
    1e14:	f7ff f847 	bl	ea6 <std::function<void ()>::~function()>
	return *this;
    1e18:	687b      	ldr	r3, [r7, #4]
      }
    1e1a:	4618      	mov	r0, r3
    1e1c:	3718      	adds	r7, #24
    1e1e:	46bd      	mov	sp, r7
    1e20:	bd80      	pop	{r7, pc}

00001e22 <std::function<void ()>::operator=(decltype(nullptr))>:
      operator=(nullptr_t) noexcept
    1e22:	b580      	push	{r7, lr}
    1e24:	b082      	sub	sp, #8
    1e26:	af00      	add	r7, sp, #0
    1e28:	6078      	str	r0, [r7, #4]
    1e2a:	6039      	str	r1, [r7, #0]
	if (_M_manager)
    1e2c:	687b      	ldr	r3, [r7, #4]
    1e2e:	689b      	ldr	r3, [r3, #8]
    1e30:	2b00      	cmp	r3, #0
    1e32:	d00b      	beq.n	1e4c <std::function<void ()>::operator=(decltype(nullptr))+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    1e34:	687b      	ldr	r3, [r7, #4]
    1e36:	689b      	ldr	r3, [r3, #8]
    1e38:	6878      	ldr	r0, [r7, #4]
    1e3a:	6879      	ldr	r1, [r7, #4]
    1e3c:	2203      	movs	r2, #3
    1e3e:	4798      	blx	r3
	    _M_manager = nullptr;
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	2200      	movs	r2, #0
    1e44:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
    1e46:	687b      	ldr	r3, [r7, #4]
    1e48:	2200      	movs	r2, #0
    1e4a:	60da      	str	r2, [r3, #12]
	return *this;
    1e4c:	687b      	ldr	r3, [r7, #4]
      }
    1e4e:	4618      	mov	r0, r3
    1e50:	3708      	adds	r7, #8
    1e52:	46bd      	mov	sp, r7
    1e54:	bd80      	pop	{r7, pc}

00001e56 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)56, (char)48>()>:
      operator""ns()
    1e56:	b580      	push	{r7, lr}
    1e58:	b082      	sub	sp, #8
    1e5a:	af00      	add	r7, sp, #0
    1e5c:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }
    1e5e:	687b      	ldr	r3, [r7, #4]
    1e60:	4618      	mov	r0, r3
    1e62:	f000 fa0e 	bl	2282 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)56, (char)48>()>
    1e66:	bf00      	nop
    1e68:	6878      	ldr	r0, [r7, #4]
    1e6a:	3708      	adds	r7, #8
    1e6c:	46bd      	mov	sp, r7
    1e6e:	bd80      	pop	{r7, pc}

00001e70 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)48, (char)48>()>:
      operator""ns()
    1e70:	b580      	push	{r7, lr}
    1e72:	b082      	sub	sp, #8
    1e74:	af00      	add	r7, sp, #0
    1e76:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }
    1e78:	687b      	ldr	r3, [r7, #4]
    1e7a:	4618      	mov	r0, r3
    1e7c:	f000 fa15 	bl	22aa <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)48, (char)48>()>
    1e80:	bf00      	nop
    1e82:	6878      	ldr	r0, [r7, #4]
    1e84:	3708      	adds	r7, #8
    1e86:	46bd      	mov	sp, r7
    1e88:	bd80      	pop	{r7, pc}

00001e8a <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    1e8a:	b480      	push	{r7}
    1e8c:	b089      	sub	sp, #36	; 0x24
    1e8e:	af00      	add	r7, sp, #0
    1e90:	60f8      	str	r0, [r7, #12]
    1e92:	607a      	str	r2, [r7, #4]
    1e94:	603b      	str	r3, [r7, #0]
    1e96:	460b      	mov	r3, r1
    1e98:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    1e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1e9e:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    1ea0:	2320      	movs	r3, #32
    1ea2:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    1ea4:	683b      	ldr	r3, [r7, #0]
    1ea6:	f1c3 0320 	rsb	r3, r3, #32
    1eaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1eae:	fa22 f303 	lsr.w	r3, r2, r3
    1eb2:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    1eb4:	697a      	ldr	r2, [r7, #20]
    1eb6:	687b      	ldr	r3, [r7, #4]
    1eb8:	fa02 f303 	lsl.w	r3, r2, r3
    1ebc:	43db      	mvns	r3, r3
    1ebe:	68fa      	ldr	r2, [r7, #12]
    1ec0:	4013      	ands	r3, r2
    1ec2:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    1ec4:	7afa      	ldrb	r2, [r7, #11]
    1ec6:	697b      	ldr	r3, [r7, #20]
    1ec8:	401a      	ands	r2, r3
    1eca:	687b      	ldr	r3, [r7, #4]
    1ecc:	fa02 f303 	lsl.w	r3, r2, r3
    1ed0:	68fa      	ldr	r2, [r7, #12]
    1ed2:	4313      	orrs	r3, r2
    1ed4:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    1ed6:	68fb      	ldr	r3, [r7, #12]
}
    1ed8:	4618      	mov	r0, r3
    1eda:	3724      	adds	r7, #36	; 0x24
    1edc:	46bd      	mov	sp, r7
    1ede:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ee2:	4770      	bx	lr

00001ee4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    1ee4:	b580      	push	{r7, lr}
    1ee6:	b084      	sub	sp, #16
    1ee8:	af00      	add	r7, sp, #0
    1eea:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    1eec:	f04f 0201 	mov.w	r2, #1
    1ef0:	f04f 0300 	mov.w	r3, #0
    1ef4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    1ef8:	f107 0308 	add.w	r3, r7, #8
    1efc:	4619      	mov	r1, r3
    1efe:	6878      	ldr	r0, [r7, #4]
    1f00:	f000 f9e7 	bl	22d2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    1f04:	6878      	ldr	r0, [r7, #4]
    1f06:	3710      	adds	r7, #16
    1f08:	46bd      	mov	sp, r7
    1f0a:	bd80      	pop	{r7, pc}

00001f0c <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    1f0c:	b580      	push	{r7, lr}
    1f0e:	b082      	sub	sp, #8
    1f10:	af00      	add	r7, sp, #0
    1f12:	6078      	str	r0, [r7, #4]
    1f14:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    1f16:	687b      	ldr	r3, [r7, #4]
    1f18:	6839      	ldr	r1, [r7, #0]
    1f1a:	4618      	mov	r0, r3
    1f1c:	f000 f9f9 	bl	2312 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1f20:	bf00      	nop
      }
    1f22:	6878      	ldr	r0, [r7, #4]
    1f24:	3708      	adds	r7, #8
    1f26:	46bd      	mov	sp, r7
    1f28:	bd80      	pop	{r7, pc}

00001f2a <bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>:
	  _M_not_empty_function(_Tp* __fp)
    1f2a:	b480      	push	{r7}
    1f2c:	b083      	sub	sp, #12
    1f2e:	af00      	add	r7, sp, #0
    1f30:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	2b00      	cmp	r3, #0
    1f36:	bf14      	ite	ne
    1f38:	2301      	movne	r3, #1
    1f3a:	2300      	moveq	r3, #0
    1f3c:	b2db      	uxtb	r3, r3
    1f3e:	4618      	mov	r0, r3
    1f40:	370c      	adds	r7, #12
    1f42:	46bd      	mov	sp, r7
    1f44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f48:	4770      	bx	lr

00001f4a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    1f4a:	b480      	push	{r7}
    1f4c:	b083      	sub	sp, #12
    1f4e:	af00      	add	r7, sp, #0
    1f50:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    1f52:	687b      	ldr	r3, [r7, #4]
    1f54:	4618      	mov	r0, r3
    1f56:	370c      	adds	r7, #12
    1f58:	46bd      	mov	sp, r7
    1f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f5e:	4770      	bx	lr

00001f60 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    1f60:	b590      	push	{r4, r7, lr}
    1f62:	b085      	sub	sp, #20
    1f64:	af00      	add	r7, sp, #0
    1f66:	6078      	str	r0, [r7, #4]
    1f68:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    1f6a:	6838      	ldr	r0, [r7, #0]
    1f6c:	f7ff ffed 	bl	1f4a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    1f70:	4603      	mov	r3, r0
    1f72:	4622      	mov	r2, r4
    1f74:	4619      	mov	r1, r3
    1f76:	6878      	ldr	r0, [r7, #4]
    1f78:	f000 fa05 	bl	2386 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)>
    1f7c:	bf00      	nop
    1f7e:	3714      	adds	r7, #20
    1f80:	46bd      	mov	sp, r7
    1f82:	bd90      	pop	{r4, r7, pc}

00001f84 <std::_Function_handler<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    1f84:	b580      	push	{r7, lr}
    1f86:	b082      	sub	sp, #8
    1f88:	af00      	add	r7, sp, #0
    1f8a:	6078      	str	r0, [r7, #4]
    1f8c:	6039      	str	r1, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
    1f8e:	6838      	ldr	r0, [r7, #0]
    1f90:	f000 fa12 	bl	23b8 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>
    1f94:	4603      	mov	r3, r0
    1f96:	681b      	ldr	r3, [r3, #0]
    1f98:	687a      	ldr	r2, [r7, #4]
    1f9a:	4610      	mov	r0, r2
    1f9c:	4798      	blx	r3
	    std::forward<_ArgTypes>(__args)...);
    1f9e:	bf00      	nop
      }
    1fa0:	6878      	ldr	r0, [r7, #4]
    1fa2:	3708      	adds	r7, #8
    1fa4:	46bd      	mov	sp, r7
    1fa6:	bd80      	pop	{r7, pc}

00001fa8 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    1fa8:	b5b0      	push	{r4, r5, r7, lr}
    1faa:	b086      	sub	sp, #24
    1fac:	af00      	add	r7, sp, #0
    1fae:	60f8      	str	r0, [r7, #12]
    1fb0:	60b9      	str	r1, [r7, #8]
    1fb2:	4613      	mov	r3, r2
    1fb4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    1fb6:	79fb      	ldrb	r3, [r7, #7]
    1fb8:	2b03      	cmp	r3, #3
    1fba:	d016      	beq.n	1fea <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x42>
    1fbc:	2b03      	cmp	r3, #3
    1fbe:	dc19      	bgt.n	1ff4 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
    1fc0:	2b01      	cmp	r3, #1
    1fc2:	d002      	beq.n	1fca <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x22>
    1fc4:	2b02      	cmp	r3, #2
    1fc6:	d00a      	beq.n	1fde <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x36>
    1fc8:	e014      	b.n	1ff4 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    1fca:	68b8      	ldr	r0, [r7, #8]
    1fcc:	f000 f9f4 	bl	23b8 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>
    1fd0:	4604      	mov	r4, r0
    1fd2:	68f8      	ldr	r0, [r7, #12]
    1fd4:	f000 fa00 	bl	23d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()>
    1fd8:	4603      	mov	r3, r0
    1fda:	601c      	str	r4, [r3, #0]
	      break;
    1fdc:	e00a      	b.n	1ff4 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    1fde:	462a      	mov	r2, r5
    1fe0:	68b9      	ldr	r1, [r7, #8]
    1fe2:	68f8      	ldr	r0, [r7, #12]
    1fe4:	f000 fa04 	bl	23f0 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>
	      break;
    1fe8:	e004      	b.n	1ff4 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    1fea:	4621      	mov	r1, r4
    1fec:	68f8      	ldr	r0, [r7, #12]
    1fee:	f000 fa18 	bl	2422 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    1ff2:	bf00      	nop
	  return false;
    1ff4:	2300      	movs	r3, #0
	}
    1ff6:	4618      	mov	r0, r3
    1ff8:	3718      	adds	r7, #24
    1ffa:	46bd      	mov	sp, r7
    1ffc:	bdb0      	pop	{r4, r5, r7, pc}

00001ffe <std::chrono::duration_values<long long>::max()>:
	max() noexcept
    1ffe:	b580      	push	{r7, lr}
    2000:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    2002:	f7fe f9bf 	bl	384 <std::numeric_limits<long long>::max()>
    2006:	4602      	mov	r2, r0
    2008:	460b      	mov	r3, r1
    200a:	4610      	mov	r0, r2
    200c:	4619      	mov	r1, r3
    200e:	bd80      	pop	{r7, pc}

00002010 <bool std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_not_empty_function<{lambda()#1}>({lambda()#1} const&)>:
	  _M_not_empty_function(const _Tp&)
    2010:	b480      	push	{r7}
    2012:	b083      	sub	sp, #12
    2014:	af00      	add	r7, sp, #0
    2016:	6078      	str	r0, [r7, #4]
	  { return true; }
    2018:	2301      	movs	r3, #1
    201a:	4618      	mov	r0, r3
    201c:	370c      	adds	r7, #12
    201e:	46bd      	mov	sp, r7
    2020:	f85d 7b04 	ldr.w	r7, [sp], #4
    2024:	4770      	bx	lr

00002026 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>:
    move(_Tp&& __t) noexcept
    2026:	b480      	push	{r7}
    2028:	b083      	sub	sp, #12
    202a:	af00      	add	r7, sp, #0
    202c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    202e:	687b      	ldr	r3, [r7, #4]
    2030:	4618      	mov	r0, r3
    2032:	370c      	adds	r7, #12
    2034:	46bd      	mov	sp, r7
    2036:	f85d 7b04 	ldr.w	r7, [sp], #4
    203a:	4770      	bx	lr

0000203c <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    203c:	b590      	push	{r4, r7, lr}
    203e:	b085      	sub	sp, #20
    2040:	af00      	add	r7, sp, #0
    2042:	6078      	str	r0, [r7, #4]
    2044:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    2046:	6838      	ldr	r0, [r7, #0]
    2048:	f7ff ffed 	bl	2026 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>
    204c:	4603      	mov	r3, r0
    204e:	4622      	mov	r2, r4
    2050:	4619      	mov	r1, r3
    2052:	6878      	ldr	r0, [r7, #4]
    2054:	f000 fa4d 	bl	24f2 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&, std::integral_constant<bool, true>)>
    2058:	bf00      	nop
    205a:	3714      	adds	r7, #20
    205c:	46bd      	mov	sp, r7
    205e:	bd90      	pop	{r4, r7, pc}

00002060 <std::_Function_handler<bool (), sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    2060:	b580      	push	{r7, lr}
    2062:	b082      	sub	sp, #8
    2064:	af00      	add	r7, sp, #0
    2066:	6078      	str	r0, [r7, #4]
	return (*_Base::_M_get_pointer(__functor))(
    2068:	6878      	ldr	r0, [r7, #4]
    206a:	f000 fa57 	bl	251c <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)>
    206e:	4603      	mov	r3, r0
    2070:	4618      	mov	r0, r3
    2072:	f7fe fc33 	bl	8dc <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}::operator()() const>
    2076:	4603      	mov	r3, r0
      }
    2078:	4618      	mov	r0, r3
    207a:	3708      	adds	r7, #8
    207c:	46bd      	mov	sp, r7
    207e:	bd80      	pop	{r7, pc}

00002080 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    2080:	b5b0      	push	{r4, r5, r7, lr}
    2082:	b086      	sub	sp, #24
    2084:	af00      	add	r7, sp, #0
    2086:	60f8      	str	r0, [r7, #12]
    2088:	60b9      	str	r1, [r7, #8]
    208a:	4613      	mov	r3, r2
    208c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    208e:	79fb      	ldrb	r3, [r7, #7]
    2090:	2b03      	cmp	r3, #3
    2092:	d016      	beq.n	20c2 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x42>
    2094:	2b03      	cmp	r3, #3
    2096:	dc19      	bgt.n	20cc <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
    2098:	2b01      	cmp	r3, #1
    209a:	d002      	beq.n	20a2 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x22>
    209c:	2b02      	cmp	r3, #2
    209e:	d00a      	beq.n	20b6 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x36>
    20a0:	e014      	b.n	20cc <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    20a2:	68b8      	ldr	r0, [r7, #8]
    20a4:	f000 fa3a 	bl	251c <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)>
    20a8:	4604      	mov	r4, r0
    20aa:	68f8      	ldr	r0, [r7, #12]
    20ac:	f000 fa46 	bl	253c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*>()>
    20b0:	4603      	mov	r3, r0
    20b2:	601c      	str	r4, [r3, #0]
	      break;
    20b4:	e00a      	b.n	20cc <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    20b6:	462a      	mov	r2, r5
    20b8:	68b9      	ldr	r1, [r7, #8]
    20ba:	68f8      	ldr	r0, [r7, #12]
    20bc:	f000 fa4a 	bl	2554 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::integral_constant<bool, true>)>
	      break;
    20c0:	e004      	b.n	20cc <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    20c2:	4621      	mov	r1, r4
    20c4:	68f8      	ldr	r0, [r7, #12]
    20c6:	f000 fa5a 	bl	257e <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    20ca:	bf00      	nop
	  return false;
    20cc:	2300      	movs	r3, #0
	}
    20ce:	4618      	mov	r0, r3
    20d0:	3718      	adds	r7, #24
    20d2:	46bd      	mov	sp, r7
    20d4:	bdb0      	pop	{r4, r5, r7, pc}

000020d6 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    20d6:	b480      	push	{r7}
    20d8:	b089      	sub	sp, #36	; 0x24
    20da:	af00      	add	r7, sp, #0
    20dc:	60f8      	str	r0, [r7, #12]
    20de:	607a      	str	r2, [r7, #4]
    20e0:	603b      	str	r3, [r7, #0]
    20e2:	460b      	mov	r3, r1
    20e4:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    20e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    20ea:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    20ec:	2320      	movs	r3, #32
    20ee:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    20f0:	683b      	ldr	r3, [r7, #0]
    20f2:	f1c3 0320 	rsb	r3, r3, #32
    20f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    20fa:	fa22 f303 	lsr.w	r3, r2, r3
    20fe:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2100:	697a      	ldr	r2, [r7, #20]
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	fa02 f303 	lsl.w	r3, r2, r3
    2108:	43db      	mvns	r3, r3
    210a:	68fa      	ldr	r2, [r7, #12]
    210c:	4013      	ands	r3, r2
    210e:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2110:	7afa      	ldrb	r2, [r7, #11]
    2112:	697b      	ldr	r3, [r7, #20]
    2114:	401a      	ands	r2, r3
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	fa02 f303 	lsl.w	r3, r2, r3
    211c:	68fa      	ldr	r2, [r7, #12]
    211e:	4313      	orrs	r3, r2
    2120:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2122:	68fb      	ldr	r3, [r7, #12]
}
    2124:	4618      	mov	r0, r3
    2126:	3724      	adds	r7, #36	; 0x24
    2128:	46bd      	mov	sp, r7
    212a:	f85d 7b04 	ldr.w	r7, [sp], #4
    212e:	4770      	bx	lr

00002130 <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>:
	  _M_not_empty_function(_Tp* __fp)
    2130:	b480      	push	{r7}
    2132:	b083      	sub	sp, #12
    2134:	af00      	add	r7, sp, #0
    2136:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
    2138:	687b      	ldr	r3, [r7, #4]
    213a:	2b00      	cmp	r3, #0
    213c:	bf14      	ite	ne
    213e:	2301      	movne	r3, #1
    2140:	2300      	moveq	r3, #0
    2142:	b2db      	uxtb	r3, r3
    2144:	4618      	mov	r0, r3
    2146:	370c      	adds	r7, #12
    2148:	46bd      	mov	sp, r7
    214a:	f85d 7b04 	ldr.w	r7, [sp], #4
    214e:	4770      	bx	lr

00002150 <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>:
    move(_Tp&& __t) noexcept
    2150:	b480      	push	{r7}
    2152:	b083      	sub	sp, #12
    2154:	af00      	add	r7, sp, #0
    2156:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2158:	687b      	ldr	r3, [r7, #4]
    215a:	4618      	mov	r0, r3
    215c:	370c      	adds	r7, #12
    215e:	46bd      	mov	sp, r7
    2160:	f85d 7b04 	ldr.w	r7, [sp], #4
    2164:	4770      	bx	lr

00002166 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    2166:	b590      	push	{r4, r7, lr}
    2168:	b085      	sub	sp, #20
    216a:	af00      	add	r7, sp, #0
    216c:	6078      	str	r0, [r7, #4]
    216e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    2170:	6838      	ldr	r0, [r7, #0]
    2172:	f7ff ffed 	bl	2150 <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    2176:	4603      	mov	r3, r0
    2178:	4622      	mov	r2, r4
    217a:	4619      	mov	r1, r3
    217c:	6878      	ldr	r0, [r7, #4]
    217e:	f000 fa0a 	bl	2596 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>
    2182:	bf00      	nop
    2184:	3714      	adds	r7, #20
    2186:	46bd      	mov	sp, r7
    2188:	bd90      	pop	{r4, r7, pc}

0000218a <std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    218a:	b580      	push	{r7, lr}
    218c:	b082      	sub	sp, #8
    218e:	af00      	add	r7, sp, #0
    2190:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
    2192:	6878      	ldr	r0, [r7, #4]
    2194:	f000 fa18 	bl	25c8 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    2198:	4603      	mov	r3, r0
    219a:	681b      	ldr	r3, [r3, #0]
    219c:	4798      	blx	r3
      }
    219e:	bf00      	nop
    21a0:	3708      	adds	r7, #8
    21a2:	46bd      	mov	sp, r7
    21a4:	bd80      	pop	{r7, pc}

000021a6 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    21a6:	b5b0      	push	{r4, r5, r7, lr}
    21a8:	b086      	sub	sp, #24
    21aa:	af00      	add	r7, sp, #0
    21ac:	60f8      	str	r0, [r7, #12]
    21ae:	60b9      	str	r1, [r7, #8]
    21b0:	4613      	mov	r3, r2
    21b2:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    21b4:	79fb      	ldrb	r3, [r7, #7]
    21b6:	2b03      	cmp	r3, #3
    21b8:	d016      	beq.n	21e8 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x42>
    21ba:	2b03      	cmp	r3, #3
    21bc:	dc19      	bgt.n	21f2 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
    21be:	2b01      	cmp	r3, #1
    21c0:	d002      	beq.n	21c8 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x22>
    21c2:	2b02      	cmp	r3, #2
    21c4:	d00a      	beq.n	21dc <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x36>
    21c6:	e014      	b.n	21f2 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    21c8:	68b8      	ldr	r0, [r7, #8]
    21ca:	f000 f9fd 	bl	25c8 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    21ce:	4604      	mov	r4, r0
    21d0:	68f8      	ldr	r0, [r7, #12]
    21d2:	f000 fa09 	bl	25e8 <void (**&std::_Any_data::_M_access<void (**)()>())()>
    21d6:	4603      	mov	r3, r0
    21d8:	601c      	str	r4, [r3, #0]
	      break;
    21da:	e00a      	b.n	21f2 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    21dc:	462a      	mov	r2, r5
    21de:	68b9      	ldr	r1, [r7, #8]
    21e0:	68f8      	ldr	r0, [r7, #12]
    21e2:	f000 fa0d 	bl	2600 <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>
	      break;
    21e6:	e004      	b.n	21f2 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    21e8:	4621      	mov	r1, r4
    21ea:	68f8      	ldr	r0, [r7, #12]
    21ec:	f000 fa21 	bl	2632 <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    21f0:	bf00      	nop
	  return false;
    21f2:	2300      	movs	r3, #0
	}
    21f4:	4618      	mov	r0, r3
    21f6:	3718      	adds	r7, #24
    21f8:	46bd      	mov	sp, r7
    21fa:	bdb0      	pop	{r4, r5, r7, pc}

000021fc <std::function<void ()>::function(std::function<void ()> const&)>:
    function<_Res(_ArgTypes...)>::
    21fc:	b580      	push	{r7, lr}
    21fe:	b082      	sub	sp, #8
    2200:	af00      	add	r7, sp, #0
    2202:	6078      	str	r0, [r7, #4]
    2204:	6039      	str	r1, [r7, #0]
    : _Function_base()
    2206:	687b      	ldr	r3, [r7, #4]
    2208:	4618      	mov	r0, r3
    220a:	f7fe f8dd 	bl	3c8 <std::_Function_base::_Function_base()>
      if (static_cast<bool>(__x))
    220e:	6838      	ldr	r0, [r7, #0]
    2210:	f000 fa1b 	bl	264a <std::function<void ()>::operator bool() const>
    2214:	4603      	mov	r3, r0
    2216:	2b00      	cmp	r3, #0
    2218:	d00d      	beq.n	2236 <std::function<void ()>::function(std::function<void ()> const&)+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    221a:	683b      	ldr	r3, [r7, #0]
    221c:	689b      	ldr	r3, [r3, #8]
    221e:	6878      	ldr	r0, [r7, #4]
    2220:	6839      	ldr	r1, [r7, #0]
    2222:	2202      	movs	r2, #2
    2224:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    2226:	683b      	ldr	r3, [r7, #0]
    2228:	68da      	ldr	r2, [r3, #12]
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
    222e:	683b      	ldr	r3, [r7, #0]
    2230:	689a      	ldr	r2, [r3, #8]
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	609a      	str	r2, [r3, #8]
    }
    2236:	687b      	ldr	r3, [r7, #4]
    2238:	4618      	mov	r0, r3
    223a:	3708      	adds	r7, #8
    223c:	46bd      	mov	sp, r7
    223e:	bd80      	pop	{r7, pc}

00002240 <std::function<void ()>::swap(std::function<void ()>&)>:
      void swap(function& __x) noexcept
    2240:	b580      	push	{r7, lr}
    2242:	b082      	sub	sp, #8
    2244:	af00      	add	r7, sp, #0
    2246:	6078      	str	r0, [r7, #4]
    2248:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	683a      	ldr	r2, [r7, #0]
    224e:	4611      	mov	r1, r2
    2250:	4618      	mov	r0, r3
    2252:	f000 f8fd 	bl	2450 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>
	std::swap(_M_manager, __x._M_manager);
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	f103 0208 	add.w	r2, r3, #8
    225c:	683b      	ldr	r3, [r7, #0]
    225e:	3308      	adds	r3, #8
    2260:	4619      	mov	r1, r3
    2262:	4610      	mov	r0, r2
    2264:	f000 f926 	bl	24b4 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
	std::swap(_M_invoker, __x._M_invoker);
    2268:	687b      	ldr	r3, [r7, #4]
    226a:	f103 020c 	add.w	r2, r3, #12
    226e:	683b      	ldr	r3, [r7, #0]
    2270:	330c      	adds	r3, #12
    2272:	4619      	mov	r1, r3
    2274:	4610      	mov	r0, r2
    2276:	f000 fa03 	bl	2680 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>
      }
    227a:	bf00      	nop
    227c:	3708      	adds	r7, #8
    227e:	46bd      	mov	sp, r7
    2280:	bd80      	pop	{r7, pc}

00002282 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)56, (char)48>()>:
      constexpr _Dur __check_overflow()
    2282:	b580      	push	{r7, lr}
    2284:	b084      	sub	sp, #16
    2286:	af00      	add	r7, sp, #0
    2288:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    228a:	f04f 0250 	mov.w	r2, #80	; 0x50
    228e:	f04f 0300 	mov.w	r3, #0
    2292:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    2296:	f107 0308 	add.w	r3, r7, #8
    229a:	4619      	mov	r1, r3
    229c:	6878      	ldr	r0, [r7, #4]
    229e:	f7fe fa3f 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    22a2:	6878      	ldr	r0, [r7, #4]
    22a4:	3710      	adds	r7, #16
    22a6:	46bd      	mov	sp, r7
    22a8:	bd80      	pop	{r7, pc}

000022aa <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    22aa:	b580      	push	{r7, lr}
    22ac:	b084      	sub	sp, #16
    22ae:	af00      	add	r7, sp, #0
    22b0:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    22b2:	f04f 0264 	mov.w	r2, #100	; 0x64
    22b6:	f04f 0300 	mov.w	r3, #0
    22ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    22be:	f107 0308 	add.w	r3, r7, #8
    22c2:	4619      	mov	r1, r3
    22c4:	6878      	ldr	r0, [r7, #4]
    22c6:	f7fe fa2b 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    22ca:	6878      	ldr	r0, [r7, #4]
    22cc:	3710      	adds	r7, #16
    22ce:	46bd      	mov	sp, r7
    22d0:	bd80      	pop	{r7, pc}

000022d2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    22d2:	b480      	push	{r7}
    22d4:	b083      	sub	sp, #12
    22d6:	af00      	add	r7, sp, #0
    22d8:	6078      	str	r0, [r7, #4]
    22da:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    22dc:	683b      	ldr	r3, [r7, #0]
    22de:	e9d3 2300 	ldrd	r2, r3, [r3]
    22e2:	6879      	ldr	r1, [r7, #4]
    22e4:	e9c1 2300 	strd	r2, r3, [r1]
    22e8:	687b      	ldr	r3, [r7, #4]
    22ea:	4618      	mov	r0, r3
    22ec:	370c      	adds	r7, #12
    22ee:	46bd      	mov	sp, r7
    22f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    22f4:	4770      	bx	lr

000022f6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
    22f6:	b480      	push	{r7}
    22f8:	b083      	sub	sp, #12
    22fa:	af00      	add	r7, sp, #0
    22fc:	6078      	str	r0, [r7, #4]
	{ return __r; }
    22fe:	687b      	ldr	r3, [r7, #4]
    2300:	e9d3 2300 	ldrd	r2, r3, [r3]
    2304:	4610      	mov	r0, r2
    2306:	4619      	mov	r1, r3
    2308:	370c      	adds	r7, #12
    230a:	46bd      	mov	sp, r7
    230c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2310:	4770      	bx	lr

00002312 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    2312:	b5b0      	push	{r4, r5, r7, lr}
    2314:	b084      	sub	sp, #16
    2316:	af00      	add	r7, sp, #0
    2318:	6078      	str	r0, [r7, #4]
    231a:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    231c:	6838      	ldr	r0, [r7, #0]
    231e:	f7ff ffea 	bl	22f6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2322:	4602      	mov	r2, r0
    2324:	460b      	mov	r3, r1
    2326:	f04f 0400 	mov.w	r4, #0
    232a:	f04f 0500 	mov.w	r5, #0
    232e:	015d      	lsls	r5, r3, #5
    2330:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
    2334:	0154      	lsls	r4, r2, #5
    2336:	4622      	mov	r2, r4
    2338:	462b      	mov	r3, r5
    233a:	1a12      	subs	r2, r2, r0
    233c:	eb63 0301 	sbc.w	r3, r3, r1
    2340:	f04f 0400 	mov.w	r4, #0
    2344:	f04f 0500 	mov.w	r5, #0
    2348:	009d      	lsls	r5, r3, #2
    234a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    234e:	0094      	lsls	r4, r2, #2
    2350:	4622      	mov	r2, r4
    2352:	462b      	mov	r3, r5
    2354:	1812      	adds	r2, r2, r0
    2356:	eb41 0303 	adc.w	r3, r1, r3
    235a:	f04f 0000 	mov.w	r0, #0
    235e:	f04f 0100 	mov.w	r1, #0
    2362:	00d9      	lsls	r1, r3, #3
    2364:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
    2368:	00d0      	lsls	r0, r2, #3
    236a:	4602      	mov	r2, r0
    236c:	460b      	mov	r3, r1
    236e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    2372:	f107 0308 	add.w	r3, r7, #8
    2376:	4619      	mov	r1, r3
    2378:	6878      	ldr	r0, [r7, #4]
    237a:	f7fe f9d1 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
	  }
    237e:	6878      	ldr	r0, [r7, #4]
    2380:	3710      	adds	r7, #16
    2382:	46bd      	mov	sp, r7
    2384:	bdb0      	pop	{r4, r5, r7, pc}

00002386 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    2386:	b590      	push	{r4, r7, lr}
    2388:	b085      	sub	sp, #20
    238a:	af00      	add	r7, sp, #0
    238c:	60f8      	str	r0, [r7, #12]
    238e:	60b9      	str	r1, [r7, #8]
    2390:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    2392:	68b8      	ldr	r0, [r7, #8]
    2394:	f7ff fdd9 	bl	1f4a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    2398:	4603      	mov	r3, r0
    239a:	681c      	ldr	r4, [r3, #0]
    239c:	68f8      	ldr	r0, [r7, #12]
    239e:	f7fd fffd 	bl	39c <std::_Any_data::_M_access()>
    23a2:	4603      	mov	r3, r0
    23a4:	4619      	mov	r1, r3
    23a6:	2004      	movs	r0, #4
    23a8:	f7fd ffe0 	bl	36c <operator new(unsigned int, void*)>
    23ac:	4603      	mov	r3, r0
    23ae:	601c      	str	r4, [r3, #0]
    23b0:	bf00      	nop
    23b2:	3714      	adds	r7, #20
    23b4:	46bd      	mov	sp, r7
    23b6:	bd90      	pop	{r4, r7, pc}

000023b8 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    23b8:	b580      	push	{r7, lr}
    23ba:	b084      	sub	sp, #16
    23bc:	af00      	add	r7, sp, #0
    23be:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    23c0:	6878      	ldr	r0, [r7, #4]
    23c2:	f000 f97c 	bl	26be <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>
    23c6:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    23c8:	68f8      	ldr	r0, [r7, #12]
    23ca:	f000 f984 	bl	26d6 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()>
    23ce:	4603      	mov	r3, r0
	}
    23d0:	4618      	mov	r0, r3
    23d2:	3710      	adds	r7, #16
    23d4:	46bd      	mov	sp, r7
    23d6:	bd80      	pop	{r7, pc}

000023d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()>:
      _M_access()
    23d8:	b580      	push	{r7, lr}
    23da:	b082      	sub	sp, #8
    23dc:	af00      	add	r7, sp, #0
    23de:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    23e0:	6878      	ldr	r0, [r7, #4]
    23e2:	f7fd ffdb 	bl	39c <std::_Any_data::_M_access()>
    23e6:	4603      	mov	r3, r0
    23e8:	4618      	mov	r0, r3
    23ea:	3708      	adds	r7, #8
    23ec:	46bd      	mov	sp, r7
    23ee:	bd80      	pop	{r7, pc}

000023f0 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    23f0:	b590      	push	{r4, r7, lr}
    23f2:	b085      	sub	sp, #20
    23f4:	af00      	add	r7, sp, #0
    23f6:	60f8      	str	r0, [r7, #12]
    23f8:	60b9      	str	r1, [r7, #8]
    23fa:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    23fc:	68b8      	ldr	r0, [r7, #8]
    23fe:	f000 f95e 	bl	26be <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>
    2402:	4603      	mov	r3, r0
    2404:	681c      	ldr	r4, [r3, #0]
    2406:	68f8      	ldr	r0, [r7, #12]
    2408:	f7fd ffc8 	bl	39c <std::_Any_data::_M_access()>
    240c:	4603      	mov	r3, r0
    240e:	4619      	mov	r1, r3
    2410:	2004      	movs	r0, #4
    2412:	f7fd ffab 	bl	36c <operator new(unsigned int, void*)>
    2416:	4603      	mov	r3, r0
    2418:	601c      	str	r4, [r3, #0]
	}
    241a:	bf00      	nop
    241c:	3714      	adds	r7, #20
    241e:	46bd      	mov	sp, r7
    2420:	bd90      	pop	{r4, r7, pc}

00002422 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    2422:	b580      	push	{r7, lr}
    2424:	b082      	sub	sp, #8
    2426:	af00      	add	r7, sp, #0
    2428:	6078      	str	r0, [r7, #4]
    242a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    242c:	6878      	ldr	r0, [r7, #4]
    242e:	f000 f95d 	bl	26ec <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()>
	}
    2432:	bf00      	nop
    2434:	3708      	adds	r7, #8
    2436:	46bd      	mov	sp, r7
    2438:	bd80      	pop	{r7, pc}

0000243a <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>:
    move(_Tp&& __t) noexcept
    243a:	b480      	push	{r7}
    243c:	b083      	sub	sp, #12
    243e:	af00      	add	r7, sp, #0
    2440:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2442:	687b      	ldr	r3, [r7, #4]
    2444:	4618      	mov	r0, r3
    2446:	370c      	adds	r7, #12
    2448:	46bd      	mov	sp, r7
    244a:	f85d 7b04 	ldr.w	r7, [sp], #4
    244e:	4770      	bx	lr

00002450 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    2450:	b580      	push	{r7, lr}
    2452:	b084      	sub	sp, #16
    2454:	af00      	add	r7, sp, #0
    2456:	6078      	str	r0, [r7, #4]
    2458:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    245a:	6878      	ldr	r0, [r7, #4]
    245c:	f7ff ffed 	bl	243a <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    2460:	4602      	mov	r2, r0
    2462:	f107 0308 	add.w	r3, r7, #8
    2466:	e892 0003 	ldmia.w	r2, {r0, r1}
    246a:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    246e:	6838      	ldr	r0, [r7, #0]
    2470:	f7ff ffe3 	bl	243a <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    2474:	4602      	mov	r2, r0
    2476:	687b      	ldr	r3, [r7, #4]
    2478:	e892 0003 	ldmia.w	r2, {r0, r1}
    247c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2480:	f107 0308 	add.w	r3, r7, #8
    2484:	4618      	mov	r0, r3
    2486:	f7ff ffd8 	bl	243a <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    248a:	4602      	mov	r2, r0
    248c:	683b      	ldr	r3, [r7, #0]
    248e:	e892 0003 	ldmia.w	r2, {r0, r1}
    2492:	e883 0003 	stmia.w	r3, {r0, r1}
    }
    2496:	bf00      	nop
    2498:	3710      	adds	r7, #16
    249a:	46bd      	mov	sp, r7
    249c:	bd80      	pop	{r7, pc}

0000249e <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    move(_Tp&& __t) noexcept
    249e:	b480      	push	{r7}
    24a0:	b083      	sub	sp, #12
    24a2:	af00      	add	r7, sp, #0
    24a4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    24a6:	687b      	ldr	r3, [r7, #4]
    24a8:	4618      	mov	r0, r3
    24aa:	370c      	adds	r7, #12
    24ac:	46bd      	mov	sp, r7
    24ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    24b2:	4770      	bx	lr

000024b4 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    swap(_Tp& __a, _Tp& __b)
    24b4:	b580      	push	{r7, lr}
    24b6:	b084      	sub	sp, #16
    24b8:	af00      	add	r7, sp, #0
    24ba:	6078      	str	r0, [r7, #4]
    24bc:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    24be:	6878      	ldr	r0, [r7, #4]
    24c0:	f7ff ffed 	bl	249e <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    24c4:	4603      	mov	r3, r0
    24c6:	681b      	ldr	r3, [r3, #0]
    24c8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    24ca:	6838      	ldr	r0, [r7, #0]
    24cc:	f7ff ffe7 	bl	249e <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    24d0:	4603      	mov	r3, r0
    24d2:	681a      	ldr	r2, [r3, #0]
    24d4:	687b      	ldr	r3, [r7, #4]
    24d6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    24d8:	f107 030c 	add.w	r3, r7, #12
    24dc:	4618      	mov	r0, r3
    24de:	f7ff ffde 	bl	249e <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    24e2:	4603      	mov	r3, r0
    24e4:	681a      	ldr	r2, [r3, #0]
    24e6:	683b      	ldr	r3, [r7, #0]
    24e8:	601a      	str	r2, [r3, #0]
    }
    24ea:	bf00      	nop
    24ec:	3710      	adds	r7, #16
    24ee:	46bd      	mov	sp, r7
    24f0:	bd80      	pop	{r7, pc}

000024f2 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&, std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    24f2:	b580      	push	{r7, lr}
    24f4:	b084      	sub	sp, #16
    24f6:	af00      	add	r7, sp, #0
    24f8:	60f8      	str	r0, [r7, #12]
    24fa:	60b9      	str	r1, [r7, #8]
    24fc:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    24fe:	68b8      	ldr	r0, [r7, #8]
    2500:	f7ff fd91 	bl	2026 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>
    2504:	68f8      	ldr	r0, [r7, #12]
    2506:	f7fd ff49 	bl	39c <std::_Any_data::_M_access()>
    250a:	4603      	mov	r3, r0
    250c:	4619      	mov	r1, r3
    250e:	2001      	movs	r0, #1
    2510:	f7fd ff2c 	bl	36c <operator new(unsigned int, void*)>
    2514:	bf00      	nop
    2516:	3710      	adds	r7, #16
    2518:	46bd      	mov	sp, r7
    251a:	bd80      	pop	{r7, pc}

0000251c <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    251c:	b580      	push	{r7, lr}
    251e:	b084      	sub	sp, #16
    2520:	af00      	add	r7, sp, #0
    2522:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    2524:	6878      	ldr	r0, [r7, #4]
    2526:	f000 f8ed 	bl	2704 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const>
    252a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    252c:	68f8      	ldr	r0, [r7, #12]
    252e:	f000 f8f5 	bl	271c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const* std::__addressof<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const&)>
    2532:	4603      	mov	r3, r0
	}
    2534:	4618      	mov	r0, r3
    2536:	3710      	adds	r7, #16
    2538:	46bd      	mov	sp, r7
    253a:	bd80      	pop	{r7, pc}

0000253c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*>()>:
      _M_access()
    253c:	b580      	push	{r7, lr}
    253e:	b082      	sub	sp, #8
    2540:	af00      	add	r7, sp, #0
    2542:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2544:	6878      	ldr	r0, [r7, #4]
    2546:	f7fd ff29 	bl	39c <std::_Any_data::_M_access()>
    254a:	4603      	mov	r3, r0
    254c:	4618      	mov	r0, r3
    254e:	3708      	adds	r7, #8
    2550:	46bd      	mov	sp, r7
    2552:	bd80      	pop	{r7, pc}

00002554 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    2554:	b580      	push	{r7, lr}
    2556:	b084      	sub	sp, #16
    2558:	af00      	add	r7, sp, #0
    255a:	60f8      	str	r0, [r7, #12]
    255c:	60b9      	str	r1, [r7, #8]
    255e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    2560:	68b8      	ldr	r0, [r7, #8]
    2562:	f000 f8cf 	bl	2704 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const>
    2566:	68f8      	ldr	r0, [r7, #12]
    2568:	f7fd ff18 	bl	39c <std::_Any_data::_M_access()>
    256c:	4603      	mov	r3, r0
    256e:	4619      	mov	r1, r3
    2570:	2001      	movs	r0, #1
    2572:	f7fd fefb 	bl	36c <operator new(unsigned int, void*)>
	}
    2576:	bf00      	nop
    2578:	3710      	adds	r7, #16
    257a:	46bd      	mov	sp, r7
    257c:	bd80      	pop	{r7, pc}

0000257e <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    257e:	b580      	push	{r7, lr}
    2580:	b082      	sub	sp, #8
    2582:	af00      	add	r7, sp, #0
    2584:	6078      	str	r0, [r7, #4]
    2586:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    2588:	6878      	ldr	r0, [r7, #4]
    258a:	f000 f8d2 	bl	2732 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>()>
	}
    258e:	bf00      	nop
    2590:	3708      	adds	r7, #8
    2592:	46bd      	mov	sp, r7
    2594:	bd80      	pop	{r7, pc}

00002596 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    2596:	b590      	push	{r4, r7, lr}
    2598:	b085      	sub	sp, #20
    259a:	af00      	add	r7, sp, #0
    259c:	60f8      	str	r0, [r7, #12]
    259e:	60b9      	str	r1, [r7, #8]
    25a0:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    25a2:	68b8      	ldr	r0, [r7, #8]
    25a4:	f7ff fdd4 	bl	2150 <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    25a8:	4603      	mov	r3, r0
    25aa:	681c      	ldr	r4, [r3, #0]
    25ac:	68f8      	ldr	r0, [r7, #12]
    25ae:	f7fd fef5 	bl	39c <std::_Any_data::_M_access()>
    25b2:	4603      	mov	r3, r0
    25b4:	4619      	mov	r1, r3
    25b6:	2004      	movs	r0, #4
    25b8:	f7fd fed8 	bl	36c <operator new(unsigned int, void*)>
    25bc:	4603      	mov	r3, r0
    25be:	601c      	str	r4, [r3, #0]
    25c0:	bf00      	nop
    25c2:	3714      	adds	r7, #20
    25c4:	46bd      	mov	sp, r7
    25c6:	bd90      	pop	{r4, r7, pc}

000025c8 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    25c8:	b580      	push	{r7, lr}
    25ca:	b084      	sub	sp, #16
    25cc:	af00      	add	r7, sp, #0
    25ce:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    25d0:	6878      	ldr	r0, [r7, #4]
    25d2:	f000 f8ba 	bl	274a <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    25d6:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    25d8:	68f8      	ldr	r0, [r7, #12]
    25da:	f000 f8c2 	bl	2762 <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>
    25de:	4603      	mov	r3, r0
	}
    25e0:	4618      	mov	r0, r3
    25e2:	3710      	adds	r7, #16
    25e4:	46bd      	mov	sp, r7
    25e6:	bd80      	pop	{r7, pc}

000025e8 <void (**&std::_Any_data::_M_access<void (**)()>())()>:
      _M_access()
    25e8:	b580      	push	{r7, lr}
    25ea:	b082      	sub	sp, #8
    25ec:	af00      	add	r7, sp, #0
    25ee:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    25f0:	6878      	ldr	r0, [r7, #4]
    25f2:	f7fd fed3 	bl	39c <std::_Any_data::_M_access()>
    25f6:	4603      	mov	r3, r0
    25f8:	4618      	mov	r0, r3
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    2600:	b590      	push	{r4, r7, lr}
    2602:	b085      	sub	sp, #20
    2604:	af00      	add	r7, sp, #0
    2606:	60f8      	str	r0, [r7, #12]
    2608:	60b9      	str	r1, [r7, #8]
    260a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    260c:	68b8      	ldr	r0, [r7, #8]
    260e:	f000 f89c 	bl	274a <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    2612:	4603      	mov	r3, r0
    2614:	681c      	ldr	r4, [r3, #0]
    2616:	68f8      	ldr	r0, [r7, #12]
    2618:	f7fd fec0 	bl	39c <std::_Any_data::_M_access()>
    261c:	4603      	mov	r3, r0
    261e:	4619      	mov	r1, r3
    2620:	2004      	movs	r0, #4
    2622:	f7fd fea3 	bl	36c <operator new(unsigned int, void*)>
    2626:	4603      	mov	r3, r0
    2628:	601c      	str	r4, [r3, #0]
	}
    262a:	bf00      	nop
    262c:	3714      	adds	r7, #20
    262e:	46bd      	mov	sp, r7
    2630:	bd90      	pop	{r4, r7, pc}

00002632 <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    2632:	b580      	push	{r7, lr}
    2634:	b082      	sub	sp, #8
    2636:	af00      	add	r7, sp, #0
    2638:	6078      	str	r0, [r7, #4]
    263a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    263c:	6878      	ldr	r0, [r7, #4]
    263e:	f000 f89b 	bl	2778 <void (*&std::_Any_data::_M_access<void (*)()>())()>
	}
    2642:	bf00      	nop
    2644:	3708      	adds	r7, #8
    2646:	46bd      	mov	sp, r7
    2648:	bd80      	pop	{r7, pc}

0000264a <std::function<void ()>::operator bool() const>:
      explicit operator bool() const noexcept
    264a:	b580      	push	{r7, lr}
    264c:	b082      	sub	sp, #8
    264e:	af00      	add	r7, sp, #0
    2650:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
    2652:	687b      	ldr	r3, [r7, #4]
    2654:	4618      	mov	r0, r3
    2656:	f7fd fed8 	bl	40a <std::_Function_base::_M_empty() const>
    265a:	4603      	mov	r3, r0
    265c:	f083 0301 	eor.w	r3, r3, #1
    2660:	b2db      	uxtb	r3, r3
    2662:	4618      	mov	r0, r3
    2664:	3708      	adds	r7, #8
    2666:	46bd      	mov	sp, r7
    2668:	bd80      	pop	{r7, pc}

0000266a <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>:
    move(_Tp&& __t) noexcept
    266a:	b480      	push	{r7}
    266c:	b083      	sub	sp, #12
    266e:	af00      	add	r7, sp, #0
    2670:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2672:	687b      	ldr	r3, [r7, #4]
    2674:	4618      	mov	r0, r3
    2676:	370c      	adds	r7, #12
    2678:	46bd      	mov	sp, r7
    267a:	f85d 7b04 	ldr.w	r7, [sp], #4
    267e:	4770      	bx	lr

00002680 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>:
    swap(_Tp& __a, _Tp& __b)
    2680:	b580      	push	{r7, lr}
    2682:	b084      	sub	sp, #16
    2684:	af00      	add	r7, sp, #0
    2686:	6078      	str	r0, [r7, #4]
    2688:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    268a:	6878      	ldr	r0, [r7, #4]
    268c:	f7ff ffed 	bl	266a <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    2690:	4603      	mov	r3, r0
    2692:	681b      	ldr	r3, [r3, #0]
    2694:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    2696:	6838      	ldr	r0, [r7, #0]
    2698:	f7ff ffe7 	bl	266a <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    269c:	4603      	mov	r3, r0
    269e:	681a      	ldr	r2, [r3, #0]
    26a0:	687b      	ldr	r3, [r7, #4]
    26a2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    26a4:	f107 030c 	add.w	r3, r7, #12
    26a8:	4618      	mov	r0, r3
    26aa:	f7ff ffde 	bl	266a <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    26ae:	4603      	mov	r3, r0
    26b0:	681a      	ldr	r2, [r3, #0]
    26b2:	683b      	ldr	r3, [r7, #0]
    26b4:	601a      	str	r2, [r3, #0]
    }
    26b6:	bf00      	nop
    26b8:	3710      	adds	r7, #16
    26ba:	46bd      	mov	sp, r7
    26bc:	bd80      	pop	{r7, pc}

000026be <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>:
      _M_access() const
    26be:	b580      	push	{r7, lr}
    26c0:	b082      	sub	sp, #8
    26c2:	af00      	add	r7, sp, #0
    26c4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    26c6:	6878      	ldr	r0, [r7, #4]
    26c8:	f7fd fe73 	bl	3b2 <std::_Any_data::_M_access() const>
    26cc:	4603      	mov	r3, r0
    26ce:	4618      	mov	r0, r3
    26d0:	3708      	adds	r7, #8
    26d2:	46bd      	mov	sp, r7
    26d4:	bd80      	pop	{r7, pc}

000026d6 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    26d6:	b480      	push	{r7}
    26d8:	b083      	sub	sp, #12
    26da:	af00      	add	r7, sp, #0
    26dc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    26de:	687b      	ldr	r3, [r7, #4]
    26e0:	4618      	mov	r0, r3
    26e2:	370c      	adds	r7, #12
    26e4:	46bd      	mov	sp, r7
    26e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    26ea:	4770      	bx	lr

000026ec <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()>:
      _M_access()
    26ec:	b580      	push	{r7, lr}
    26ee:	b082      	sub	sp, #8
    26f0:	af00      	add	r7, sp, #0
    26f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    26f4:	6878      	ldr	r0, [r7, #4]
    26f6:	f7fd fe51 	bl	39c <std::_Any_data::_M_access()>
    26fa:	4603      	mov	r3, r0
    26fc:	4618      	mov	r0, r3
    26fe:	3708      	adds	r7, #8
    2700:	46bd      	mov	sp, r7
    2702:	bd80      	pop	{r7, pc}

00002704 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const>:
      _M_access() const
    2704:	b580      	push	{r7, lr}
    2706:	b082      	sub	sp, #8
    2708:	af00      	add	r7, sp, #0
    270a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    270c:	6878      	ldr	r0, [r7, #4]
    270e:	f7fd fe50 	bl	3b2 <std::_Any_data::_M_access() const>
    2712:	4603      	mov	r3, r0
    2714:	4618      	mov	r0, r3
    2716:	3708      	adds	r7, #8
    2718:	46bd      	mov	sp, r7
    271a:	bd80      	pop	{r7, pc}

0000271c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const* std::__addressof<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    271c:	b480      	push	{r7}
    271e:	b083      	sub	sp, #12
    2720:	af00      	add	r7, sp, #0
    2722:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	4618      	mov	r0, r3
    2728:	370c      	adds	r7, #12
    272a:	46bd      	mov	sp, r7
    272c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2730:	4770      	bx	lr

00002732 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>()>:
      _M_access()
    2732:	b580      	push	{r7, lr}
    2734:	b082      	sub	sp, #8
    2736:	af00      	add	r7, sp, #0
    2738:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    273a:	6878      	ldr	r0, [r7, #4]
    273c:	f7fd fe2e 	bl	39c <std::_Any_data::_M_access()>
    2740:	4603      	mov	r3, r0
    2742:	4618      	mov	r0, r3
    2744:	3708      	adds	r7, #8
    2746:	46bd      	mov	sp, r7
    2748:	bd80      	pop	{r7, pc}

0000274a <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>:
      _M_access() const
    274a:	b580      	push	{r7, lr}
    274c:	b082      	sub	sp, #8
    274e:	af00      	add	r7, sp, #0
    2750:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    2752:	6878      	ldr	r0, [r7, #4]
    2754:	f7fd fe2d 	bl	3b2 <std::_Any_data::_M_access() const>
    2758:	4603      	mov	r3, r0
    275a:	4618      	mov	r0, r3
    275c:	3708      	adds	r7, #8
    275e:	46bd      	mov	sp, r7
    2760:	bd80      	pop	{r7, pc}

00002762 <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    2762:	b480      	push	{r7}
    2764:	b083      	sub	sp, #12
    2766:	af00      	add	r7, sp, #0
    2768:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    276a:	687b      	ldr	r3, [r7, #4]
    276c:	4618      	mov	r0, r3
    276e:	370c      	adds	r7, #12
    2770:	46bd      	mov	sp, r7
    2772:	f85d 7b04 	ldr.w	r7, [sp], #4
    2776:	4770      	bx	lr

00002778 <void (*&std::_Any_data::_M_access<void (*)()>())()>:
      _M_access()
    2778:	b580      	push	{r7, lr}
    277a:	b082      	sub	sp, #8
    277c:	af00      	add	r7, sp, #0
    277e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2780:	6878      	ldr	r0, [r7, #4]
    2782:	f7fd fe0b 	bl	39c <std::_Any_data::_M_access()>
    2786:	4603      	mov	r3, r0
    2788:	4618      	mov	r0, r3
    278a:	3708      	adds	r7, #8
    278c:	46bd      	mov	sp, r7
    278e:	bd80      	pop	{r7, pc}

00002790 <__tcf_0>:
  inline static InterruptCallback handlers[kInterruptPorts][kPinCount];
    2790:	b590      	push	{r4, r7, lr}
    2792:	b083      	sub	sp, #12
    2794:	af00      	add	r7, sp, #0
    2796:	6078      	str	r0, [r7, #4]
    2798:	4c05      	ldr	r4, [pc, #20]	; (27b0 <__tcf_0+0x20>)
    279a:	4b06      	ldr	r3, [pc, #24]	; (27b4 <__tcf_0+0x24>)
    279c:	429c      	cmp	r4, r3
    279e:	d004      	beq.n	27aa <__tcf_0+0x1a>
    27a0:	3c10      	subs	r4, #16
    27a2:	4620      	mov	r0, r4
    27a4:	f7fe fb7f 	bl	ea6 <std::function<void ()>::~function()>
    27a8:	e7f7      	b.n	279a <__tcf_0+0xa>
    27aa:	370c      	adds	r7, #12
    27ac:	46bd      	mov	sp, r7
    27ae:	bd90      	pop	{r4, r7, pc}
    27b0:	1000053c 	.word	0x1000053c
    27b4:	1000013c 	.word	0x1000013c

000027b8 <__static_initialization_and_destruction_0(int, int)>:
    27b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27bc:	b082      	sub	sp, #8
    27be:	af00      	add	r7, sp, #0
    27c0:	6078      	str	r0, [r7, #4]
    27c2:	6039      	str	r1, [r7, #0]
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	2b01      	cmp	r3, #1
    27c8:	d16d      	bne.n	28a6 <__static_initialization_and_destruction_0(int, int)+0xee>
    27ca:	683b      	ldr	r3, [r7, #0]
    27cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    27d0:	4293      	cmp	r3, r2
    27d2:	d168      	bne.n	28a6 <__static_initialization_and_destruction_0(int, int)+0xee>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    27d4:	4b36      	ldr	r3, [pc, #216]	; (28b0 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    27d6:	681b      	ldr	r3, [r3, #0]
    27d8:	f003 0301 	and.w	r3, r3, #1
    27dc:	2b00      	cmp	r3, #0
    27de:	d105      	bne.n	27ec <__static_initialization_and_destruction_0(int, int)+0x34>
    27e0:	4b33      	ldr	r3, [pc, #204]	; (28b0 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    27e2:	2201      	movs	r2, #1
    27e4:	601a      	str	r2, [r3, #0]
    27e6:	4a33      	ldr	r2, [pc, #204]	; (28b4 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    27e8:	4b33      	ldr	r3, [pc, #204]	; (28b8 <__static_initialization_and_destruction_0(int, int)+0x100>)
    27ea:	601a      	str	r2, [r3, #0]
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    27ec:	4b33      	ldr	r3, [pc, #204]	; (28bc <__static_initialization_and_destruction_0(int, int)+0x104>)
    27ee:	681b      	ldr	r3, [r3, #0]
    27f0:	f003 0301 	and.w	r3, r3, #1
    27f4:	2b00      	cmp	r3, #0
    27f6:	d10b      	bne.n	2810 <__static_initialization_and_destruction_0(int, int)+0x58>
    27f8:	4b30      	ldr	r3, [pc, #192]	; (28bc <__static_initialization_and_destruction_0(int, int)+0x104>)
    27fa:	2201      	movs	r2, #1
    27fc:	601a      	str	r2, [r3, #0]
    27fe:	4930      	ldr	r1, [pc, #192]	; (28c0 <__static_initialization_and_destruction_0(int, int)+0x108>)
    2800:	4830      	ldr	r0, [pc, #192]	; (28c4 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    2802:	f7ff f957 	bl	1ab4 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    2806:	4a30      	ldr	r2, [pc, #192]	; (28c8 <__static_initialization_and_destruction_0(int, int)+0x110>)
    2808:	4930      	ldr	r1, [pc, #192]	; (28cc <__static_initialization_and_destruction_0(int, int)+0x114>)
    280a:	482e      	ldr	r0, [pc, #184]	; (28c4 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    280c:	f003 fe6c 	bl	64e8 <__aeabi_atexit>
  inline static volatile PinTable_t * function_map =
    2810:	4b2f      	ldr	r3, [pc, #188]	; (28d0 <__static_initialization_and_destruction_0(int, int)+0x118>)
    2812:	681b      	ldr	r3, [r3, #0]
    2814:	f003 0301 	and.w	r3, r3, #1
    2818:	2b00      	cmp	r3, #0
    281a:	d106      	bne.n	282a <__static_initialization_and_destruction_0(int, int)+0x72>
    281c:	4b2c      	ldr	r3, [pc, #176]	; (28d0 <__static_initialization_and_destruction_0(int, int)+0x118>)
    281e:	2201      	movs	r2, #1
    2820:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINSEL0);
    2822:	4b24      	ldr	r3, [pc, #144]	; (28b4 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    2824:	461a      	mov	r2, r3
  inline static volatile PinTable_t * function_map =
    2826:	4b2b      	ldr	r3, [pc, #172]	; (28d4 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    2828:	601a      	str	r2, [r3, #0]
  inline static volatile PinTable_t * resistor_map =
    282a:	4b2b      	ldr	r3, [pc, #172]	; (28d8 <__static_initialization_and_destruction_0(int, int)+0x120>)
    282c:	681b      	ldr	r3, [r3, #0]
    282e:	f003 0301 	and.w	r3, r3, #1
    2832:	2b00      	cmp	r3, #0
    2834:	d106      	bne.n	2844 <__static_initialization_and_destruction_0(int, int)+0x8c>
    2836:	4b28      	ldr	r3, [pc, #160]	; (28d8 <__static_initialization_and_destruction_0(int, int)+0x120>)
    2838:	2201      	movs	r2, #1
    283a:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE0);
    283c:	4b1d      	ldr	r3, [pc, #116]	; (28b4 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    283e:	3340      	adds	r3, #64	; 0x40
  inline static volatile PinTable_t * resistor_map =
    2840:	4a26      	ldr	r2, [pc, #152]	; (28dc <__static_initialization_and_destruction_0(int, int)+0x124>)
    2842:	6013      	str	r3, [r2, #0]
  inline static volatile PinTable_t * open_drain_map =
    2844:	4b26      	ldr	r3, [pc, #152]	; (28e0 <__static_initialization_and_destruction_0(int, int)+0x128>)
    2846:	681b      	ldr	r3, [r3, #0]
    2848:	f003 0301 	and.w	r3, r3, #1
    284c:	2b00      	cmp	r3, #0
    284e:	d106      	bne.n	285e <__static_initialization_and_destruction_0(int, int)+0xa6>
    2850:	4b23      	ldr	r3, [pc, #140]	; (28e0 <__static_initialization_and_destruction_0(int, int)+0x128>)
    2852:	2201      	movs	r2, #1
    2854:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE_OD0);
    2856:	4b17      	ldr	r3, [pc, #92]	; (28b4 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    2858:	3368      	adds	r3, #104	; 0x68
  inline static volatile PinTable_t * open_drain_map =
    285a:	4a22      	ldr	r2, [pc, #136]	; (28e4 <__static_initialization_and_destruction_0(int, int)+0x12c>)
    285c:	6013      	str	r3, [r2, #0]
    285e:	4b22      	ldr	r3, [pc, #136]	; (28e8 <__static_initialization_and_destruction_0(int, int)+0x130>)
    2860:	681b      	ldr	r3, [r3, #0]
    2862:	f003 0301 	and.w	r3, r3, #1
    2866:	2b00      	cmp	r3, #0
    2868:	d11a      	bne.n	28a0 <__static_initialization_and_destruction_0(int, int)+0xe8>
    286a:	4b1f      	ldr	r3, [pc, #124]	; (28e8 <__static_initialization_and_destruction_0(int, int)+0x130>)
    286c:	2201      	movs	r2, #1
    286e:	601a      	str	r2, [r3, #0]
    2870:	4b1e      	ldr	r3, [pc, #120]	; (28ec <__static_initialization_and_destruction_0(int, int)+0x134>)
    2872:	2401      	movs	r4, #1
    2874:	4698      	mov	r8, r3
    2876:	2c00      	cmp	r4, #0
    2878:	db0d      	blt.n	2896 <__static_initialization_and_destruction_0(int, int)+0xde>
    287a:	4646      	mov	r6, r8
    287c:	251f      	movs	r5, #31
    287e:	2d00      	cmp	r5, #0
    2880:	db05      	blt.n	288e <__static_initialization_and_destruction_0(int, int)+0xd6>
    2882:	4630      	mov	r0, r6
    2884:	f7ff fa29 	bl	1cda <std::function<void ()>::function()>
    2888:	3610      	adds	r6, #16
    288a:	3d01      	subs	r5, #1
    288c:	e7f7      	b.n	287e <__static_initialization_and_destruction_0(int, int)+0xc6>
    288e:	f508 7800 	add.w	r8, r8, #512	; 0x200
    2892:	3c01      	subs	r4, #1
    2894:	e7ef      	b.n	2876 <__static_initialization_and_destruction_0(int, int)+0xbe>
    2896:	4a0c      	ldr	r2, [pc, #48]	; (28c8 <__static_initialization_and_destruction_0(int, int)+0x110>)
    2898:	4915      	ldr	r1, [pc, #84]	; (28f0 <__static_initialization_and_destruction_0(int, int)+0x138>)
    289a:	2000      	movs	r0, #0
    289c:	f003 fe24 	bl	64e8 <__aeabi_atexit>
Bus bus;
    28a0:	4814      	ldr	r0, [pc, #80]	; (28f4 <__static_initialization_and_destruction_0(int, int)+0x13c>)
    28a2:	f7fe ffcb 	bl	183c <Bus::Bus()>
}
    28a6:	bf00      	nop
    28a8:	3708      	adds	r7, #8
    28aa:	46bd      	mov	sp, r7
    28ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28b0:	10000744 	.word	0x10000744
    28b4:	4002c000 	.word	0x4002c000
    28b8:	10000110 	.word	0x10000110
    28bc:	10000748 	.word	0x10000748
    28c0:	000007b5 	.word	0x000007b5
    28c4:	10000120 	.word	0x10000120
    28c8:	10000000 	.word	0x10000000
    28cc:	000007fd 	.word	0x000007fd
    28d0:	1000074c 	.word	0x1000074c
    28d4:	10000130 	.word	0x10000130
    28d8:	10000750 	.word	0x10000750
    28dc:	10000134 	.word	0x10000134
    28e0:	10000754 	.word	0x10000754
    28e4:	10000138 	.word	0x10000138
    28e8:	10000758 	.word	0x10000758
    28ec:	1000013c 	.word	0x1000013c
    28f0:	00002791 	.word	0x00002791
    28f4:	10000584 	.word	0x10000584

000028f8 <_GLOBAL__sub_I_bus>:
    28f8:	b580      	push	{r7, lr}
    28fa:	af00      	add	r7, sp, #0
    28fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2900:	2001      	movs	r0, #1
    2902:	f7ff ff59 	bl	27b8 <__static_initialization_and_destruction_0(int, int)>
    2906:	bd80      	pop	{r7, pc}

00002908 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
    2908:	b580      	push	{r7, lr}
    290a:	b086      	sub	sp, #24
    290c:	af02      	add	r7, sp, #8
    290e:	6078      	str	r0, [r7, #4]
    2910:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
    2912:	683a      	ldr	r2, [r7, #0]
    2914:	f107 030c 	add.w	r3, r7, #12
    2918:	9300      	str	r3, [sp, #0]
    291a:	2300      	movs	r3, #0
    291c:	2100      	movs	r1, #0
    291e:	6878      	ldr	r0, [r7, #4]
    2920:	f004 faea 	bl	6ef8 <_Unwind_VRS_Get>
      return val;
    2924:	68fb      	ldr	r3, [r7, #12]
    }
    2926:	4618      	mov	r0, r3
    2928:	3710      	adds	r7, #16
    292a:	46bd      	mov	sp, r7
    292c:	bd80      	pop	{r7, pc}
    292e:	Address 0x000000000000292e is out of bounds.


00002930 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
    2930:	b580      	push	{r7, lr}
    2932:	b084      	sub	sp, #16
    2934:	af00      	add	r7, sp, #0
    2936:	6078      	str	r0, [r7, #4]
    2938:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    293a:	683b      	ldr	r3, [r7, #0]
    293c:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    293e:	210f      	movs	r1, #15
    2940:	6878      	ldr	r0, [r7, #4]
    2942:	f7ff ffe1 	bl	2908 <_Unwind_GetGR>
    2946:	4603      	mov	r3, r0
    2948:	f023 0301 	bic.w	r3, r3, #1
    294c:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
    294e:	68fb      	ldr	r3, [r7, #12]
    2950:	6819      	ldr	r1, [r3, #0]
         address - config::kBacktraceAddressOffset);
    2952:	68bb      	ldr	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
    2954:	3b04      	subs	r3, #4
    2956:	461a      	mov	r2, r3
    2958:	4806      	ldr	r0, [pc, #24]	; (2974 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
    295a:	f001 fbe5 	bl	4128 <printf>
  (*depth)++;
    295e:	68fb      	ldr	r3, [r7, #12]
    2960:	681b      	ldr	r3, [r3, #0]
    2962:	1c5a      	adds	r2, r3, #1
    2964:	68fb      	ldr	r3, [r7, #12]
    2966:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    2968:	2300      	movs	r3, #0
}
    296a:	4618      	mov	r0, r3
    296c:	3710      	adds	r7, #16
    296e:	46bd      	mov	sp, r7
    2970:	bd80      	pop	{r7, pc}
    2972:	bf00      	nop
    2974:	00007ec8 	.word	0x00007ec8

00002978 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
    2978:	b580      	push	{r7, lr}
    297a:	b084      	sub	sp, #16
    297c:	af00      	add	r7, sp, #0
    297e:	6078      	str	r0, [r7, #4]
    2980:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    2982:	683b      	ldr	r3, [r7, #0]
    2984:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    2986:	210f      	movs	r1, #15
    2988:	6878      	ldr	r0, [r7, #4]
    298a:	f7ff ffbd 	bl	2908 <_Unwind_GetGR>
    298e:	4603      	mov	r3, r0
    2990:	f023 0301 	bic.w	r3, r3, #1
    2994:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
    2996:	68bb      	ldr	r3, [r7, #8]
    2998:	3b04      	subs	r3, #4
    299a:	4619      	mov	r1, r3
    299c:	4806      	ldr	r0, [pc, #24]	; (29b8 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
    299e:	f001 fbc3 	bl	4128 <printf>
  (*depth)++;
    29a2:	68fb      	ldr	r3, [r7, #12]
    29a4:	681b      	ldr	r3, [r3, #0]
    29a6:	1c5a      	adds	r2, r3, #1
    29a8:	68fb      	ldr	r3, [r7, #12]
    29aa:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    29ac:	2300      	movs	r3, #0
}
    29ae:	4618      	mov	r0, r3
    29b0:	3710      	adds	r7, #16
    29b2:	46bd      	mov	sp, r7
    29b4:	bd80      	pop	{r7, pc}
    29b6:	bf00      	nop
    29b8:	00007ed8 	.word	0x00007ed8

000029bc <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
    29bc:	b580      	push	{r7, lr}
    29be:	b084      	sub	sp, #16
    29c0:	af00      	add	r7, sp, #0
    29c2:	4603      	mov	r3, r0
    29c4:	6039      	str	r1, [r7, #0]
    29c6:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
    29c8:	2300      	movs	r3, #0
    29ca:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
    29cc:	f107 030c 	add.w	r3, r7, #12
    29d0:	4619      	mov	r1, r3
    29d2:	4817      	ldr	r0, [pc, #92]	; (2a30 <sjsu::debug::PrintBacktrace(bool, void*)+0x74>)
    29d4:	f004 fe6e 	bl	76b4 <_Unwind_Backtrace>
    if (final_address)
    29d8:	683b      	ldr	r3, [r7, #0]
    29da:	2b00      	cmp	r3, #0
    29dc:	d005      	beq.n	29ea <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
    29de:	68fb      	ldr	r3, [r7, #12]
    29e0:	683a      	ldr	r2, [r7, #0]
    29e2:	4619      	mov	r1, r3
    29e4:	4813      	ldr	r0, [pc, #76]	; (2a34 <sjsu::debug::PrintBacktrace(bool, void*)+0x78>)
    29e6:	f001 fb9f 	bl	4128 <printf>
    }

    if (show_make_command)
    29ea:	79fb      	ldrb	r3, [r7, #7]
    29ec:	2b00      	cmp	r3, #0
    29ee:	d01b      	beq.n	2a28 <sjsu::debug::PrintBacktrace(bool, void*)+0x6c>
    {
      printf("\nRun: the following command in your project directory");
    29f0:	4811      	ldr	r0, [pc, #68]	; (2a38 <sjsu::debug::PrintBacktrace(bool, void*)+0x7c>)
    29f2:	f001 fb99 	bl	4128 <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
    29f6:	4811      	ldr	r0, [pc, #68]	; (2a3c <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
    29f8:	f001 fb96 	bl	4128 <printf>
      printf("make stacktrace TRACES=\"");
    29fc:	4810      	ldr	r0, [pc, #64]	; (2a40 <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
    29fe:	f001 fb93 	bl	4128 <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
    2a02:	f107 030c 	add.w	r3, r7, #12
    2a06:	4619      	mov	r1, r3
    2a08:	480e      	ldr	r0, [pc, #56]	; (2a44 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
    2a0a:	f004 fe53 	bl	76b4 <_Unwind_Backtrace>
      if (final_address)
    2a0e:	683b      	ldr	r3, [r7, #0]
    2a10:	2b00      	cmp	r3, #0
    2a12:	d003      	beq.n	2a1c <sjsu::debug::PrintBacktrace(bool, void*)+0x60>
      {
        printf("0x%p ", final_address);
    2a14:	6839      	ldr	r1, [r7, #0]
    2a16:	480c      	ldr	r0, [pc, #48]	; (2a48 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
    2a18:	f001 fb86 	bl	4128 <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
    2a1c:	480b      	ldr	r0, [pc, #44]	; (2a4c <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
    2a1e:	f001 fb83 	bl	4128 <printf>
      printf(
    2a22:	480b      	ldr	r0, [pc, #44]	; (2a50 <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
    2a24:	f000 fa3a 	bl	2e9c <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
    2a28:	bf00      	nop
    2a2a:	3710      	adds	r7, #16
    2a2c:	46bd      	mov	sp, r7
    2a2e:	bd80      	pop	{r7, pc}
    2a30:	00002931 	.word	0x00002931
    2a34:	00007ee0 	.word	0x00007ee0
    2a38:	00007eec 	.word	0x00007eec
    2a3c:	00007f24 	.word	0x00007f24
    2a40:	00007f30 	.word	0x00007f30
    2a44:	00002979 	.word	0x00002979
    2a48:	00007f4c 	.word	0x00007f4c
    2a4c:	00007f54 	.word	0x00007f54
    2a50:	00007f5c 	.word	0x00007f5c

00002a54 <sjsu::Halt()>:
/// Halt system by putting it into infinite loop
inline void Halt()
{
    2a54:	b480      	push	{r7}
    2a56:	af00      	add	r7, sp, #0
  while (true)
  {
    continue;
    2a58:	bf00      	nop
  while (true)
    2a5a:	e7fd      	b.n	2a58 <sjsu::Halt()+0x4>

00002a5c <__static_initialization_and_destruction_0(int, int)>:
    }
  }
  return static_cast<uint8_t>(config::kTaskSchedulerSize + 1);
};
}  // namespace rtos
}  // namespace sjsu
    2a5c:	b580      	push	{r7, lr}
    2a5e:	b082      	sub	sp, #8
    2a60:	af00      	add	r7, sp, #0
    2a62:	6078      	str	r0, [r7, #4]
    2a64:	6039      	str	r1, [r7, #0]
    2a66:	687b      	ldr	r3, [r7, #4]
    2a68:	2b01      	cmp	r3, #1
    2a6a:	d116      	bne.n	2a9a <__static_initialization_and_destruction_0(int, int)+0x3e>
    2a6c:	683b      	ldr	r3, [r7, #0]
    2a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2a72:	4293      	cmp	r3, r2
    2a74:	d111      	bne.n	2a9a <__static_initialization_and_destruction_0(int, int)+0x3e>
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    2a76:	4b0b      	ldr	r3, [pc, #44]	; (2aa4 <__static_initialization_and_destruction_0(int, int)+0x48>)
    2a78:	681b      	ldr	r3, [r3, #0]
    2a7a:	f003 0301 	and.w	r3, r3, #1
    2a7e:	2b00      	cmp	r3, #0
    2a80:	d10b      	bne.n	2a9a <__static_initialization_and_destruction_0(int, int)+0x3e>
    2a82:	4b08      	ldr	r3, [pc, #32]	; (2aa4 <__static_initialization_and_destruction_0(int, int)+0x48>)
    2a84:	2201      	movs	r2, #1
    2a86:	601a      	str	r2, [r3, #0]
    2a88:	4907      	ldr	r1, [pc, #28]	; (2aa8 <__static_initialization_and_destruction_0(int, int)+0x4c>)
    2a8a:	4808      	ldr	r0, [pc, #32]	; (2aac <__static_initialization_and_destruction_0(int, int)+0x50>)
    2a8c:	f7ff f812 	bl	1ab4 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    2a90:	4a07      	ldr	r2, [pc, #28]	; (2ab0 <__static_initialization_and_destruction_0(int, int)+0x54>)
    2a92:	4908      	ldr	r1, [pc, #32]	; (2ab4 <__static_initialization_and_destruction_0(int, int)+0x58>)
    2a94:	4805      	ldr	r0, [pc, #20]	; (2aac <__static_initialization_and_destruction_0(int, int)+0x50>)
    2a96:	f003 fd27 	bl	64e8 <__aeabi_atexit>
    2a9a:	bf00      	nop
    2a9c:	3708      	adds	r7, #8
    2a9e:	46bd      	mov	sp, r7
    2aa0:	bd80      	pop	{r7, pc}
    2aa2:	bf00      	nop
    2aa4:	10000748 	.word	0x10000748
    2aa8:	000007b5 	.word	0x000007b5
    2aac:	10000120 	.word	0x10000120
    2ab0:	10000000 	.word	0x10000000
    2ab4:	000007fd 	.word	0x000007fd

00002ab8 <_GLOBAL__sub_I__ZN4sjsu4rtos13TaskScheduler7RunTaskEPv>:
    2ab8:	b580      	push	{r7, lr}
    2aba:	af00      	add	r7, sp, #0
    2abc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2ac0:	2001      	movs	r0, #1
    2ac2:	f7ff ffcb 	bl	2a5c <__static_initialization_and_destruction_0(int, int)>
    2ac6:	bd80      	pop	{r7, pc}

00002ac8 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    2ac8:	b480      	push	{r7}
    2aca:	b087      	sub	sp, #28
    2acc:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    2ace:	2300      	movs	r3, #0
    2ad0:	617b      	str	r3, [r7, #20]
    2ad2:	697a      	ldr	r2, [r7, #20]
    2ad4:	4613      	mov	r3, r2
    2ad6:	005b      	lsls	r3, r3, #1
    2ad8:	4413      	add	r3, r2
    2ada:	009b      	lsls	r3, r3, #2
    2adc:	4a1f      	ldr	r2, [pc, #124]	; (2b5c <sjsu::InitializeDataSection()+0x94>)
    2ade:	4413      	add	r3, r2
    2ae0:	4a1f      	ldr	r2, [pc, #124]	; (2b60 <sjsu::InitializeDataSection()+0x98>)
    2ae2:	4293      	cmp	r3, r2
    2ae4:	d233      	bcs.n	2b4e <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    2ae6:	491d      	ldr	r1, [pc, #116]	; (2b5c <sjsu::InitializeDataSection()+0x94>)
    2ae8:	697a      	ldr	r2, [r7, #20]
    2aea:	4613      	mov	r3, r2
    2aec:	005b      	lsls	r3, r3, #1
    2aee:	4413      	add	r3, r2
    2af0:	009b      	lsls	r3, r3, #2
    2af2:	440b      	add	r3, r1
    2af4:	681b      	ldr	r3, [r3, #0]
    2af6:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    2af8:	4918      	ldr	r1, [pc, #96]	; (2b5c <sjsu::InitializeDataSection()+0x94>)
    2afa:	697a      	ldr	r2, [r7, #20]
    2afc:	4613      	mov	r3, r2
    2afe:	005b      	lsls	r3, r3, #1
    2b00:	4413      	add	r3, r2
    2b02:	009b      	lsls	r3, r3, #2
    2b04:	440b      	add	r3, r1
    2b06:	685b      	ldr	r3, [r3, #4]
    2b08:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    2b0a:	4914      	ldr	r1, [pc, #80]	; (2b5c <sjsu::InitializeDataSection()+0x94>)
    2b0c:	697a      	ldr	r2, [r7, #20]
    2b0e:	4613      	mov	r3, r2
    2b10:	005b      	lsls	r3, r3, #1
    2b12:	4413      	add	r3, r2
    2b14:	009b      	lsls	r3, r3, #2
    2b16:	440b      	add	r3, r1
    2b18:	3308      	adds	r3, #8
    2b1a:	681b      	ldr	r3, [r3, #0]
    2b1c:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    2b1e:	2300      	movs	r3, #0
    2b20:	613b      	str	r3, [r7, #16]
    2b22:	693a      	ldr	r2, [r7, #16]
    2b24:	687b      	ldr	r3, [r7, #4]
    2b26:	429a      	cmp	r2, r3
    2b28:	d20d      	bcs.n	2b46 <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    2b2a:	693b      	ldr	r3, [r7, #16]
    2b2c:	009b      	lsls	r3, r3, #2
    2b2e:	68fa      	ldr	r2, [r7, #12]
    2b30:	441a      	add	r2, r3
    2b32:	693b      	ldr	r3, [r7, #16]
    2b34:	009b      	lsls	r3, r3, #2
    2b36:	68b9      	ldr	r1, [r7, #8]
    2b38:	440b      	add	r3, r1
    2b3a:	6812      	ldr	r2, [r2, #0]
    2b3c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    2b3e:	693b      	ldr	r3, [r7, #16]
    2b40:	3301      	adds	r3, #1
    2b42:	613b      	str	r3, [r7, #16]
    2b44:	e7ed      	b.n	2b22 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    2b46:	697b      	ldr	r3, [r7, #20]
    2b48:	3301      	adds	r3, #1
    2b4a:	617b      	str	r3, [r7, #20]
    2b4c:	e7c1      	b.n	2ad2 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    2b4e:	bf00      	nop
    2b50:	371c      	adds	r7, #28
    2b52:	46bd      	mov	sp, r7
    2b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b58:	4770      	bx	lr
    2b5a:	bf00      	nop
    2b5c:	000000e4 	.word	0x000000e4
    2b60:	000000fc 	.word	0x000000fc

00002b64 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    2b64:	b480      	push	{r7}
    2b66:	b085      	sub	sp, #20
    2b68:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    2b6a:	2300      	movs	r3, #0
    2b6c:	60fb      	str	r3, [r7, #12]
    2b6e:	68fb      	ldr	r3, [r7, #12]
    2b70:	00db      	lsls	r3, r3, #3
    2b72:	4a15      	ldr	r2, [pc, #84]	; (2bc8 <sjsu::InitializeBssSection()+0x64>)
    2b74:	4413      	add	r3, r2
    2b76:	4a15      	ldr	r2, [pc, #84]	; (2bcc <sjsu::InitializeBssSection()+0x68>)
    2b78:	4293      	cmp	r3, r2
    2b7a:	d21e      	bcs.n	2bba <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    2b7c:	4a12      	ldr	r2, [pc, #72]	; (2bc8 <sjsu::InitializeBssSection()+0x64>)
    2b7e:	68fb      	ldr	r3, [r7, #12]
    2b80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2b84:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    2b86:	4a10      	ldr	r2, [pc, #64]	; (2bc8 <sjsu::InitializeBssSection()+0x64>)
    2b88:	68fb      	ldr	r3, [r7, #12]
    2b8a:	00db      	lsls	r3, r3, #3
    2b8c:	4413      	add	r3, r2
    2b8e:	685b      	ldr	r3, [r3, #4]
    2b90:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    2b92:	2300      	movs	r3, #0
    2b94:	60bb      	str	r3, [r7, #8]
    2b96:	68ba      	ldr	r2, [r7, #8]
    2b98:	683b      	ldr	r3, [r7, #0]
    2b9a:	429a      	cmp	r2, r3
    2b9c:	d209      	bcs.n	2bb2 <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    2b9e:	68bb      	ldr	r3, [r7, #8]
    2ba0:	009b      	lsls	r3, r3, #2
    2ba2:	687a      	ldr	r2, [r7, #4]
    2ba4:	4413      	add	r3, r2
    2ba6:	2200      	movs	r2, #0
    2ba8:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    2baa:	68bb      	ldr	r3, [r7, #8]
    2bac:	3301      	adds	r3, #1
    2bae:	60bb      	str	r3, [r7, #8]
    2bb0:	e7f1      	b.n	2b96 <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    2bb2:	68fb      	ldr	r3, [r7, #12]
    2bb4:	3301      	adds	r3, #1
    2bb6:	60fb      	str	r3, [r7, #12]
    2bb8:	e7d9      	b.n	2b6e <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    2bba:	bf00      	nop
    2bbc:	3714      	adds	r7, #20
    2bbe:	46bd      	mov	sp, r7
    2bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bc4:	4770      	bx	lr
    2bc6:	bf00      	nop
    2bc8:	000000fc 	.word	0x000000fc
    2bcc:	0000010c 	.word	0x0000010c

00002bd0 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    2bd0:	b580      	push	{r7, lr}
    2bd2:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    2bd4:	f7ff ff78 	bl	2ac8 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    2bd8:	f7ff ffc4 	bl	2b64 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    2bdc:	f004 ff34 	bl	7a48 <__libc_init_array>
}
    2be0:	bf00      	nop
    2be2:	bd80      	pop	{r7, pc}

00002be4 <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    2be4:	b580      	push	{r7, lr}
    2be6:	b08c      	sub	sp, #48	; 0x30
    2be8:	af02      	add	r7, sp, #8
    2bea:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    2bec:	687b      	ldr	r3, [r7, #4]
    2bee:	681b      	ldr	r3, [r3, #0]
    2bf0:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	685b      	ldr	r3, [r3, #4]
    2bf6:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    2bf8:	687b      	ldr	r3, [r7, #4]
    2bfa:	689b      	ldr	r3, [r3, #8]
    2bfc:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    2bfe:	687b      	ldr	r3, [r7, #4]
    2c00:	68db      	ldr	r3, [r3, #12]
    2c02:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    2c04:	687b      	ldr	r3, [r7, #4]
    2c06:	691b      	ldr	r3, [r3, #16]
    2c08:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    2c0a:	687b      	ldr	r3, [r7, #4]
    2c0c:	695b      	ldr	r3, [r3, #20]
    2c0e:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    2c10:	687b      	ldr	r3, [r7, #4]
    2c12:	699b      	ldr	r3, [r3, #24]
    2c14:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	69db      	ldr	r3, [r3, #28]
    2c1a:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    2c1c:	480f      	ldr	r0, [pc, #60]	; (2c5c <GetRegistersFromStack+0x78>)
    2c1e:	f001 fa83 	bl	4128 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    2c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2c24:	6a3a      	ldr	r2, [r7, #32]
    2c26:	69f8      	ldr	r0, [r7, #28]
    2c28:	69bb      	ldr	r3, [r7, #24]
    2c2a:	9300      	str	r3, [sp, #0]
    2c2c:	4603      	mov	r3, r0
    2c2e:	480c      	ldr	r0, [pc, #48]	; (2c60 <GetRegistersFromStack+0x7c>)
    2c30:	f001 fa7a 	bl	4128 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    2c34:	6979      	ldr	r1, [r7, #20]
    2c36:	693a      	ldr	r2, [r7, #16]
    2c38:	68f8      	ldr	r0, [r7, #12]
    2c3a:	68bb      	ldr	r3, [r7, #8]
    2c3c:	9300      	str	r3, [sp, #0]
    2c3e:	4603      	mov	r3, r0
    2c40:	4808      	ldr	r0, [pc, #32]	; (2c64 <GetRegistersFromStack+0x80>)
    2c42:	f001 fa71 	bl	4128 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    2c46:	68fb      	ldr	r3, [r7, #12]
    2c48:	4619      	mov	r1, r3
    2c4a:	2001      	movs	r0, #1
    2c4c:	f7ff feb6 	bl	29bc <sjsu::debug::PrintBacktrace(bool, void*)>
    // When the following line is hit, the variables contain the register values
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
    2c50:	f7ff ff00 	bl	2a54 <sjsu::Halt()>
  }
    2c54:	bf00      	nop
    2c56:	3728      	adds	r7, #40	; 0x28
    2c58:	46bd      	mov	sp, r7
    2c5a:	bd80      	pop	{r7, pc}
    2c5c:	0000866c 	.word	0x0000866c
    2c60:	00008698 	.word	0x00008698
    2c64:	000086cc 	.word	0x000086cc

00002c68 <ArmHardFaultHandler>:

  void ArmHardFaultHandler(void)
  {
    2c68:	b480      	push	{r7}
    2c6a:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    2c6c:	f01e 0f04 	tst.w	lr, #4
    2c70:	bf0c      	ite	eq
    2c72:	f3ef 8008 	mrseq	r0, MSP
    2c76:	f3ef 8009 	mrsne	r0, PSP
    2c7a:	6981      	ldr	r1, [r0, #24]
    2c7c:	4a00      	ldr	r2, [pc, #0]	; (2c80 <handler2_address_const>)
    2c7e:	4710      	bx	r2

00002c80 <handler2_address_const>:
    2c80:	00002be5 	.word	0x00002be5
    }
  }
    2c84:	bf00      	nop
    2c86:	46bd      	mov	sp, r7
    2c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c8c:	4770      	bx	lr
    2c8e:	Address 0x0000000000002c8e is out of bounds.


00002c90 <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    2c90:	b580      	push	{r7, lr}
    2c92:	b084      	sub	sp, #16
    2c94:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    2c96:	4b1a      	ldr	r3, [pc, #104]	; (2d00 <ArmResetHandler+0x70>)
    2c98:	60fb      	str	r3, [r7, #12]
    2c9a:	68fb      	ldr	r3, [r7, #12]
    2c9c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    2c9e:	683b      	ldr	r3, [r7, #0]
    2ca0:	f383 8809 	msr	PSP, r3
}
    2ca4:	bf00      	nop
    2ca6:	68fb      	ldr	r3, [r7, #12]
    2ca8:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    2caa:	687b      	ldr	r3, [r7, #4]
    2cac:	f383 8808 	msr	MSP, r3
}
    2cb0:	bf00      	nop
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    2cb2:	f7ff ff8d 	bl	2bd0 <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    2cb6:	4b13      	ldr	r3, [pc, #76]	; (2d04 <ArmResetHandler+0x74>)
    2cb8:	681b      	ldr	r3, [r3, #0]
    2cba:	f003 0301 	and.w	r3, r3, #1
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	bf14      	ite	ne
    2cc2:	2301      	movne	r3, #1
    2cc4:	2300      	moveq	r3, #0
    2cc6:	b2db      	uxtb	r3, r3
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d001      	beq.n	2cd0 <ArmResetHandler+0x40>
      {
          trace_initialize();  // Enable debug tracing
    2ccc:	f001 fa4e 	bl	416c <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    2cd0:	f002 fdde 	bl	5890 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    2cd4:	f7fe fe52 	bl	197c <main>
    2cd8:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    2cda:	68bb      	ldr	r3, [r7, #8]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	db04      	blt.n	2cea <ArmResetHandler+0x5a>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    2ce0:	68b9      	ldr	r1, [r7, #8]
    2ce2:	4809      	ldr	r0, [pc, #36]	; (2d08 <ArmResetHandler+0x78>)
    2ce4:	f001 fa20 	bl	4128 <printf>
    2ce8:	e003      	b.n	2cf2 <ArmResetHandler+0x62>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    2cea:	68b9      	ldr	r1, [r7, #8]
    2cec:	4807      	ldr	r0, [pc, #28]	; (2d0c <ArmResetHandler+0x7c>)
    2cee:	f001 fa1b 	bl	4128 <printf>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    sjsu::Halt();
    2cf2:	f7ff feaf 	bl	2a54 <sjsu::Halt()>
  }
    2cf6:	bf00      	nop
    2cf8:	3710      	adds	r7, #16
    2cfa:	46bd      	mov	sp, r7
    2cfc:	bd80      	pop	{r7, pc}
    2cfe:	bf00      	nop
    2d00:	10010000 	.word	0x10010000
    2d04:	e000edf0 	.word	0xe000edf0
    2d08:	00008704 	.word	0x00008704
    2d0c:	00008738 	.word	0x00008738

00002d10 <__static_initialization_and_destruction_0(int, int)>:

}  // extern "C"
    2d10:	b580      	push	{r7, lr}
    2d12:	b082      	sub	sp, #8
    2d14:	af00      	add	r7, sp, #0
    2d16:	6078      	str	r0, [r7, #4]
    2d18:	6039      	str	r1, [r7, #0]
    2d1a:	687b      	ldr	r3, [r7, #4]
    2d1c:	2b01      	cmp	r3, #1
    2d1e:	d116      	bne.n	2d4e <__static_initialization_and_destruction_0(int, int)+0x3e>
    2d20:	683b      	ldr	r3, [r7, #0]
    2d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2d26:	4293      	cmp	r3, r2
    2d28:	d111      	bne.n	2d4e <__static_initialization_and_destruction_0(int, int)+0x3e>
    2d2a:	4b0b      	ldr	r3, [pc, #44]	; (2d58 <__static_initialization_and_destruction_0(int, int)+0x48>)
    2d2c:	681b      	ldr	r3, [r3, #0]
    2d2e:	f003 0301 	and.w	r3, r3, #1
    2d32:	2b00      	cmp	r3, #0
    2d34:	d10b      	bne.n	2d4e <__static_initialization_and_destruction_0(int, int)+0x3e>
    2d36:	4b08      	ldr	r3, [pc, #32]	; (2d58 <__static_initialization_and_destruction_0(int, int)+0x48>)
    2d38:	2201      	movs	r2, #1
    2d3a:	601a      	str	r2, [r3, #0]
    2d3c:	4907      	ldr	r1, [pc, #28]	; (2d5c <__static_initialization_and_destruction_0(int, int)+0x4c>)
    2d3e:	4808      	ldr	r0, [pc, #32]	; (2d60 <__static_initialization_and_destruction_0(int, int)+0x50>)
    2d40:	f7fe feb8 	bl	1ab4 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    2d44:	4a07      	ldr	r2, [pc, #28]	; (2d64 <__static_initialization_and_destruction_0(int, int)+0x54>)
    2d46:	4908      	ldr	r1, [pc, #32]	; (2d68 <__static_initialization_and_destruction_0(int, int)+0x58>)
    2d48:	4805      	ldr	r0, [pc, #20]	; (2d60 <__static_initialization_and_destruction_0(int, int)+0x50>)
    2d4a:	f003 fbcd 	bl	64e8 <__aeabi_atexit>
    2d4e:	bf00      	nop
    2d50:	3708      	adds	r7, #8
    2d52:	46bd      	mov	sp, r7
    2d54:	bd80      	pop	{r7, pc}
    2d56:	bf00      	nop
    2d58:	10000748 	.word	0x10000748
    2d5c:	000007b5 	.word	0x000007b5
    2d60:	10000120 	.word	0x10000120
    2d64:	10000000 	.word	0x10000000
    2d68:	000007fd 	.word	0x000007fd

00002d6c <_GLOBAL__sub_I_GetRegistersFromStack>:
    2d6c:	b580      	push	{r7, lr}
    2d6e:	af00      	add	r7, sp, #0
    2d70:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2d74:	2001      	movs	r0, #1
    2d76:	f7ff ffcb 	bl	2d10 <__static_initialization_and_destruction_0(int, int)>
    2d7a:	bd80      	pop	{r7, pc}

00002d7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2d7c:	b580      	push	{r7, lr}
    2d7e:	b084      	sub	sp, #16
    2d80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2d82:	4b28      	ldr	r3, [pc, #160]	; (2e24 <vTaskSwitchContext+0xa8>)
    2d84:	681b      	ldr	r3, [r3, #0]
    2d86:	2b00      	cmp	r3, #0
    2d88:	d003      	beq.n	2d92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    2d8a:	4b27      	ldr	r3, [pc, #156]	; (2e28 <vTaskSwitchContext+0xac>)
    2d8c:	2201      	movs	r2, #1
    2d8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    2d90:	e043      	b.n	2e1a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    2d92:	4b25      	ldr	r3, [pc, #148]	; (2e28 <vTaskSwitchContext+0xac>)
    2d94:	2200      	movs	r2, #0
    2d96:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    2d98:	f002 fd70 	bl	587c <ThreadRuntimeCounter>
    2d9c:	4603      	mov	r3, r0
    2d9e:	4a23      	ldr	r2, [pc, #140]	; (2e2c <vTaskSwitchContext+0xb0>)
    2da0:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    2da2:	4b22      	ldr	r3, [pc, #136]	; (2e2c <vTaskSwitchContext+0xb0>)
    2da4:	681a      	ldr	r2, [r3, #0]
    2da6:	4b22      	ldr	r3, [pc, #136]	; (2e30 <vTaskSwitchContext+0xb4>)
    2da8:	681b      	ldr	r3, [r3, #0]
    2daa:	429a      	cmp	r2, r3
    2dac:	d909      	bls.n	2dc2 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    2dae:	4b21      	ldr	r3, [pc, #132]	; (2e34 <vTaskSwitchContext+0xb8>)
    2db0:	681b      	ldr	r3, [r3, #0]
    2db2:	6d59      	ldr	r1, [r3, #84]	; 0x54
    2db4:	4a1d      	ldr	r2, [pc, #116]	; (2e2c <vTaskSwitchContext+0xb0>)
    2db6:	6810      	ldr	r0, [r2, #0]
    2db8:	4a1d      	ldr	r2, [pc, #116]	; (2e30 <vTaskSwitchContext+0xb4>)
    2dba:	6812      	ldr	r2, [r2, #0]
    2dbc:	1a82      	subs	r2, r0, r2
    2dbe:	440a      	add	r2, r1
    2dc0:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    2dc2:	4b1a      	ldr	r3, [pc, #104]	; (2e2c <vTaskSwitchContext+0xb0>)
    2dc4:	681b      	ldr	r3, [r3, #0]
    2dc6:	4a1a      	ldr	r2, [pc, #104]	; (2e30 <vTaskSwitchContext+0xb4>)
    2dc8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2dca:	4b1b      	ldr	r3, [pc, #108]	; (2e38 <vTaskSwitchContext+0xbc>)
    2dcc:	681b      	ldr	r3, [r3, #0]
    2dce:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    2dd0:	687b      	ldr	r3, [r7, #4]
    2dd2:	fab3 f383 	clz	r3, r3
    2dd6:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    2dd8:	78fb      	ldrb	r3, [r7, #3]
    2dda:	f1c3 031f 	rsb	r3, r3, #31
    2dde:	60fb      	str	r3, [r7, #12]
    2de0:	68fa      	ldr	r2, [r7, #12]
    2de2:	4613      	mov	r3, r2
    2de4:	009b      	lsls	r3, r3, #2
    2de6:	4413      	add	r3, r2
    2de8:	009b      	lsls	r3, r3, #2
    2dea:	4a14      	ldr	r2, [pc, #80]	; (2e3c <vTaskSwitchContext+0xc0>)
    2dec:	4413      	add	r3, r2
    2dee:	60bb      	str	r3, [r7, #8]
    2df0:	68bb      	ldr	r3, [r7, #8]
    2df2:	685b      	ldr	r3, [r3, #4]
    2df4:	685a      	ldr	r2, [r3, #4]
    2df6:	68bb      	ldr	r3, [r7, #8]
    2df8:	605a      	str	r2, [r3, #4]
    2dfa:	68bb      	ldr	r3, [r7, #8]
    2dfc:	685a      	ldr	r2, [r3, #4]
    2dfe:	68bb      	ldr	r3, [r7, #8]
    2e00:	3308      	adds	r3, #8
    2e02:	429a      	cmp	r2, r3
    2e04:	d104      	bne.n	2e10 <vTaskSwitchContext+0x94>
    2e06:	68bb      	ldr	r3, [r7, #8]
    2e08:	685b      	ldr	r3, [r3, #4]
    2e0a:	685a      	ldr	r2, [r3, #4]
    2e0c:	68bb      	ldr	r3, [r7, #8]
    2e0e:	605a      	str	r2, [r3, #4]
    2e10:	68bb      	ldr	r3, [r7, #8]
    2e12:	685b      	ldr	r3, [r3, #4]
    2e14:	68db      	ldr	r3, [r3, #12]
    2e16:	4a07      	ldr	r2, [pc, #28]	; (2e34 <vTaskSwitchContext+0xb8>)
    2e18:	6013      	str	r3, [r2, #0]
}
    2e1a:	bf00      	nop
    2e1c:	3710      	adds	r7, #16
    2e1e:	46bd      	mov	sp, r7
    2e20:	bd80      	pop	{r7, pc}
    2e22:	bf00      	nop
    2e24:	100007cc 	.word	0x100007cc
    2e28:	100007c8 	.word	0x100007c8
    2e2c:	100007d4 	.word	0x100007d4
    2e30:	100007d0 	.word	0x100007d0
    2e34:	1000075c 	.word	0x1000075c
    2e38:	100007c4 	.word	0x100007c4
    2e3c:	10000760 	.word	0x10000760

00002e40 <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    2e40:	b480      	push	{r7}
    2e42:	af00      	add	r7, sp, #0
    return 1;
    2e44:	2301      	movs	r3, #1
  }
    2e46:	4618      	mov	r0, r3
    2e48:	46bd      	mov	sp, r7
    2e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e4e:	4770      	bx	lr

00002e50 <_kill>:

  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    2e50:	b480      	push	{r7}
    2e52:	b083      	sub	sp, #12
    2e54:	af00      	add	r7, sp, #0
    2e56:	6078      	str	r0, [r7, #4]
    2e58:	6039      	str	r1, [r7, #0]
    return -1;
    2e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    2e5e:	4618      	mov	r0, r3
    2e60:	370c      	adds	r7, #12
    2e62:	46bd      	mov	sp, r7
    2e64:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e68:	4770      	bx	lr
    2e6a:	Address 0x0000000000002e6a is out of bounds.


00002e6c <_write>:
    return previous_heap_position;
  }

  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    2e6c:	b580      	push	{r7, lr}
    2e6e:	b084      	sub	sp, #16
    2e70:	af00      	add	r7, sp, #0
    2e72:	60f8      	str	r0, [r7, #12]
    2e74:	60b9      	str	r1, [r7, #8]
    2e76:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    2e78:	687b      	ldr	r3, [r7, #4]
    2e7a:	4619      	mov	r1, r3
    2e7c:	68b8      	ldr	r0, [r7, #8]
    2e7e:	f001 f97c 	bl	417a <trace_write>
    return sjsu::newlib::out(ptr, length);
    2e82:	4b05      	ldr	r3, [pc, #20]	; (2e98 <_write+0x2c>)
    2e84:	681b      	ldr	r3, [r3, #0]
    2e86:	687a      	ldr	r2, [r7, #4]
    2e88:	4611      	mov	r1, r2
    2e8a:	68b8      	ldr	r0, [r7, #8]
    2e8c:	4798      	blx	r3
    2e8e:	4603      	mov	r3, r0
  }
    2e90:	4618      	mov	r0, r3
    2e92:	3710      	adds	r7, #16
    2e94:	46bd      	mov	sp, r7
    2e96:	bd80      	pop	{r7, pc}
    2e98:	10000004 	.word	0x10000004

00002e9c <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    2e9c:	b580      	push	{r7, lr}
    2e9e:	b084      	sub	sp, #16
    2ea0:	af00      	add	r7, sp, #0
    2ea2:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    2ea4:	6878      	ldr	r0, [r7, #4]
    2ea6:	f004 fe45 	bl	7b34 <strlen>
    2eaa:	4603      	mov	r3, r0
    2eac:	60fb      	str	r3, [r7, #12]
    int result        = 0;
    2eae:	2300      	movs	r3, #0
    2eb0:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    2eb2:	68fa      	ldr	r2, [r7, #12]
    2eb4:	6879      	ldr	r1, [r7, #4]
    2eb6:	2000      	movs	r0, #0
    2eb8:	f7ff ffd8 	bl	2e6c <_write>
    2ebc:	4602      	mov	r2, r0
    2ebe:	68bb      	ldr	r3, [r7, #8]
    2ec0:	4413      	add	r3, r2
    2ec2:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    2ec4:	2201      	movs	r2, #1
    2ec6:	4906      	ldr	r1, [pc, #24]	; (2ee0 <puts+0x44>)
    2ec8:	2000      	movs	r0, #0
    2eca:	f7ff ffcf 	bl	2e6c <_write>
    2ece:	4602      	mov	r2, r0
    2ed0:	68bb      	ldr	r3, [r7, #8]
    2ed2:	4413      	add	r3, r2
    2ed4:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    2ed6:	68bb      	ldr	r3, [r7, #8]
  }
    2ed8:	4618      	mov	r0, r3
    2eda:	3710      	adds	r7, #16
    2edc:	46bd      	mov	sp, r7
    2ede:	bd80      	pop	{r7, pc}
    2ee0:	0000876c 	.word	0x0000876c

00002ee4 <_exit>:

  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    2ee4:	b480      	push	{r7}
    2ee6:	b083      	sub	sp, #12
    2ee8:	af00      	add	r7, sp, #0
    2eea:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    2eec:	bf00      	nop
    while (1)
    2eee:	e7fd      	b.n	2eec <_exit+0x8>

00002ef0 <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    2ef0:	b580      	push	{r7, lr}
    2ef2:	b088      	sub	sp, #32
    2ef4:	af00      	add	r7, sp, #0
    2ef6:	60b9      	str	r1, [r7, #8]
    2ef8:	607a      	str	r2, [r7, #4]
    2efa:	603b      	str	r3, [r7, #0]
    2efc:	4603      	mov	r3, r0
    2efe:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    2f00:	23fe      	movs	r3, #254	; 0xfe
    2f02:	61fb      	str	r3, [r7, #28]
  size_t proper_index = idx % (string_limit);
    2f04:	687b      	ldr	r3, [r7, #4]
    2f06:	69fa      	ldr	r2, [r7, #28]
    2f08:	fbb3 f2f2 	udiv	r2, r3, r2
    2f0c:	69f9      	ldr	r1, [r7, #28]
    2f0e:	fb01 f202 	mul.w	r2, r1, r2
    2f12:	1a9b      	subs	r3, r3, r2
    2f14:	61bb      	str	r3, [r7, #24]
  ((char*)buffer)[proper_index] = character;
    2f16:	68ba      	ldr	r2, [r7, #8]
    2f18:	69bb      	ldr	r3, [r7, #24]
    2f1a:	4413      	add	r3, r2
    2f1c:	7bfa      	ldrb	r2, [r7, #15]
    2f1e:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    2f20:	7bfb      	ldrb	r3, [r7, #15]
    2f22:	2b00      	cmp	r3, #0
    2f24:	d106      	bne.n	2f34 <_out_chunk(char, void*, unsigned int, unsigned int)+0x44>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    2f26:	69bb      	ldr	r3, [r7, #24]
    2f28:	461a      	mov	r2, r3
    2f2a:	68b9      	ldr	r1, [r7, #8]
    2f2c:	2001      	movs	r0, #1
    2f2e:	f7ff ff9d 	bl	2e6c <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    2f32:	e012      	b.n	2f5a <_out_chunk(char, void*, unsigned int, unsigned int)+0x6a>
  } else if (proper_index + 1 == string_limit) {
    2f34:	69bb      	ldr	r3, [r7, #24]
    2f36:	3301      	adds	r3, #1
    2f38:	69fa      	ldr	r2, [r7, #28]
    2f3a:	429a      	cmp	r2, r3
    2f3c:	d10d      	bne.n	2f5a <_out_chunk(char, void*, unsigned int, unsigned int)+0x6a>
    size_t last_character = string_limit + 1;
    2f3e:	69fb      	ldr	r3, [r7, #28]
    2f40:	3301      	adds	r3, #1
    2f42:	617b      	str	r3, [r7, #20]
    ((char*)buffer)[last_character] = '\0';
    2f44:	68ba      	ldr	r2, [r7, #8]
    2f46:	697b      	ldr	r3, [r7, #20]
    2f48:	4413      	add	r3, r2
    2f4a:	2200      	movs	r2, #0
    2f4c:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    2f4e:	697b      	ldr	r3, [r7, #20]
    2f50:	461a      	mov	r2, r3
    2f52:	68b9      	ldr	r1, [r7, #8]
    2f54:	2001      	movs	r0, #1
    2f56:	f7ff ff89 	bl	2e6c <_write>
}
    2f5a:	bf00      	nop
    2f5c:	3720      	adds	r7, #32
    2f5e:	46bd      	mov	sp, r7
    2f60:	bd80      	pop	{r7, pc}

00002f62 <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    2f62:	b480      	push	{r7}
    2f64:	b085      	sub	sp, #20
    2f66:	af00      	add	r7, sp, #0
    2f68:	60b9      	str	r1, [r7, #8]
    2f6a:	607a      	str	r2, [r7, #4]
    2f6c:	603b      	str	r3, [r7, #0]
    2f6e:	4603      	mov	r3, r0
    2f70:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    2f72:	bf00      	nop
    2f74:	3714      	adds	r7, #20
    2f76:	46bd      	mov	sp, r7
    2f78:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f7c:	4770      	bx	lr

00002f7e <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    2f7e:	b480      	push	{r7}
    2f80:	b085      	sub	sp, #20
    2f82:	af00      	add	r7, sp, #0
    2f84:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	60fb      	str	r3, [r7, #12]
    2f8a:	68fb      	ldr	r3, [r7, #12]
    2f8c:	781b      	ldrb	r3, [r3, #0]
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d003      	beq.n	2f9a <_strlen(char const*)+0x1c>
    2f92:	68fb      	ldr	r3, [r7, #12]
    2f94:	3301      	adds	r3, #1
    2f96:	60fb      	str	r3, [r7, #12]
    2f98:	e7f7      	b.n	2f8a <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    2f9a:	68fa      	ldr	r2, [r7, #12]
    2f9c:	687b      	ldr	r3, [r7, #4]
    2f9e:	1ad3      	subs	r3, r2, r3
}
    2fa0:	4618      	mov	r0, r3
    2fa2:	3714      	adds	r7, #20
    2fa4:	46bd      	mov	sp, r7
    2fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2faa:	4770      	bx	lr

00002fac <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    2fac:	b480      	push	{r7}
    2fae:	b083      	sub	sp, #12
    2fb0:	af00      	add	r7, sp, #0
    2fb2:	4603      	mov	r3, r0
    2fb4:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    2fb6:	79fb      	ldrb	r3, [r7, #7]
    2fb8:	2b2f      	cmp	r3, #47	; 0x2f
    2fba:	d904      	bls.n	2fc6 <_is_digit(char)+0x1a>
    2fbc:	79fb      	ldrb	r3, [r7, #7]
    2fbe:	2b39      	cmp	r3, #57	; 0x39
    2fc0:	d801      	bhi.n	2fc6 <_is_digit(char)+0x1a>
    2fc2:	2301      	movs	r3, #1
    2fc4:	e000      	b.n	2fc8 <_is_digit(char)+0x1c>
    2fc6:	2300      	movs	r3, #0
}
    2fc8:	4618      	mov	r0, r3
    2fca:	370c      	adds	r7, #12
    2fcc:	46bd      	mov	sp, r7
    2fce:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fd2:	4770      	bx	lr

00002fd4 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    2fd4:	b580      	push	{r7, lr}
    2fd6:	b084      	sub	sp, #16
    2fd8:	af00      	add	r7, sp, #0
    2fda:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    2fdc:	2300      	movs	r3, #0
    2fde:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    2fe0:	687b      	ldr	r3, [r7, #4]
    2fe2:	681b      	ldr	r3, [r3, #0]
    2fe4:	781b      	ldrb	r3, [r3, #0]
    2fe6:	4618      	mov	r0, r3
    2fe8:	f7ff ffe0 	bl	2fac <_is_digit(char)>
    2fec:	4603      	mov	r3, r0
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d00f      	beq.n	3012 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2ff2:	68fa      	ldr	r2, [r7, #12]
    2ff4:	4613      	mov	r3, r2
    2ff6:	009b      	lsls	r3, r3, #2
    2ff8:	4413      	add	r3, r2
    2ffa:	005b      	lsls	r3, r3, #1
    2ffc:	4618      	mov	r0, r3
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	681b      	ldr	r3, [r3, #0]
    3002:	1c59      	adds	r1, r3, #1
    3004:	687a      	ldr	r2, [r7, #4]
    3006:	6011      	str	r1, [r2, #0]
    3008:	781b      	ldrb	r3, [r3, #0]
    300a:	4403      	add	r3, r0
    300c:	3b30      	subs	r3, #48	; 0x30
    300e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    3010:	e7e6      	b.n	2fe0 <_atoi(char const**)+0xc>
  }
  return i;
    3012:	68fb      	ldr	r3, [r7, #12]
}
    3014:	4618      	mov	r0, r3
    3016:	3710      	adds	r7, #16
    3018:	46bd      	mov	sp, r7
    301a:	bd80      	pop	{r7, pc}

0000301c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    301c:	b590      	push	{r4, r7, lr}
    301e:	b089      	sub	sp, #36	; 0x24
    3020:	af00      	add	r7, sp, #0
    3022:	60f8      	str	r0, [r7, #12]
    3024:	60b9      	str	r1, [r7, #8]
    3026:	607a      	str	r2, [r7, #4]
    3028:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    302a:	687b      	ldr	r3, [r7, #4]
    302c:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    302e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3030:	f003 0302 	and.w	r3, r3, #2
    3034:	2b00      	cmp	r3, #0
    3036:	d10e      	bne.n	3056 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    3038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    303a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    303c:	429a      	cmp	r2, r3
    303e:	d20a      	bcs.n	3056 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    3040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3042:	2b1f      	cmp	r3, #31
    3044:	d807      	bhi.n	3056 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    3046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3048:	1c5a      	adds	r2, r3, #1
    304a:	637a      	str	r2, [r7, #52]	; 0x34
    304c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    304e:	4413      	add	r3, r2
    3050:	2230      	movs	r2, #48	; 0x30
    3052:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3054:	e7eb      	b.n	302e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3058:	f003 0302 	and.w	r3, r3, #2
    305c:	2b00      	cmp	r3, #0
    305e:	d113      	bne.n	3088 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3062:	f003 0301 	and.w	r3, r3, #1
    3066:	2b00      	cmp	r3, #0
    3068:	d00e      	beq.n	3088 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    306a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    306c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    306e:	429a      	cmp	r2, r3
    3070:	d20a      	bcs.n	3088 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3074:	2b1f      	cmp	r3, #31
    3076:	d807      	bhi.n	3088 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    3078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    307a:	1c5a      	adds	r2, r3, #1
    307c:	637a      	str	r2, [r7, #52]	; 0x34
    307e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3080:	4413      	add	r3, r2
    3082:	2230      	movs	r2, #48	; 0x30
    3084:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3086:	e7e6      	b.n	3056 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    3088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    308a:	f003 0310 	and.w	r3, r3, #16
    308e:	2b00      	cmp	r3, #0
    3090:	d058      	beq.n	3144 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    3092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3098:	2b00      	cmp	r3, #0
    309a:	d116      	bne.n	30ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    309e:	2b00      	cmp	r3, #0
    30a0:	d013      	beq.n	30ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    30a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    30a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    30a6:	429a      	cmp	r2, r3
    30a8:	d003      	beq.n	30b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    30aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    30ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    30ae:	429a      	cmp	r2, r3
    30b0:	d10b      	bne.n	30ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    30b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    30b4:	3b01      	subs	r3, #1
    30b6:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    30b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    30ba:	2b00      	cmp	r3, #0
    30bc:	d005      	beq.n	30ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    30be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    30c0:	2b10      	cmp	r3, #16
    30c2:	d102      	bne.n	30ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    30c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    30c6:	3b01      	subs	r3, #1
    30c8:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    30ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    30cc:	2b10      	cmp	r3, #16
    30ce:	d10f      	bne.n	30f0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    30d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    30d2:	f003 0320 	and.w	r3, r3, #32
    30d6:	2b00      	cmp	r3, #0
    30d8:	d10a      	bne.n	30f0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    30da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    30dc:	2b1f      	cmp	r3, #31
    30de:	d807      	bhi.n	30f0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    30e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    30e2:	1c5a      	adds	r2, r3, #1
    30e4:	637a      	str	r2, [r7, #52]	; 0x34
    30e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    30e8:	4413      	add	r3, r2
    30ea:	2278      	movs	r2, #120	; 0x78
    30ec:	701a      	strb	r2, [r3, #0]
    30ee:	e01f      	b.n	3130 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    30f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    30f2:	2b10      	cmp	r3, #16
    30f4:	d10f      	bne.n	3116 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    30f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    30f8:	f003 0320 	and.w	r3, r3, #32
    30fc:	2b00      	cmp	r3, #0
    30fe:	d00a      	beq.n	3116 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    3100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3102:	2b1f      	cmp	r3, #31
    3104:	d807      	bhi.n	3116 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    3106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3108:	1c5a      	adds	r2, r3, #1
    310a:	637a      	str	r2, [r7, #52]	; 0x34
    310c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    310e:	4413      	add	r3, r2
    3110:	2258      	movs	r2, #88	; 0x58
    3112:	701a      	strb	r2, [r3, #0]
    3114:	e00c      	b.n	3130 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3118:	2b02      	cmp	r3, #2
    311a:	d109      	bne.n	3130 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    311c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    311e:	2b1f      	cmp	r3, #31
    3120:	d806      	bhi.n	3130 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    3122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3124:	1c5a      	adds	r2, r3, #1
    3126:	637a      	str	r2, [r7, #52]	; 0x34
    3128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    312a:	4413      	add	r3, r2
    312c:	2262      	movs	r2, #98	; 0x62
    312e:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3132:	2b1f      	cmp	r3, #31
    3134:	d806      	bhi.n	3144 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    3136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3138:	1c5a      	adds	r2, r3, #1
    313a:	637a      	str	r2, [r7, #52]	; 0x34
    313c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    313e:	4413      	add	r3, r2
    3140:	2230      	movs	r2, #48	; 0x30
    3142:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    3144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3146:	2b00      	cmp	r3, #0
    3148:	d014      	beq.n	3174 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    314a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    314c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    314e:	429a      	cmp	r2, r3
    3150:	d110      	bne.n	3174 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    3152:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    3156:	2b00      	cmp	r3, #0
    3158:	d109      	bne.n	316e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    315a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    315c:	f003 0304 	and.w	r3, r3, #4
    3160:	2b00      	cmp	r3, #0
    3162:	d104      	bne.n	316e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    3164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3166:	f003 0308 	and.w	r3, r3, #8
    316a:	2b00      	cmp	r3, #0
    316c:	d002      	beq.n	3174 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    316e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3170:	3b01      	subs	r3, #1
    3172:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3176:	2b1f      	cmp	r3, #31
    3178:	d824      	bhi.n	31c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    317a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    317e:	2b00      	cmp	r3, #0
    3180:	d007      	beq.n	3192 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    3182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3184:	1c5a      	adds	r2, r3, #1
    3186:	637a      	str	r2, [r7, #52]	; 0x34
    3188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    318a:	4413      	add	r3, r2
    318c:	222d      	movs	r2, #45	; 0x2d
    318e:	701a      	strb	r2, [r3, #0]
    3190:	e018      	b.n	31c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    3192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3194:	f003 0304 	and.w	r3, r3, #4
    3198:	2b00      	cmp	r3, #0
    319a:	d007      	beq.n	31ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    319c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    319e:	1c5a      	adds	r2, r3, #1
    31a0:	637a      	str	r2, [r7, #52]	; 0x34
    31a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    31a4:	4413      	add	r3, r2
    31a6:	222b      	movs	r2, #43	; 0x2b
    31a8:	701a      	strb	r2, [r3, #0]
    31aa:	e00b      	b.n	31c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    31ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    31ae:	f003 0308 	and.w	r3, r3, #8
    31b2:	2b00      	cmp	r3, #0
    31b4:	d006      	beq.n	31c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    31b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    31b8:	1c5a      	adds	r2, r3, #1
    31ba:	637a      	str	r2, [r7, #52]	; 0x34
    31bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    31be:	4413      	add	r3, r2
    31c0:	2220      	movs	r2, #32
    31c2:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    31c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    31c6:	f003 0302 	and.w	r3, r3, #2
    31ca:	2b00      	cmp	r3, #0
    31cc:	d116      	bne.n	31fc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    31ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    31d0:	f003 0301 	and.w	r3, r3, #1
    31d4:	2b00      	cmp	r3, #0
    31d6:	d111      	bne.n	31fc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    31d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    31da:	61fb      	str	r3, [r7, #28]
    31dc:	69fa      	ldr	r2, [r7, #28]
    31de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    31e0:	429a      	cmp	r2, r3
    31e2:	d20b      	bcs.n	31fc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    31e4:	68fc      	ldr	r4, [r7, #12]
    31e6:	687a      	ldr	r2, [r7, #4]
    31e8:	1c53      	adds	r3, r2, #1
    31ea:	607b      	str	r3, [r7, #4]
    31ec:	683b      	ldr	r3, [r7, #0]
    31ee:	68b9      	ldr	r1, [r7, #8]
    31f0:	2020      	movs	r0, #32
    31f2:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    31f4:	69fb      	ldr	r3, [r7, #28]
    31f6:	3301      	adds	r3, #1
    31f8:	61fb      	str	r3, [r7, #28]
    31fa:	e7ef      	b.n	31dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    31fc:	2300      	movs	r3, #0
    31fe:	61bb      	str	r3, [r7, #24]
    3200:	69ba      	ldr	r2, [r7, #24]
    3202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3204:	429a      	cmp	r2, r3
    3206:	d211      	bcs.n	322c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3208:	68fc      	ldr	r4, [r7, #12]
    320a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    320c:	69bb      	ldr	r3, [r7, #24]
    320e:	1ad3      	subs	r3, r2, r3
    3210:	3b01      	subs	r3, #1
    3212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3214:	4413      	add	r3, r2
    3216:	7818      	ldrb	r0, [r3, #0]
    3218:	687a      	ldr	r2, [r7, #4]
    321a:	1c53      	adds	r3, r2, #1
    321c:	607b      	str	r3, [r7, #4]
    321e:	683b      	ldr	r3, [r7, #0]
    3220:	68b9      	ldr	r1, [r7, #8]
    3222:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    3224:	69bb      	ldr	r3, [r7, #24]
    3226:	3301      	adds	r3, #1
    3228:	61bb      	str	r3, [r7, #24]
    322a:	e7e9      	b.n	3200 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    322c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    322e:	f003 0302 	and.w	r3, r3, #2
    3232:	2b00      	cmp	r3, #0
    3234:	d00e      	beq.n	3254 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    3236:	687a      	ldr	r2, [r7, #4]
    3238:	697b      	ldr	r3, [r7, #20]
    323a:	1ad3      	subs	r3, r2, r3
    323c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    323e:	429a      	cmp	r2, r3
    3240:	d908      	bls.n	3254 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    3242:	68fc      	ldr	r4, [r7, #12]
    3244:	687a      	ldr	r2, [r7, #4]
    3246:	1c53      	adds	r3, r2, #1
    3248:	607b      	str	r3, [r7, #4]
    324a:	683b      	ldr	r3, [r7, #0]
    324c:	68b9      	ldr	r1, [r7, #8]
    324e:	2020      	movs	r0, #32
    3250:	47a0      	blx	r4
    while (idx - start_idx < width) {
    3252:	e7f0      	b.n	3236 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    3254:	687b      	ldr	r3, [r7, #4]
}
    3256:	4618      	mov	r0, r3
    3258:	3724      	adds	r7, #36	; 0x24
    325a:	46bd      	mov	sp, r7
    325c:	bd90      	pop	{r4, r7, pc}

0000325e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    325e:	b580      	push	{r7, lr}
    3260:	b096      	sub	sp, #88	; 0x58
    3262:	af08      	add	r7, sp, #32
    3264:	60f8      	str	r0, [r7, #12]
    3266:	60b9      	str	r1, [r7, #8]
    3268:	607a      	str	r2, [r7, #4]
    326a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    326c:	2300      	movs	r3, #0
    326e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    3270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3272:	2b00      	cmp	r3, #0
    3274:	d103      	bne.n	327e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    3276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3278:	f023 0310 	bic.w	r3, r3, #16
    327c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    327e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3284:	2b00      	cmp	r3, #0
    3286:	d002      	beq.n	328e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    3288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    328a:	2b00      	cmp	r3, #0
    328c:	d034      	beq.n	32f8 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    328e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3290:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3292:	fbb3 f2f2 	udiv	r2, r3, r2
    3296:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    3298:	fb01 f202 	mul.w	r2, r1, r2
    329c:	1a9b      	subs	r3, r3, r2
    329e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    32a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    32a6:	2b09      	cmp	r3, #9
    32a8:	d804      	bhi.n	32b4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    32aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    32ae:	3330      	adds	r3, #48	; 0x30
    32b0:	b2da      	uxtb	r2, r3
    32b2:	e00d      	b.n	32d0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    32b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    32b6:	f003 0320 	and.w	r3, r3, #32
    32ba:	2b00      	cmp	r3, #0
    32bc:	d001      	beq.n	32c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    32be:	2241      	movs	r2, #65	; 0x41
    32c0:	e000      	b.n	32c4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    32c2:	2261      	movs	r2, #97	; 0x61
    32c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    32c8:	4413      	add	r3, r2
    32ca:	b2db      	uxtb	r3, r3
    32cc:	3b0a      	subs	r3, #10
    32ce:	b2da      	uxtb	r2, r3
    32d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32d2:	1c59      	adds	r1, r3, #1
    32d4:	6379      	str	r1, [r7, #52]	; 0x34
    32d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
    32da:	440b      	add	r3, r1
    32dc:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    32e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    32e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    32e4:	fbb2 f3f3 	udiv	r3, r2, r3
    32e8:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    32ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    32ec:	2b00      	cmp	r3, #0
    32ee:	d003      	beq.n	32f8 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    32f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32f2:	2b1f      	cmp	r3, #31
    32f4:	d800      	bhi.n	32f8 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    32f6:	e7ca      	b.n	328e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    32f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    32fa:	9306      	str	r3, [sp, #24]
    32fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    32fe:	9305      	str	r3, [sp, #20]
    3300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3302:	9304      	str	r3, [sp, #16]
    3304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3306:	9303      	str	r3, [sp, #12]
    3308:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    330c:	9302      	str	r3, [sp, #8]
    330e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3310:	9301      	str	r3, [sp, #4]
    3312:	f107 0310 	add.w	r3, r7, #16
    3316:	9300      	str	r3, [sp, #0]
    3318:	683b      	ldr	r3, [r7, #0]
    331a:	687a      	ldr	r2, [r7, #4]
    331c:	68b9      	ldr	r1, [r7, #8]
    331e:	68f8      	ldr	r0, [r7, #12]
    3320:	f7ff fe7c 	bl	301c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    3324:	4603      	mov	r3, r0
}
    3326:	4618      	mov	r0, r3
    3328:	3738      	adds	r7, #56	; 0x38
    332a:	46bd      	mov	sp, r7
    332c:	bd80      	pop	{r7, pc}

0000332e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    332e:	b580      	push	{r7, lr}
    3330:	b096      	sub	sp, #88	; 0x58
    3332:	af08      	add	r7, sp, #32
    3334:	60f8      	str	r0, [r7, #12]
    3336:	60b9      	str	r1, [r7, #8]
    3338:	607a      	str	r2, [r7, #4]
    333a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    333c:	2300      	movs	r3, #0
    333e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    3340:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    3344:	4313      	orrs	r3, r2
    3346:	d103      	bne.n	3350 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    3348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    334a:	f023 0310 	bic.w	r3, r3, #16
    334e:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3356:	2b00      	cmp	r3, #0
    3358:	d003      	beq.n	3362 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    335a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    335e:	4313      	orrs	r3, r2
    3360:	d039      	beq.n	33d6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    do {
      const char digit = (char)(value % base);
    3362:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3366:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    336a:	f003 fa89 	bl	6880 <__aeabi_uldivmod>
    336e:	4613      	mov	r3, r2
    3370:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3374:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3378:	2b09      	cmp	r3, #9
    337a:	d804      	bhi.n	3386 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x58>
    337c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3380:	3330      	adds	r3, #48	; 0x30
    3382:	b2da      	uxtb	r2, r3
    3384:	e00d      	b.n	33a2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
    3386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3388:	f003 0320 	and.w	r3, r3, #32
    338c:	2b00      	cmp	r3, #0
    338e:	d001      	beq.n	3394 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x66>
    3390:	2241      	movs	r2, #65	; 0x41
    3392:	e000      	b.n	3396 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    3394:	2261      	movs	r2, #97	; 0x61
    3396:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    339a:	4413      	add	r3, r2
    339c:	b2db      	uxtb	r3, r3
    339e:	3b0a      	subs	r3, #10
    33a0:	b2da      	uxtb	r2, r3
    33a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    33a4:	1c59      	adds	r1, r3, #1
    33a6:	6379      	str	r1, [r7, #52]	; 0x34
    33a8:	f107 0138 	add.w	r1, r7, #56	; 0x38
    33ac:	440b      	add	r3, r1
    33ae:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    33b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    33b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    33ba:	f003 fa61 	bl	6880 <__aeabi_uldivmod>
    33be:	4602      	mov	r2, r0
    33c0:	460b      	mov	r3, r1
    33c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    33c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    33ca:	4313      	orrs	r3, r2
    33cc:	d003      	beq.n	33d6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    33ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    33d0:	2b1f      	cmp	r3, #31
    33d2:	d800      	bhi.n	33d6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    do {
    33d4:	e7c5      	b.n	3362 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    33d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    33d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    33da:	9206      	str	r2, [sp, #24]
    33dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    33de:	9205      	str	r2, [sp, #20]
    33e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
    33e2:	9204      	str	r2, [sp, #16]
    33e4:	9303      	str	r3, [sp, #12]
    33e6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    33ea:	9302      	str	r3, [sp, #8]
    33ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    33ee:	9301      	str	r3, [sp, #4]
    33f0:	f107 0310 	add.w	r3, r7, #16
    33f4:	9300      	str	r3, [sp, #0]
    33f6:	683b      	ldr	r3, [r7, #0]
    33f8:	687a      	ldr	r2, [r7, #4]
    33fa:	68b9      	ldr	r1, [r7, #8]
    33fc:	68f8      	ldr	r0, [r7, #12]
    33fe:	f7ff fe0d 	bl	301c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    3402:	4603      	mov	r3, r0
}
    3404:	4618      	mov	r0, r3
    3406:	3738      	adds	r7, #56	; 0x38
    3408:	46bd      	mov	sp, r7
    340a:	bd80      	pop	{r7, pc}

0000340c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    340c:	b590      	push	{r4, r7, lr}
    340e:	b09b      	sub	sp, #108	; 0x6c
    3410:	af00      	add	r7, sp, #0
    3412:	6178      	str	r0, [r7, #20]
    3414:	6139      	str	r1, [r7, #16]
    3416:	60fa      	str	r2, [r7, #12]
    3418:	60bb      	str	r3, [r7, #8]
    341a:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    341e:	68fb      	ldr	r3, [r7, #12]
    3420:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    3422:	e9d7 0100 	ldrd	r0, r1, [r7]
    3426:	f003 f87d 	bl	6524 <__aeabi_d2f>
    342a:	4603      	mov	r3, r0
    342c:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    342e:	2300      	movs	r3, #0
    3430:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    3432:	f04f 0300 	mov.w	r3, #0
    3436:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    3438:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    343c:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    343e:	2300      	movs	r3, #0
    3440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    3444:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    344c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3450:	d50a      	bpl.n	3468 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    3452:	2301      	movs	r3, #1
    3454:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    3458:	ed9f 7aab 	vldr	s14, [pc, #684]	; 3708 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    345c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3460:	ee77 7a67 	vsub.f32	s15, s14, s15
    3464:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    3468:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3470:	2b00      	cmp	r3, #0
    3472:	d101      	bne.n	3478 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    3474:	2306      	movs	r3, #6
    3476:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    3478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    347a:	2b1f      	cmp	r3, #31
    347c:	d80f      	bhi.n	349e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    347e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3480:	2b09      	cmp	r3, #9
    3482:	d90c      	bls.n	349e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    3484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3486:	1c5a      	adds	r2, r3, #1
    3488:	663a      	str	r2, [r7, #96]	; 0x60
    348a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    348e:	4413      	add	r3, r2
    3490:	2230      	movs	r2, #48	; 0x30
    3492:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    3496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3498:	3b01      	subs	r3, #1
    349a:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    349c:	e7ec      	b.n	3478 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    349e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    34a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    34a6:	ee17 3a90 	vmov	r3, s15
    34aa:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    34ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    34ae:	ee07 3a90 	vmov	s15, r3
    34b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    34b6:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    34ba:	ee37 7a67 	vsub.f32	s14, s14, s15
    34be:	4a93      	ldr	r2, [pc, #588]	; (370c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    34c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    34c2:	009b      	lsls	r3, r3, #2
    34c4:	4413      	add	r3, r2
    34c6:	edd3 7a00 	vldr	s15, [r3]
    34ca:	ee67 7a27 	vmul.f32	s15, s14, s15
    34ce:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    34d2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    34d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    34da:	ee17 3a90 	vmov	r3, s15
    34de:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    34e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    34e2:	ee07 3a90 	vmov	s15, r3
    34e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    34ea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    34ee:	ee77 7a67 	vsub.f32	s15, s14, s15
    34f2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    34f6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    34fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    34fe:	eef4 7ac7 	vcmpe.f32	s15, s14
    3502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3506:	dd18      	ble.n	353a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    3508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    350a:	3301      	adds	r3, #1
    350c:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    350e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3510:	ee07 3a90 	vmov	s15, r3
    3514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    3518:	4a7c      	ldr	r2, [pc, #496]	; (370c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    351a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    351c:	009b      	lsls	r3, r3, #2
    351e:	4413      	add	r3, r2
    3520:	edd3 7a00 	vldr	s15, [r3]
    3524:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    352c:	db19      	blt.n	3562 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    352e:	2300      	movs	r3, #0
    3530:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    3532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3534:	3301      	adds	r3, #1
    3536:	65bb      	str	r3, [r7, #88]	; 0x58
    3538:	e013      	b.n	3562 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    353a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    353e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3542:	eef4 7a47 	vcmp.f32	s15, s14
    3546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    354a:	d10a      	bne.n	3562 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    354c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    354e:	2b00      	cmp	r3, #0
    3550:	d004      	beq.n	355c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    3552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3554:	f003 0301 	and.w	r3, r3, #1
    3558:	2b00      	cmp	r3, #0
    355a:	d002      	beq.n	3562 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    355c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    355e:	3301      	adds	r3, #1
    3560:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    3562:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3566:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 3710 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    356a:	eef4 7ac7 	vcmpe.f32	s15, s14
    356e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3572:	dd01      	ble.n	3578 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    3574:	2300      	movs	r3, #0
    3576:	e166      	b.n	3846 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    3578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    357a:	2b00      	cmp	r3, #0
    357c:	d129      	bne.n	35d2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    357e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3580:	ee07 3a90 	vmov	s15, r3
    3584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3588:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    358c:	ee77 7a67 	vsub.f32	s15, s14, s15
    3590:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    3594:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3598:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    359c:	eef4 7ac7 	vcmpe.f32	s15, s14
    35a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    35a4:	dd03      	ble.n	35ae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    35a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    35a8:	3301      	adds	r3, #1
    35aa:	65bb      	str	r3, [r7, #88]	; 0x58
    35ac:	e062      	b.n	3674 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    35ae:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    35b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    35b6:	eef4 7a47 	vcmp.f32	s15, s14
    35ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    35be:	d159      	bne.n	3674 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    35c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    35c2:	f003 0301 	and.w	r3, r3, #1
    35c6:	2b00      	cmp	r3, #0
    35c8:	d054      	beq.n	3674 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    35ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    35cc:	3301      	adds	r3, #1
    35ce:	65bb      	str	r3, [r7, #88]	; 0x58
    35d0:	e050      	b.n	3674 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    35d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    35d4:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    35d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    35d8:	2b1f      	cmp	r3, #31
    35da:	d828      	bhi.n	362e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    35dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    35de:	3b01      	subs	r3, #1
    35e0:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    35e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
    35e4:	4b4b      	ldr	r3, [pc, #300]	; (3714 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    35e6:	fba3 2301 	umull	r2, r3, r3, r1
    35ea:	08da      	lsrs	r2, r3, #3
    35ec:	4613      	mov	r3, r2
    35ee:	009b      	lsls	r3, r3, #2
    35f0:	4413      	add	r3, r2
    35f2:	005b      	lsls	r3, r3, #1
    35f4:	1aca      	subs	r2, r1, r3
    35f6:	b2d3      	uxtb	r3, r2
    35f8:	3330      	adds	r3, #48	; 0x30
    35fa:	b2d9      	uxtb	r1, r3
    35fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    35fe:	1c5a      	adds	r2, r3, #1
    3600:	663a      	str	r2, [r7, #96]	; 0x60
    3602:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3606:	4413      	add	r3, r2
    3608:	460a      	mov	r2, r1
    360a:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    360e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3610:	4a40      	ldr	r2, [pc, #256]	; (3714 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    3612:	fba2 2303 	umull	r2, r3, r2, r3
    3616:	08db      	lsrs	r3, r3, #3
    3618:	657b      	str	r3, [r7, #84]	; 0x54
    361a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    361c:	2b00      	cmp	r3, #0
    361e:	bf0c      	ite	eq
    3620:	2301      	moveq	r3, #1
    3622:	2300      	movne	r3, #0
    3624:	b2db      	uxtb	r3, r3
    3626:	2b00      	cmp	r3, #0
    3628:	d100      	bne.n	362c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    362a:	e7d4      	b.n	35d6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    362c:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    362e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3630:	2b1f      	cmp	r3, #31
    3632:	d806      	bhi.n	3642 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3636:	1e5a      	subs	r2, r3, #1
    3638:	653a      	str	r2, [r7, #80]	; 0x50
    363a:	2b00      	cmp	r3, #0
    363c:	d001      	beq.n	3642 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    363e:	2301      	movs	r3, #1
    3640:	e000      	b.n	3644 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    3642:	2300      	movs	r3, #0
    3644:	2b00      	cmp	r3, #0
    3646:	d009      	beq.n	365c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    3648:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    364a:	1c5a      	adds	r2, r3, #1
    364c:	663a      	str	r2, [r7, #96]	; 0x60
    364e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3652:	4413      	add	r3, r2
    3654:	2230      	movs	r2, #48	; 0x30
    3656:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    365a:	e7e8      	b.n	362e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    365c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    365e:	2b1f      	cmp	r3, #31
    3660:	d808      	bhi.n	3674 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    3662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3664:	1c5a      	adds	r2, r3, #1
    3666:	663a      	str	r2, [r7, #96]	; 0x60
    3668:	f107 0268 	add.w	r2, r7, #104	; 0x68
    366c:	4413      	add	r3, r2
    366e:	222e      	movs	r2, #46	; 0x2e
    3670:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3674:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3676:	2b1f      	cmp	r3, #31
    3678:	d829      	bhi.n	36ce <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    367a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    367c:	4b26      	ldr	r3, [pc, #152]	; (3718 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    367e:	fb83 1302 	smull	r1, r3, r3, r2
    3682:	1099      	asrs	r1, r3, #2
    3684:	17d3      	asrs	r3, r2, #31
    3686:	1ac9      	subs	r1, r1, r3
    3688:	460b      	mov	r3, r1
    368a:	009b      	lsls	r3, r3, #2
    368c:	440b      	add	r3, r1
    368e:	005b      	lsls	r3, r3, #1
    3690:	1ad1      	subs	r1, r2, r3
    3692:	b2cb      	uxtb	r3, r1
    3694:	3330      	adds	r3, #48	; 0x30
    3696:	b2d9      	uxtb	r1, r3
    3698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    369a:	1c5a      	adds	r2, r3, #1
    369c:	663a      	str	r2, [r7, #96]	; 0x60
    369e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    36a2:	4413      	add	r3, r2
    36a4:	460a      	mov	r2, r1
    36a6:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    36aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    36ac:	4a1a      	ldr	r2, [pc, #104]	; (3718 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    36ae:	fb82 1203 	smull	r1, r2, r2, r3
    36b2:	1092      	asrs	r2, r2, #2
    36b4:	17db      	asrs	r3, r3, #31
    36b6:	1ad3      	subs	r3, r2, r3
    36b8:	65bb      	str	r3, [r7, #88]	; 0x58
    36ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    36bc:	2b00      	cmp	r3, #0
    36be:	bf0c      	ite	eq
    36c0:	2301      	moveq	r3, #1
    36c2:	2300      	movne	r3, #0
    36c4:	b2db      	uxtb	r3, r3
    36c6:	2b00      	cmp	r3, #0
    36c8:	d100      	bne.n	36cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    36ca:	e7d3      	b.n	3674 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    36cc:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    36ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    36d2:	f003 0302 	and.w	r3, r3, #2
    36d6:	2b00      	cmp	r3, #0
    36d8:	d120      	bne.n	371c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    36da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    36de:	f003 0301 	and.w	r3, r3, #1
    36e2:	2b00      	cmp	r3, #0
    36e4:	d01a      	beq.n	371c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    36e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    36e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    36ea:	429a      	cmp	r2, r3
    36ec:	d216      	bcs.n	371c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    36ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    36f0:	2b1f      	cmp	r3, #31
    36f2:	d813      	bhi.n	371c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    36f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    36f6:	1c5a      	adds	r2, r3, #1
    36f8:	663a      	str	r2, [r7, #96]	; 0x60
    36fa:	f107 0268 	add.w	r2, r7, #104	; 0x68
    36fe:	4413      	add	r3, r2
    3700:	2230      	movs	r2, #48	; 0x30
    3702:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3706:	e7e2      	b.n	36ce <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    3708:	00000000 	.word	0x00000000
    370c:	00008770 	.word	0x00008770
    3710:	4f000000 	.word	0x4f000000
    3714:	cccccccd 	.word	0xcccccccd
    3718:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    371c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    371e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3720:	429a      	cmp	r2, r3
    3722:	d112      	bne.n	374a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    3724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    3728:	2b00      	cmp	r3, #0
    372a:	d10b      	bne.n	3744 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    372c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3730:	f003 0304 	and.w	r3, r3, #4
    3734:	2b00      	cmp	r3, #0
    3736:	d105      	bne.n	3744 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    3738:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    373c:	f003 0308 	and.w	r3, r3, #8
    3740:	2b00      	cmp	r3, #0
    3742:	d002      	beq.n	374a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    3744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3746:	3b01      	subs	r3, #1
    3748:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    374a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    374c:	2b1f      	cmp	r3, #31
    374e:	d82c      	bhi.n	37aa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    3750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    3754:	2b00      	cmp	r3, #0
    3756:	d009      	beq.n	376c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    3758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    375a:	1c5a      	adds	r2, r3, #1
    375c:	663a      	str	r2, [r7, #96]	; 0x60
    375e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3762:	4413      	add	r3, r2
    3764:	222d      	movs	r2, #45	; 0x2d
    3766:	f803 2c50 	strb.w	r2, [r3, #-80]
    376a:	e01e      	b.n	37aa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    376c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3770:	f003 0304 	and.w	r3, r3, #4
    3774:	2b00      	cmp	r3, #0
    3776:	d009      	beq.n	378c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    377a:	1c5a      	adds	r2, r3, #1
    377c:	663a      	str	r2, [r7, #96]	; 0x60
    377e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3782:	4413      	add	r3, r2
    3784:	222b      	movs	r2, #43	; 0x2b
    3786:	f803 2c50 	strb.w	r2, [r3, #-80]
    378a:	e00e      	b.n	37aa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    378c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3790:	f003 0308 	and.w	r3, r3, #8
    3794:	2b00      	cmp	r3, #0
    3796:	d008      	beq.n	37aa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    3798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    379a:	1c5a      	adds	r2, r3, #1
    379c:	663a      	str	r2, [r7, #96]	; 0x60
    379e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    37a2:	4413      	add	r3, r2
    37a4:	2220      	movs	r2, #32
    37a6:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    37aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    37ae:	f003 0302 	and.w	r3, r3, #2
    37b2:	2b00      	cmp	r3, #0
    37b4:	d117      	bne.n	37e6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    37b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    37ba:	f003 0301 	and.w	r3, r3, #1
    37be:	2b00      	cmp	r3, #0
    37c0:	d111      	bne.n	37e6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    37c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    37c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    37c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    37c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    37ca:	429a      	cmp	r2, r3
    37cc:	d20b      	bcs.n	37e6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    37ce:	697c      	ldr	r4, [r7, #20]
    37d0:	68fa      	ldr	r2, [r7, #12]
    37d2:	1c53      	adds	r3, r2, #1
    37d4:	60fb      	str	r3, [r7, #12]
    37d6:	68bb      	ldr	r3, [r7, #8]
    37d8:	6939      	ldr	r1, [r7, #16]
    37da:	2020      	movs	r0, #32
    37dc:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    37de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    37e0:	3301      	adds	r3, #1
    37e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    37e4:	e7ef      	b.n	37c6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    37e6:	2300      	movs	r3, #0
    37e8:	64bb      	str	r3, [r7, #72]	; 0x48
    37ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
    37ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    37ee:	429a      	cmp	r2, r3
    37f0:	d213      	bcs.n	381a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    37f2:	697c      	ldr	r4, [r7, #20]
    37f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    37f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    37f8:	1ad3      	subs	r3, r2, r3
    37fa:	3b01      	subs	r3, #1
    37fc:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3800:	4413      	add	r3, r2
    3802:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    3806:	68fa      	ldr	r2, [r7, #12]
    3808:	1c53      	adds	r3, r2, #1
    380a:	60fb      	str	r3, [r7, #12]
    380c:	68bb      	ldr	r3, [r7, #8]
    380e:	6939      	ldr	r1, [r7, #16]
    3810:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    3812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3814:	3301      	adds	r3, #1
    3816:	64bb      	str	r3, [r7, #72]	; 0x48
    3818:	e7e7      	b.n	37ea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    381a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    381e:	f003 0302 	and.w	r3, r3, #2
    3822:	2b00      	cmp	r3, #0
    3824:	d00e      	beq.n	3844 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    3826:	68fa      	ldr	r2, [r7, #12]
    3828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    382a:	1ad3      	subs	r3, r2, r3
    382c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    382e:	429a      	cmp	r2, r3
    3830:	d908      	bls.n	3844 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    3832:	697c      	ldr	r4, [r7, #20]
    3834:	68fa      	ldr	r2, [r7, #12]
    3836:	1c53      	adds	r3, r2, #1
    3838:	60fb      	str	r3, [r7, #12]
    383a:	68bb      	ldr	r3, [r7, #8]
    383c:	6939      	ldr	r1, [r7, #16]
    383e:	2020      	movs	r0, #32
    3840:	47a0      	blx	r4
    while (idx - start_idx < width) {
    3842:	e7f0      	b.n	3826 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    3844:	68fb      	ldr	r3, [r7, #12]
}
    3846:	4618      	mov	r0, r3
    3848:	376c      	adds	r7, #108	; 0x6c
    384a:	46bd      	mov	sp, r7
    384c:	bd90      	pop	{r4, r7, pc}
    384e:	bf00      	nop

00003850 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    3850:	b5b0      	push	{r4, r5, r7, lr}
    3852:	b0a0      	sub	sp, #128	; 0x80
    3854:	af0a      	add	r7, sp, #40	; 0x28
    3856:	60f8      	str	r0, [r7, #12]
    3858:	60b9      	str	r1, [r7, #8]
    385a:	607a      	str	r2, [r7, #4]
    385c:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    385e:	2300      	movs	r3, #0
    3860:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    3862:	68bb      	ldr	r3, [r7, #8]
    3864:	2b00      	cmp	r3, #0
    3866:	d101      	bne.n	386c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    3868:	4ba2      	ldr	r3, [pc, #648]	; (3af4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    386a:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    386c:	683b      	ldr	r3, [r7, #0]
    386e:	781b      	ldrb	r3, [r3, #0]
    3870:	2b00      	cmp	r3, #0
    3872:	f000 8446 	beq.w	4102 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    3876:	683b      	ldr	r3, [r7, #0]
    3878:	781b      	ldrb	r3, [r3, #0]
    387a:	2b25      	cmp	r3, #37	; 0x25
    387c:	d00d      	beq.n	389a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    387e:	68fc      	ldr	r4, [r7, #12]
    3880:	683b      	ldr	r3, [r7, #0]
    3882:	7818      	ldrb	r0, [r3, #0]
    3884:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3886:	1c53      	adds	r3, r2, #1
    3888:	647b      	str	r3, [r7, #68]	; 0x44
    388a:	687b      	ldr	r3, [r7, #4]
    388c:	68b9      	ldr	r1, [r7, #8]
    388e:	47a0      	blx	r4
      format++;
    3890:	683b      	ldr	r3, [r7, #0]
    3892:	3301      	adds	r3, #1
    3894:	603b      	str	r3, [r7, #0]
      continue;
    3896:	f000 bc32 	b.w	40fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
    }
    else {
      // yes, evaluate it
      format++;
    389a:	683b      	ldr	r3, [r7, #0]
    389c:	3301      	adds	r3, #1
    389e:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    38a0:	2300      	movs	r3, #0
    38a2:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    38a4:	683b      	ldr	r3, [r7, #0]
    38a6:	781b      	ldrb	r3, [r3, #0]
    38a8:	3b20      	subs	r3, #32
    38aa:	2b10      	cmp	r3, #16
    38ac:	d856      	bhi.n	395c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    38ae:	a201      	add	r2, pc, #4	; (adr r2, 38b4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    38b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    38b4:	00003935 	.word	0x00003935
    38b8:	0000395d 	.word	0x0000395d
    38bc:	0000395d 	.word	0x0000395d
    38c0:	00003949 	.word	0x00003949
    38c4:	0000395d 	.word	0x0000395d
    38c8:	0000395d 	.word	0x0000395d
    38cc:	0000395d 	.word	0x0000395d
    38d0:	0000395d 	.word	0x0000395d
    38d4:	0000395d 	.word	0x0000395d
    38d8:	0000395d 	.word	0x0000395d
    38dc:	0000395d 	.word	0x0000395d
    38e0:	00003921 	.word	0x00003921
    38e4:	0000395d 	.word	0x0000395d
    38e8:	0000390d 	.word	0x0000390d
    38ec:	0000395d 	.word	0x0000395d
    38f0:	0000395d 	.word	0x0000395d
    38f4:	000038f9 	.word	0x000038f9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    38f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    38fa:	f043 0301 	orr.w	r3, r3, #1
    38fe:	657b      	str	r3, [r7, #84]	; 0x54
    3900:	683b      	ldr	r3, [r7, #0]
    3902:	3301      	adds	r3, #1
    3904:	603b      	str	r3, [r7, #0]
    3906:	2301      	movs	r3, #1
    3908:	64bb      	str	r3, [r7, #72]	; 0x48
    390a:	e02a      	b.n	3962 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    390c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    390e:	f043 0302 	orr.w	r3, r3, #2
    3912:	657b      	str	r3, [r7, #84]	; 0x54
    3914:	683b      	ldr	r3, [r7, #0]
    3916:	3301      	adds	r3, #1
    3918:	603b      	str	r3, [r7, #0]
    391a:	2301      	movs	r3, #1
    391c:	64bb      	str	r3, [r7, #72]	; 0x48
    391e:	e020      	b.n	3962 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    3920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3922:	f043 0304 	orr.w	r3, r3, #4
    3926:	657b      	str	r3, [r7, #84]	; 0x54
    3928:	683b      	ldr	r3, [r7, #0]
    392a:	3301      	adds	r3, #1
    392c:	603b      	str	r3, [r7, #0]
    392e:	2301      	movs	r3, #1
    3930:	64bb      	str	r3, [r7, #72]	; 0x48
    3932:	e016      	b.n	3962 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    3934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3936:	f043 0308 	orr.w	r3, r3, #8
    393a:	657b      	str	r3, [r7, #84]	; 0x54
    393c:	683b      	ldr	r3, [r7, #0]
    393e:	3301      	adds	r3, #1
    3940:	603b      	str	r3, [r7, #0]
    3942:	2301      	movs	r3, #1
    3944:	64bb      	str	r3, [r7, #72]	; 0x48
    3946:	e00c      	b.n	3962 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    3948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    394a:	f043 0310 	orr.w	r3, r3, #16
    394e:	657b      	str	r3, [r7, #84]	; 0x54
    3950:	683b      	ldr	r3, [r7, #0]
    3952:	3301      	adds	r3, #1
    3954:	603b      	str	r3, [r7, #0]
    3956:	2301      	movs	r3, #1
    3958:	64bb      	str	r3, [r7, #72]	; 0x48
    395a:	e002      	b.n	3962 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    395c:	2300      	movs	r3, #0
    395e:	64bb      	str	r3, [r7, #72]	; 0x48
    3960:	bf00      	nop
      }
    } while (n);
    3962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3964:	2b00      	cmp	r3, #0
    3966:	d000      	beq.n	396a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    3968:	e79c      	b.n	38a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    396a:	2300      	movs	r3, #0
    396c:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    396e:	683b      	ldr	r3, [r7, #0]
    3970:	781b      	ldrb	r3, [r3, #0]
    3972:	4618      	mov	r0, r3
    3974:	f7ff fb1a 	bl	2fac <_is_digit(char)>
    3978:	4603      	mov	r3, r0
    397a:	2b00      	cmp	r3, #0
    397c:	d005      	beq.n	398a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    397e:	463b      	mov	r3, r7
    3980:	4618      	mov	r0, r3
    3982:	f7ff fb27 	bl	2fd4 <_atoi(char const**)>
    3986:	6538      	str	r0, [r7, #80]	; 0x50
    3988:	e018      	b.n	39bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    398a:	683b      	ldr	r3, [r7, #0]
    398c:	781b      	ldrb	r3, [r3, #0]
    398e:	2b2a      	cmp	r3, #42	; 0x2a
    3990:	d114      	bne.n	39bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    3992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3994:	1d1a      	adds	r2, r3, #4
    3996:	66ba      	str	r2, [r7, #104]	; 0x68
    3998:	681b      	ldr	r3, [r3, #0]
    399a:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    399e:	2b00      	cmp	r3, #0
    39a0:	da07      	bge.n	39b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    39a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    39a4:	f043 0302 	orr.w	r3, r3, #2
    39a8:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    39aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39ac:	425b      	negs	r3, r3
    39ae:	653b      	str	r3, [r7, #80]	; 0x50
    39b0:	e001      	b.n	39b6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    39b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39b4:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    39b6:	683b      	ldr	r3, [r7, #0]
    39b8:	3301      	adds	r3, #1
    39ba:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    39bc:	2300      	movs	r3, #0
    39be:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    39c0:	683b      	ldr	r3, [r7, #0]
    39c2:	781b      	ldrb	r3, [r3, #0]
    39c4:	2b2e      	cmp	r3, #46	; 0x2e
    39c6:	d124      	bne.n	3a12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    39c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    39ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    39ce:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    39d0:	683b      	ldr	r3, [r7, #0]
    39d2:	3301      	adds	r3, #1
    39d4:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    39d6:	683b      	ldr	r3, [r7, #0]
    39d8:	781b      	ldrb	r3, [r3, #0]
    39da:	4618      	mov	r0, r3
    39dc:	f7ff fae6 	bl	2fac <_is_digit(char)>
    39e0:	4603      	mov	r3, r0
    39e2:	2b00      	cmp	r3, #0
    39e4:	d005      	beq.n	39f2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    39e6:	463b      	mov	r3, r7
    39e8:	4618      	mov	r0, r3
    39ea:	f7ff faf3 	bl	2fd4 <_atoi(char const**)>
    39ee:	64f8      	str	r0, [r7, #76]	; 0x4c
    39f0:	e00f      	b.n	3a12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    39f2:	683b      	ldr	r3, [r7, #0]
    39f4:	781b      	ldrb	r3, [r3, #0]
    39f6:	2b2a      	cmp	r3, #42	; 0x2a
    39f8:	d10b      	bne.n	3a12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    39fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    39fc:	1d1a      	adds	r2, r3, #4
    39fe:	66ba      	str	r2, [r7, #104]	; 0x68
    3a00:	681b      	ldr	r3, [r3, #0]
    3a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    3a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    3a0c:	683b      	ldr	r3, [r7, #0]
    3a0e:	3301      	adds	r3, #1
    3a10:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    3a12:	683b      	ldr	r3, [r7, #0]
    3a14:	781b      	ldrb	r3, [r3, #0]
    3a16:	3b68      	subs	r3, #104	; 0x68
    3a18:	2b12      	cmp	r3, #18
    3a1a:	d867      	bhi.n	3aec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    3a1c:	a201      	add	r2, pc, #4	; (adr r2, 3a24 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    3a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3a22:	bf00      	nop
    3a24:	00003a97 	.word	0x00003a97
    3a28:	00003aed 	.word	0x00003aed
    3a2c:	00003acd 	.word	0x00003acd
    3a30:	00003aed 	.word	0x00003aed
    3a34:	00003a71 	.word	0x00003a71
    3a38:	00003aed 	.word	0x00003aed
    3a3c:	00003aed 	.word	0x00003aed
    3a40:	00003aed 	.word	0x00003aed
    3a44:	00003aed 	.word	0x00003aed
    3a48:	00003aed 	.word	0x00003aed
    3a4c:	00003aed 	.word	0x00003aed
    3a50:	00003aed 	.word	0x00003aed
    3a54:	00003abd 	.word	0x00003abd
    3a58:	00003aed 	.word	0x00003aed
    3a5c:	00003aed 	.word	0x00003aed
    3a60:	00003aed 	.word	0x00003aed
    3a64:	00003aed 	.word	0x00003aed
    3a68:	00003aed 	.word	0x00003aed
    3a6c:	00003add 	.word	0x00003add
      case 'l' :
        flags |= FLAGS_LONG;
    3a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3a76:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3a78:	683b      	ldr	r3, [r7, #0]
    3a7a:	3301      	adds	r3, #1
    3a7c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    3a7e:	683b      	ldr	r3, [r7, #0]
    3a80:	781b      	ldrb	r3, [r3, #0]
    3a82:	2b6c      	cmp	r3, #108	; 0x6c
    3a84:	d134      	bne.n	3af0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    3a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3a8c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    3a8e:	683b      	ldr	r3, [r7, #0]
    3a90:	3301      	adds	r3, #1
    3a92:	603b      	str	r3, [r7, #0]
        }
        break;
    3a94:	e02c      	b.n	3af0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    3a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3a9c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3a9e:	683b      	ldr	r3, [r7, #0]
    3aa0:	3301      	adds	r3, #1
    3aa2:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    3aa4:	683b      	ldr	r3, [r7, #0]
    3aa6:	781b      	ldrb	r3, [r3, #0]
    3aa8:	2b68      	cmp	r3, #104	; 0x68
    3aaa:	d125      	bne.n	3af8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    3aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3ab2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    3ab4:	683b      	ldr	r3, [r7, #0]
    3ab6:	3301      	adds	r3, #1
    3ab8:	603b      	str	r3, [r7, #0]
        }
        break;
    3aba:	e01d      	b.n	3af8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3ac2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3ac4:	683b      	ldr	r3, [r7, #0]
    3ac6:	3301      	adds	r3, #1
    3ac8:	603b      	str	r3, [r7, #0]
        break;
    3aca:	e016      	b.n	3afa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3ad2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3ad4:	683b      	ldr	r3, [r7, #0]
    3ad6:	3301      	adds	r3, #1
    3ad8:	603b      	str	r3, [r7, #0]
        break;
    3ada:	e00e      	b.n	3afa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3ae2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3ae4:	683b      	ldr	r3, [r7, #0]
    3ae6:	3301      	adds	r3, #1
    3ae8:	603b      	str	r3, [r7, #0]
        break;
    3aea:	e006      	b.n	3afa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    3aec:	bf00      	nop
    3aee:	e004      	b.n	3afa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    3af0:	bf00      	nop
    3af2:	e002      	b.n	3afa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    3af4:	00002f63 	.word	0x00002f63
        break;
    3af8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    3afa:	683b      	ldr	r3, [r7, #0]
    3afc:	781b      	ldrb	r3, [r3, #0]
    3afe:	3b25      	subs	r3, #37	; 0x25
    3b00:	2b53      	cmp	r3, #83	; 0x53
    3b02:	f200 82ef 	bhi.w	40e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x894>
    3b06:	a201      	add	r2, pc, #4	; (adr r2, 3b0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    3b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3b0c:	000040cd 	.word	0x000040cd
    3b10:	000040e5 	.word	0x000040e5
    3b14:	000040e5 	.word	0x000040e5
    3b18:	000040e5 	.word	0x000040e5
    3b1c:	000040e5 	.word	0x000040e5
    3b20:	000040e5 	.word	0x000040e5
    3b24:	000040e5 	.word	0x000040e5
    3b28:	000040e5 	.word	0x000040e5
    3b2c:	000040e5 	.word	0x000040e5
    3b30:	000040e5 	.word	0x000040e5
    3b34:	000040e5 	.word	0x000040e5
    3b38:	000040e5 	.word	0x000040e5
    3b3c:	000040e5 	.word	0x000040e5
    3b40:	000040e5 	.word	0x000040e5
    3b44:	000040e5 	.word	0x000040e5
    3b48:	000040e5 	.word	0x000040e5
    3b4c:	000040e5 	.word	0x000040e5
    3b50:	000040e5 	.word	0x000040e5
    3b54:	000040e5 	.word	0x000040e5
    3b58:	000040e5 	.word	0x000040e5
    3b5c:	000040e5 	.word	0x000040e5
    3b60:	000040e5 	.word	0x000040e5
    3b64:	000040e5 	.word	0x000040e5
    3b68:	000040e5 	.word	0x000040e5
    3b6c:	000040e5 	.word	0x000040e5
    3b70:	000040e5 	.word	0x000040e5
    3b74:	000040e5 	.word	0x000040e5
    3b78:	000040e5 	.word	0x000040e5
    3b7c:	000040e5 	.word	0x000040e5
    3b80:	000040e5 	.word	0x000040e5
    3b84:	000040e5 	.word	0x000040e5
    3b88:	000040e5 	.word	0x000040e5
    3b8c:	000040e5 	.word	0x000040e5
    3b90:	00003eeb 	.word	0x00003eeb
    3b94:	000040e5 	.word	0x000040e5
    3b98:	000040e5 	.word	0x000040e5
    3b9c:	000040e5 	.word	0x000040e5
    3ba0:	000040e5 	.word	0x000040e5
    3ba4:	000040e5 	.word	0x000040e5
    3ba8:	000040e5 	.word	0x000040e5
    3bac:	000040e5 	.word	0x000040e5
    3bb0:	000040e5 	.word	0x000040e5
    3bb4:	000040e5 	.word	0x000040e5
    3bb8:	000040e5 	.word	0x000040e5
    3bbc:	000040e5 	.word	0x000040e5
    3bc0:	000040e5 	.word	0x000040e5
    3bc4:	000040e5 	.word	0x000040e5
    3bc8:	000040e5 	.word	0x000040e5
    3bcc:	000040e5 	.word	0x000040e5
    3bd0:	000040e5 	.word	0x000040e5
    3bd4:	000040e5 	.word	0x000040e5
    3bd8:	00003c5d 	.word	0x00003c5d
    3bdc:	000040e5 	.word	0x000040e5
    3be0:	000040e5 	.word	0x000040e5
    3be4:	000040e5 	.word	0x000040e5
    3be8:	000040e5 	.word	0x000040e5
    3bec:	000040e5 	.word	0x000040e5
    3bf0:	000040e5 	.word	0x000040e5
    3bf4:	000040e5 	.word	0x000040e5
    3bf8:	000040e5 	.word	0x000040e5
    3bfc:	000040e5 	.word	0x000040e5
    3c00:	00003c5d 	.word	0x00003c5d
    3c04:	00003f27 	.word	0x00003f27
    3c08:	00003c5d 	.word	0x00003c5d
    3c0c:	000040e5 	.word	0x000040e5
    3c10:	00003eeb 	.word	0x00003eeb
    3c14:	000040e5 	.word	0x000040e5
    3c18:	000040e5 	.word	0x000040e5
    3c1c:	00003c5d 	.word	0x00003c5d
    3c20:	000040e5 	.word	0x000040e5
    3c24:	000040e5 	.word	0x000040e5
    3c28:	000040e5 	.word	0x000040e5
    3c2c:	000040e5 	.word	0x000040e5
    3c30:	000040e5 	.word	0x000040e5
    3c34:	00003c5d 	.word	0x00003c5d
    3c38:	00004085 	.word	0x00004085
    3c3c:	000040e5 	.word	0x000040e5
    3c40:	000040e5 	.word	0x000040e5
    3c44:	00003faf 	.word	0x00003faf
    3c48:	000040e5 	.word	0x000040e5
    3c4c:	00003c5d 	.word	0x00003c5d
    3c50:	000040e5 	.word	0x000040e5
    3c54:	000040e5 	.word	0x000040e5
    3c58:	00003c5d 	.word	0x00003c5d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    3c5c:	683b      	ldr	r3, [r7, #0]
    3c5e:	781b      	ldrb	r3, [r3, #0]
    3c60:	2b78      	cmp	r3, #120	; 0x78
    3c62:	d003      	beq.n	3c6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    3c64:	683b      	ldr	r3, [r7, #0]
    3c66:	781b      	ldrb	r3, [r3, #0]
    3c68:	2b58      	cmp	r3, #88	; 0x58
    3c6a:	d102      	bne.n	3c72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    3c6c:	2310      	movs	r3, #16
    3c6e:	643b      	str	r3, [r7, #64]	; 0x40
    3c70:	e013      	b.n	3c9a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    3c72:	683b      	ldr	r3, [r7, #0]
    3c74:	781b      	ldrb	r3, [r3, #0]
    3c76:	2b6f      	cmp	r3, #111	; 0x6f
    3c78:	d102      	bne.n	3c80 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    3c7a:	2308      	movs	r3, #8
    3c7c:	643b      	str	r3, [r7, #64]	; 0x40
    3c7e:	e00c      	b.n	3c9a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    3c80:	683b      	ldr	r3, [r7, #0]
    3c82:	781b      	ldrb	r3, [r3, #0]
    3c84:	2b62      	cmp	r3, #98	; 0x62
    3c86:	d102      	bne.n	3c8e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    3c88:	2302      	movs	r3, #2
    3c8a:	643b      	str	r3, [r7, #64]	; 0x40
    3c8c:	e005      	b.n	3c9a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    3c8e:	230a      	movs	r3, #10
    3c90:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    3c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c94:	f023 0310 	bic.w	r3, r3, #16
    3c98:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    3c9a:	683b      	ldr	r3, [r7, #0]
    3c9c:	781b      	ldrb	r3, [r3, #0]
    3c9e:	2b58      	cmp	r3, #88	; 0x58
    3ca0:	d103      	bne.n	3caa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    3ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ca4:	f043 0320 	orr.w	r3, r3, #32
    3ca8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    3caa:	683b      	ldr	r3, [r7, #0]
    3cac:	781b      	ldrb	r3, [r3, #0]
    3cae:	2b69      	cmp	r3, #105	; 0x69
    3cb0:	d007      	beq.n	3cc2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    3cb2:	683b      	ldr	r3, [r7, #0]
    3cb4:	781b      	ldrb	r3, [r3, #0]
    3cb6:	2b64      	cmp	r3, #100	; 0x64
    3cb8:	d003      	beq.n	3cc2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    3cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3cbc:	f023 030c 	bic.w	r3, r3, #12
    3cc0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    3cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3cc8:	2b00      	cmp	r3, #0
    3cca:	d003      	beq.n	3cd4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    3ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3cce:	f023 0301 	bic.w	r3, r3, #1
    3cd2:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    3cd4:	683b      	ldr	r3, [r7, #0]
    3cd6:	781b      	ldrb	r3, [r3, #0]
    3cd8:	2b69      	cmp	r3, #105	; 0x69
    3cda:	d004      	beq.n	3ce6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    3cdc:	683b      	ldr	r3, [r7, #0]
    3cde:	781b      	ldrb	r3, [r3, #0]
    3ce0:	2b64      	cmp	r3, #100	; 0x64
    3ce2:	f040 808e 	bne.w	3e02 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b2>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    3ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3cec:	2b00      	cmp	r3, #0
    3cee:	d02f      	beq.n	3d50 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x500>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    3cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3cf2:	3307      	adds	r3, #7
    3cf4:	f023 0307 	bic.w	r3, r3, #7
    3cf8:	f103 0208 	add.w	r2, r3, #8
    3cfc:	66ba      	str	r2, [r7, #104]	; 0x68
    3cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d02:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3d06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    3d0a:	2a00      	cmp	r2, #0
    3d0c:	f173 0100 	sbcs.w	r1, r3, #0
    3d10:	da02      	bge.n	3d18 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    3d12:	4252      	negs	r2, r2
    3d14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3d18:	4610      	mov	r0, r2
    3d1a:	4619      	mov	r1, r3
    3d1c:	697b      	ldr	r3, [r7, #20]
    3d1e:	0fdb      	lsrs	r3, r3, #31
    3d20:	b2dc      	uxtb	r4, r3
    3d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3d24:	461a      	mov	r2, r3
    3d26:	f04f 0300 	mov.w	r3, #0
    3d2a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    3d2c:	9508      	str	r5, [sp, #32]
    3d2e:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    3d30:	9507      	str	r5, [sp, #28]
    3d32:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    3d34:	9506      	str	r5, [sp, #24]
    3d36:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3d3a:	9402      	str	r4, [sp, #8]
    3d3c:	e9cd 0100 	strd	r0, r1, [sp]
    3d40:	687b      	ldr	r3, [r7, #4]
    3d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3d44:	68b9      	ldr	r1, [r7, #8]
    3d46:	68f8      	ldr	r0, [r7, #12]
    3d48:	f7ff faf1 	bl	332e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    3d4c:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    3d4e:	e0c8      	b.n	3ee2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
          else if (flags & FLAGS_LONG) {
    3d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3d56:	2b00      	cmp	r3, #0
    3d58:	d01e      	beq.n	3d98 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x548>
            const long value = va_arg(va, long);
    3d5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3d5c:	1d1a      	adds	r2, r3, #4
    3d5e:	66ba      	str	r2, [r7, #104]	; 0x68
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3d64:	69fb      	ldr	r3, [r7, #28]
    3d66:	2b00      	cmp	r3, #0
    3d68:	bfb8      	it	lt
    3d6a:	425b      	neglt	r3, r3
    3d6c:	4619      	mov	r1, r3
    3d6e:	69fb      	ldr	r3, [r7, #28]
    3d70:	0fdb      	lsrs	r3, r3, #31
    3d72:	b2db      	uxtb	r3, r3
    3d74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3d76:	9205      	str	r2, [sp, #20]
    3d78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3d7a:	9204      	str	r2, [sp, #16]
    3d7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3d7e:	9203      	str	r2, [sp, #12]
    3d80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3d82:	9202      	str	r2, [sp, #8]
    3d84:	9301      	str	r3, [sp, #4]
    3d86:	9100      	str	r1, [sp, #0]
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3d8c:	68b9      	ldr	r1, [r7, #8]
    3d8e:	68f8      	ldr	r0, [r7, #12]
    3d90:	f7ff fa65 	bl	325e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3d94:	6478      	str	r0, [r7, #68]	; 0x44
          }
    3d96:	e0a4      	b.n	3ee2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3d9e:	2b00      	cmp	r3, #0
    3da0:	d005      	beq.n	3dae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55e>
    3da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3da4:	1d1a      	adds	r2, r3, #4
    3da6:	66ba      	str	r2, [r7, #104]	; 0x68
    3da8:	681b      	ldr	r3, [r3, #0]
    3daa:	b2db      	uxtb	r3, r3
    3dac:	e00e      	b.n	3dcc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57c>
    3dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3db4:	2b00      	cmp	r3, #0
    3db6:	d005      	beq.n	3dc4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x574>
    3db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3dba:	1d1a      	adds	r2, r3, #4
    3dbc:	66ba      	str	r2, [r7, #104]	; 0x68
    3dbe:	681b      	ldr	r3, [r3, #0]
    3dc0:	b21b      	sxth	r3, r3
    3dc2:	e003      	b.n	3dcc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57c>
    3dc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3dc6:	1d1a      	adds	r2, r3, #4
    3dc8:	66ba      	str	r2, [r7, #104]	; 0x68
    3dca:	681b      	ldr	r3, [r3, #0]
    3dcc:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3dce:	6a3b      	ldr	r3, [r7, #32]
    3dd0:	2b00      	cmp	r3, #0
    3dd2:	bfb8      	it	lt
    3dd4:	425b      	neglt	r3, r3
    3dd6:	4619      	mov	r1, r3
    3dd8:	6a3b      	ldr	r3, [r7, #32]
    3dda:	0fdb      	lsrs	r3, r3, #31
    3ddc:	b2db      	uxtb	r3, r3
    3dde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3de0:	9205      	str	r2, [sp, #20]
    3de2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3de4:	9204      	str	r2, [sp, #16]
    3de6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3de8:	9203      	str	r2, [sp, #12]
    3dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3dec:	9202      	str	r2, [sp, #8]
    3dee:	9301      	str	r3, [sp, #4]
    3df0:	9100      	str	r1, [sp, #0]
    3df2:	687b      	ldr	r3, [r7, #4]
    3df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3df6:	68b9      	ldr	r1, [r7, #8]
    3df8:	68f8      	ldr	r0, [r7, #12]
    3dfa:	f7ff fa30 	bl	325e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3dfe:	6478      	str	r0, [r7, #68]	; 0x44
          }
    3e00:	e06f      	b.n	3ee2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    3e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3e08:	2b00      	cmp	r3, #0
    3e0a:	d020      	beq.n	3e4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    3e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3e0e:	3307      	adds	r3, #7
    3e10:	f023 0307 	bic.w	r3, r3, #7
    3e14:	f103 0208 	add.w	r2, r3, #8
    3e18:	66ba      	str	r2, [r7, #104]	; 0x68
    3e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3e20:	4608      	mov	r0, r1
    3e22:	f04f 0100 	mov.w	r1, #0
    3e26:	6d7c      	ldr	r4, [r7, #84]	; 0x54
    3e28:	9408      	str	r4, [sp, #32]
    3e2a:	6d3c      	ldr	r4, [r7, #80]	; 0x50
    3e2c:	9407      	str	r4, [sp, #28]
    3e2e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    3e30:	9406      	str	r4, [sp, #24]
    3e32:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3e36:	2100      	movs	r1, #0
    3e38:	9102      	str	r1, [sp, #8]
    3e3a:	e9cd 2300 	strd	r2, r3, [sp]
    3e3e:	687b      	ldr	r3, [r7, #4]
    3e40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3e42:	68b9      	ldr	r1, [r7, #8]
    3e44:	68f8      	ldr	r0, [r7, #12]
    3e46:	f7ff fa72 	bl	332e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    3e4a:	6478      	str	r0, [r7, #68]	; 0x44
    3e4c:	e049      	b.n	3ee2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
#endif
          }
          else if (flags & FLAGS_LONG) {
    3e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3e54:	2b00      	cmp	r3, #0
    3e56:	d016      	beq.n	3e86 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x636>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3e5a:	1d1a      	adds	r2, r3, #4
    3e5c:	66ba      	str	r2, [r7, #104]	; 0x68
    3e5e:	681b      	ldr	r3, [r3, #0]
    3e60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3e62:	9205      	str	r2, [sp, #20]
    3e64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3e66:	9204      	str	r2, [sp, #16]
    3e68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3e6a:	9203      	str	r2, [sp, #12]
    3e6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3e6e:	9202      	str	r2, [sp, #8]
    3e70:	2200      	movs	r2, #0
    3e72:	9201      	str	r2, [sp, #4]
    3e74:	9300      	str	r3, [sp, #0]
    3e76:	687b      	ldr	r3, [r7, #4]
    3e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3e7a:	68b9      	ldr	r1, [r7, #8]
    3e7c:	68f8      	ldr	r0, [r7, #12]
    3e7e:	f7ff f9ee 	bl	325e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3e82:	6478      	str	r0, [r7, #68]	; 0x44
    3e84:	e02d      	b.n	3ee2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d005      	beq.n	3e9c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64c>
    3e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3e92:	1d1a      	adds	r2, r3, #4
    3e94:	66ba      	str	r2, [r7, #104]	; 0x68
    3e96:	681b      	ldr	r3, [r3, #0]
    3e98:	b2db      	uxtb	r3, r3
    3e9a:	e00e      	b.n	3eba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x66a>
    3e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d005      	beq.n	3eb2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x662>
    3ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3ea8:	1d1a      	adds	r2, r3, #4
    3eaa:	66ba      	str	r2, [r7, #104]	; 0x68
    3eac:	681b      	ldr	r3, [r3, #0]
    3eae:	b29b      	uxth	r3, r3
    3eb0:	e003      	b.n	3eba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x66a>
    3eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3eb4:	1d1a      	adds	r2, r3, #4
    3eb6:	66ba      	str	r2, [r7, #104]	; 0x68
    3eb8:	681b      	ldr	r3, [r3, #0]
    3eba:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ebe:	9305      	str	r3, [sp, #20]
    3ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3ec2:	9304      	str	r3, [sp, #16]
    3ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3ec6:	9303      	str	r3, [sp, #12]
    3ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3eca:	9302      	str	r3, [sp, #8]
    3ecc:	2300      	movs	r3, #0
    3ece:	9301      	str	r3, [sp, #4]
    3ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ed2:	9300      	str	r3, [sp, #0]
    3ed4:	687b      	ldr	r3, [r7, #4]
    3ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3ed8:	68b9      	ldr	r1, [r7, #8]
    3eda:	68f8      	ldr	r0, [r7, #12]
    3edc:	f7ff f9bf 	bl	325e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3ee0:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    3ee2:	683b      	ldr	r3, [r7, #0]
    3ee4:	3301      	adds	r3, #1
    3ee6:	603b      	str	r3, [r7, #0]
        break;
    3ee8:	e109      	b.n	40fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3eec:	3307      	adds	r3, #7
    3eee:	f023 0307 	bic.w	r3, r3, #7
    3ef2:	f103 0208 	add.w	r2, r3, #8
    3ef6:	66ba      	str	r2, [r7, #104]	; 0x68
    3ef8:	ed93 7b00 	vldr	d7, [r3]
    3efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3efe:	9302      	str	r3, [sp, #8]
    3f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3f02:	9301      	str	r3, [sp, #4]
    3f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3f06:	9300      	str	r3, [sp, #0]
    3f08:	eeb0 0a47 	vmov.f32	s0, s14
    3f0c:	eef0 0a67 	vmov.f32	s1, s15
    3f10:	687b      	ldr	r3, [r7, #4]
    3f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3f14:	68b9      	ldr	r1, [r7, #8]
    3f16:	68f8      	ldr	r0, [r7, #12]
    3f18:	f7ff fa78 	bl	340c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    3f1c:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    3f1e:	683b      	ldr	r3, [r7, #0]
    3f20:	3301      	adds	r3, #1
    3f22:	603b      	str	r3, [r7, #0]
        break;
    3f24:	e0eb      	b.n	40fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    3f26:	2301      	movs	r3, #1
    3f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    3f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f2c:	f003 0302 	and.w	r3, r3, #2
    3f30:	2b00      	cmp	r3, #0
    3f32:	d113      	bne.n	3f5c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70c>
          while (l++ < width) {
    3f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f36:	1c5a      	adds	r2, r3, #1
    3f38:	63fa      	str	r2, [r7, #60]	; 0x3c
    3f3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3f3c:	429a      	cmp	r2, r3
    3f3e:	bf8c      	ite	hi
    3f40:	2301      	movhi	r3, #1
    3f42:	2300      	movls	r3, #0
    3f44:	b2db      	uxtb	r3, r3
    3f46:	2b00      	cmp	r3, #0
    3f48:	d008      	beq.n	3f5c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70c>
            out(' ', buffer, idx++, maxlen);
    3f4a:	68fc      	ldr	r4, [r7, #12]
    3f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3f4e:	1c53      	adds	r3, r2, #1
    3f50:	647b      	str	r3, [r7, #68]	; 0x44
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	68b9      	ldr	r1, [r7, #8]
    3f56:	2020      	movs	r0, #32
    3f58:	47a0      	blx	r4
          while (l++ < width) {
    3f5a:	e7eb      	b.n	3f34 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e4>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    3f5c:	68fc      	ldr	r4, [r7, #12]
    3f5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3f60:	1d1a      	adds	r2, r3, #4
    3f62:	66ba      	str	r2, [r7, #104]	; 0x68
    3f64:	681b      	ldr	r3, [r3, #0]
    3f66:	b2d8      	uxtb	r0, r3
    3f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3f6a:	1c53      	adds	r3, r2, #1
    3f6c:	647b      	str	r3, [r7, #68]	; 0x44
    3f6e:	687b      	ldr	r3, [r7, #4]
    3f70:	68b9      	ldr	r1, [r7, #8]
    3f72:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    3f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f76:	f003 0302 	and.w	r3, r3, #2
    3f7a:	2b00      	cmp	r3, #0
    3f7c:	d013      	beq.n	3fa6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x756>
          while (l++ < width) {
    3f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f80:	1c5a      	adds	r2, r3, #1
    3f82:	63fa      	str	r2, [r7, #60]	; 0x3c
    3f84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3f86:	429a      	cmp	r2, r3
    3f88:	bf8c      	ite	hi
    3f8a:	2301      	movhi	r3, #1
    3f8c:	2300      	movls	r3, #0
    3f8e:	b2db      	uxtb	r3, r3
    3f90:	2b00      	cmp	r3, #0
    3f92:	d008      	beq.n	3fa6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x756>
            out(' ', buffer, idx++, maxlen);
    3f94:	68fc      	ldr	r4, [r7, #12]
    3f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3f98:	1c53      	adds	r3, r2, #1
    3f9a:	647b      	str	r3, [r7, #68]	; 0x44
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	68b9      	ldr	r1, [r7, #8]
    3fa0:	2020      	movs	r0, #32
    3fa2:	47a0      	blx	r4
          while (l++ < width) {
    3fa4:	e7eb      	b.n	3f7e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72e>
          }
        }
        format++;
    3fa6:	683b      	ldr	r3, [r7, #0]
    3fa8:	3301      	adds	r3, #1
    3faa:	603b      	str	r3, [r7, #0]
        break;
    3fac:	e0a7      	b.n	40fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    3fae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3fb0:	1d1a      	adds	r2, r3, #4
    3fb2:	66ba      	str	r2, [r7, #104]	; 0x68
    3fb4:	681b      	ldr	r3, [r3, #0]
    3fb6:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    3fb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3fba:	f7fe ffe0 	bl	2f7e <_strlen(char const*)>
    3fbe:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    3fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	d007      	beq.n	3fda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x78a>
          l = (l < precision ? l : precision);
    3fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3fce:	429a      	cmp	r2, r3
    3fd0:	d201      	bcs.n	3fd6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    3fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fd4:	e000      	b.n	3fd8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
    3fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3fd8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    3fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3fdc:	f003 0302 	and.w	r3, r3, #2
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	d113      	bne.n	400c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
          while (l++ < width) {
    3fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fe6:	1c5a      	adds	r2, r3, #1
    3fe8:	637a      	str	r2, [r7, #52]	; 0x34
    3fea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3fec:	429a      	cmp	r2, r3
    3fee:	bf8c      	ite	hi
    3ff0:	2301      	movhi	r3, #1
    3ff2:	2300      	movls	r3, #0
    3ff4:	b2db      	uxtb	r3, r3
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d008      	beq.n	400c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
            out(' ', buffer, idx++, maxlen);
    3ffa:	68fc      	ldr	r4, [r7, #12]
    3ffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3ffe:	1c53      	adds	r3, r2, #1
    4000:	647b      	str	r3, [r7, #68]	; 0x44
    4002:	687b      	ldr	r3, [r7, #4]
    4004:	68b9      	ldr	r1, [r7, #8]
    4006:	2020      	movs	r0, #32
    4008:	47a0      	blx	r4
          while (l++ < width) {
    400a:	e7eb      	b.n	3fe4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    400e:	781b      	ldrb	r3, [r3, #0]
    4010:	2b00      	cmp	r3, #0
    4012:	d00b      	beq.n	402c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    4014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    401a:	2b00      	cmp	r3, #0
    401c:	d004      	beq.n	4028 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d8>
    401e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4020:	1e5a      	subs	r2, r3, #1
    4022:	64fa      	str	r2, [r7, #76]	; 0x4c
    4024:	2b00      	cmp	r3, #0
    4026:	d001      	beq.n	402c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    4028:	2301      	movs	r3, #1
    402a:	e000      	b.n	402e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7de>
    402c:	2300      	movs	r3, #0
    402e:	2b00      	cmp	r3, #0
    4030:	d00b      	beq.n	404a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7fa>
          out(*(p++), buffer, idx++, maxlen);
    4032:	68fc      	ldr	r4, [r7, #12]
    4034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4036:	1c5a      	adds	r2, r3, #1
    4038:	63ba      	str	r2, [r7, #56]	; 0x38
    403a:	7818      	ldrb	r0, [r3, #0]
    403c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    403e:	1c53      	adds	r3, r2, #1
    4040:	647b      	str	r3, [r7, #68]	; 0x44
    4042:	687b      	ldr	r3, [r7, #4]
    4044:	68b9      	ldr	r1, [r7, #8]
    4046:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    4048:	e7e0      	b.n	400c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    404a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    404c:	f003 0302 	and.w	r3, r3, #2
    4050:	2b00      	cmp	r3, #0
    4052:	d013      	beq.n	407c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82c>
          while (l++ < width) {
    4054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4056:	1c5a      	adds	r2, r3, #1
    4058:	637a      	str	r2, [r7, #52]	; 0x34
    405a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    405c:	429a      	cmp	r2, r3
    405e:	bf8c      	ite	hi
    4060:	2301      	movhi	r3, #1
    4062:	2300      	movls	r3, #0
    4064:	b2db      	uxtb	r3, r3
    4066:	2b00      	cmp	r3, #0
    4068:	d008      	beq.n	407c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82c>
            out(' ', buffer, idx++, maxlen);
    406a:	68fc      	ldr	r4, [r7, #12]
    406c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    406e:	1c53      	adds	r3, r2, #1
    4070:	647b      	str	r3, [r7, #68]	; 0x44
    4072:	687b      	ldr	r3, [r7, #4]
    4074:	68b9      	ldr	r1, [r7, #8]
    4076:	2020      	movs	r0, #32
    4078:	47a0      	blx	r4
          while (l++ < width) {
    407a:	e7eb      	b.n	4054 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x804>
          }
        }
        format++;
    407c:	683b      	ldr	r3, [r7, #0]
    407e:	3301      	adds	r3, #1
    4080:	603b      	str	r3, [r7, #0]
        break;
    4082:	e03c      	b.n	40fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    4084:	2308      	movs	r3, #8
    4086:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    4088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    408a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    408e:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    4090:	2300      	movs	r3, #0
    4092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    4096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4098:	1d1a      	adds	r2, r3, #4
    409a:	66ba      	str	r2, [r7, #104]	; 0x68
    409c:	681b      	ldr	r3, [r3, #0]
    409e:	461a      	mov	r2, r3
    40a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    40a2:	9305      	str	r3, [sp, #20]
    40a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    40a6:	9304      	str	r3, [sp, #16]
    40a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    40aa:	9303      	str	r3, [sp, #12]
    40ac:	2310      	movs	r3, #16
    40ae:	9302      	str	r3, [sp, #8]
    40b0:	2300      	movs	r3, #0
    40b2:	9301      	str	r3, [sp, #4]
    40b4:	9200      	str	r2, [sp, #0]
    40b6:	687b      	ldr	r3, [r7, #4]
    40b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    40ba:	68b9      	ldr	r1, [r7, #8]
    40bc:	68f8      	ldr	r0, [r7, #12]
    40be:	f7ff f8ce 	bl	325e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    40c2:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    40c4:	683b      	ldr	r3, [r7, #0]
    40c6:	3301      	adds	r3, #1
    40c8:	603b      	str	r3, [r7, #0]
        break;
    40ca:	e018      	b.n	40fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    40cc:	68fc      	ldr	r4, [r7, #12]
    40ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    40d0:	1c53      	adds	r3, r2, #1
    40d2:	647b      	str	r3, [r7, #68]	; 0x44
    40d4:	687b      	ldr	r3, [r7, #4]
    40d6:	68b9      	ldr	r1, [r7, #8]
    40d8:	2025      	movs	r0, #37	; 0x25
    40da:	47a0      	blx	r4
        format++;
    40dc:	683b      	ldr	r3, [r7, #0]
    40de:	3301      	adds	r3, #1
    40e0:	603b      	str	r3, [r7, #0]
        break;
    40e2:	e00c      	b.n	40fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>

      default :
        out(*format, buffer, idx++, maxlen);
    40e4:	68fc      	ldr	r4, [r7, #12]
    40e6:	683b      	ldr	r3, [r7, #0]
    40e8:	7818      	ldrb	r0, [r3, #0]
    40ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    40ec:	1c53      	adds	r3, r2, #1
    40ee:	647b      	str	r3, [r7, #68]	; 0x44
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	68b9      	ldr	r1, [r7, #8]
    40f4:	47a0      	blx	r4
        format++;
    40f6:	683b      	ldr	r3, [r7, #0]
    40f8:	3301      	adds	r3, #1
    40fa:	603b      	str	r3, [r7, #0]
        break;
    40fc:	bf00      	nop
  while (*format)
    40fe:	f7ff bbb5 	b.w	386c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    4102:	68fc      	ldr	r4, [r7, #12]
    4104:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	429a      	cmp	r2, r3
    410a:	d302      	bcc.n	4112 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c2>
    410c:	687b      	ldr	r3, [r7, #4]
    410e:	1e5a      	subs	r2, r3, #1
    4110:	e000      	b.n	4114 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c4>
    4112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	68b9      	ldr	r1, [r7, #8]
    4118:	2000      	movs	r0, #0
    411a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    411c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    411e:	4618      	mov	r0, r3
    4120:	3758      	adds	r7, #88	; 0x58
    4122:	46bd      	mov	sp, r7
    4124:	bdb0      	pop	{r4, r5, r7, pc}
    4126:	bf00      	nop

00004128 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    4128:	b40f      	push	{r0, r1, r2, r3}
    412a:	b580      	push	{r7, lr}
    412c:	b0c4      	sub	sp, #272	; 0x110
    412e:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    4130:	f507 738a 	add.w	r3, r7, #276	; 0x114
    4134:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    4138:	4639      	mov	r1, r7
    413a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    413e:	9300      	str	r3, [sp, #0]
    4140:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    4144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4148:	4807      	ldr	r0, [pc, #28]	; (4168 <printf+0x40>)
    414a:	f7ff fb81 	bl	3850 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    414e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    4152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    4156:	4618      	mov	r0, r3
    4158:	f507 7784 	add.w	r7, r7, #264	; 0x108
    415c:	46bd      	mov	sp, r7
    415e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    4162:	b004      	add	sp, #16
    4164:	4770      	bx	lr
    4166:	bf00      	nop
    4168:	00002ef1 	.word	0x00002ef1

0000416c <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    416c:	b480      	push	{r7}
    416e:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    4170:	bf00      	nop
    4172:	46bd      	mov	sp, r7
    4174:	f85d 7b04 	ldr.w	r7, [sp], #4
    4178:	4770      	bx	lr

0000417a <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    417a:	b580      	push	{r7, lr}
    417c:	b082      	sub	sp, #8
    417e:	af00      	add	r7, sp, #0
    4180:	6078      	str	r0, [r7, #4]
    4182:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    4184:	6839      	ldr	r1, [r7, #0]
    4186:	6878      	ldr	r0, [r7, #4]
    4188:	f000 f806 	bl	4198 <_trace_write_semihosting_stdout(char const*, unsigned int)>
    418c:	4603      	mov	r3, r0
    418e:	bf00      	nop
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    4190:	4618      	mov	r0, r3
    4192:	3708      	adds	r7, #8
    4194:	46bd      	mov	sp, r7
    4196:	bd80      	pop	{r7, pc}

00004198 <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    4198:	b5b0      	push	{r4, r5, r7, lr}
    419a:	b08c      	sub	sp, #48	; 0x30
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
    41a0:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    41a2:	4b2c      	ldr	r3, [pc, #176]	; (4254 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xbc>)
    41a4:	681b      	ldr	r3, [r3, #0]
    41a6:	f003 0301 	and.w	r3, r3, #1
    41aa:	2b00      	cmp	r3, #0
    41ac:	bf0c      	ite	eq
    41ae:	2301      	moveq	r3, #1
    41b0:	2300      	movne	r3, #0
    41b2:	b2db      	uxtb	r3, r3
    41b4:	2b00      	cmp	r3, #0
    41b6:	d001      	beq.n	41bc <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    41b8:	683b      	ldr	r3, [r7, #0]
    41ba:	e047      	b.n	424c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    41bc:	4b26      	ldr	r3, [pc, #152]	; (4258 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    41be:	681b      	ldr	r3, [r3, #0]
    41c0:	2b00      	cmp	r3, #0
    41c2:	d11d      	bne.n	4200 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    41c4:	4b25      	ldr	r3, [pc, #148]	; (425c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    41c6:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    41c8:	2304      	movs	r3, #4
    41ca:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    41cc:	2303      	movs	r3, #3
    41ce:	613b      	str	r3, [r7, #16]
    41d0:	2301      	movs	r3, #1
    41d2:	62bb      	str	r3, [r7, #40]	; 0x28
    41d4:	f107 0308 	add.w	r3, r7, #8
    41d8:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    41da:	6abc      	ldr	r4, [r7, #40]	; 0x28
    41dc:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    41de:	4620      	mov	r0, r4
    41e0:	4629      	mov	r1, r5
    41e2:	beab      	bkpt	0x00ab
    41e4:	4604      	mov	r4, r0
    41e6:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    41e8:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    41ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    41ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    41ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    41f2:	d102      	bne.n	41fa <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    41f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    41f8:	e028      	b.n	424c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

      handle = ret;
    41fa:	4a17      	ldr	r2, [pc, #92]	; (4258 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    41fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    41fe:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    4200:	4b15      	ldr	r3, [pc, #84]	; (4258 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    4202:	681b      	ldr	r3, [r3, #0]
    4204:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    4206:	687b      	ldr	r3, [r7, #4]
    4208:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    420a:	683b      	ldr	r3, [r7, #0]
    420c:	613b      	str	r3, [r7, #16]
    420e:	2305      	movs	r3, #5
    4210:	61fb      	str	r3, [r7, #28]
    4212:	f107 0308 	add.w	r3, r7, #8
    4216:	61bb      	str	r3, [r7, #24]
  );
    4218:	69fc      	ldr	r4, [r7, #28]
    421a:	69bd      	ldr	r5, [r7, #24]
    421c:	4620      	mov	r0, r4
    421e:	4629      	mov	r1, r5
    4220:	beab      	bkpt	0x00ab
    4222:	4604      	mov	r4, r0
    4224:	617c      	str	r4, [r7, #20]
  return value;
    4226:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    4228:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    422c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4230:	d102      	bne.n	4238 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    4232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4236:	e009      	b.n	424c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    4238:	683b      	ldr	r3, [r7, #0]
    423a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    423c:	429a      	cmp	r2, r3
    423e:	d102      	bne.n	4246 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xae>
    return -1;
    4240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4244:	e002      	b.n	424c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    4246:	683a      	ldr	r2, [r7, #0]
    4248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    424a:	1ad3      	subs	r3, r2, r3
}
    424c:	4618      	mov	r0, r3
    424e:	3730      	adds	r7, #48	; 0x30
    4250:	46bd      	mov	sp, r7
    4252:	bdb0      	pop	{r4, r5, r7, pc}
    4254:	e000edf0 	.word	0xe000edf0
    4258:	100007d8 	.word	0x100007d8
    425c:	00008798 	.word	0x00008798

00004260 <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    4260:	b480      	push	{r7}
    4262:	b083      	sub	sp, #12
    4264:	af00      	add	r7, sp, #0
    4266:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    4268:	4b0c      	ldr	r3, [pc, #48]	; (429c <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    426a:	681b      	ldr	r3, [r3, #0]
    426c:	68da      	ldr	r2, [r3, #12]
    426e:	4b0b      	ldr	r3, [pc, #44]	; (429c <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    4270:	681b      	ldr	r3, [r3, #0]
    4272:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    4276:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    4278:	4b09      	ldr	r3, [pc, #36]	; (42a0 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    427a:	681b      	ldr	r3, [r3, #0]
    427c:	2200      	movs	r2, #0
    427e:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    4280:	4b07      	ldr	r3, [pc, #28]	; (42a0 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4282:	681b      	ldr	r3, [r3, #0]
    4284:	681a      	ldr	r2, [r3, #0]
    4286:	4b06      	ldr	r3, [pc, #24]	; (42a0 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4288:	681b      	ldr	r3, [r3, #0]
    428a:	f042 0201 	orr.w	r2, r2, #1
    428e:	601a      	str	r2, [r3, #0]
  }
    4290:	bf00      	nop
    4292:	370c      	adds	r7, #12
    4294:	46bd      	mov	sp, r7
    4296:	f85d 7b04 	ldr.w	r7, [sp], #4
    429a:	4770      	bx	lr
    429c:	10000010 	.word	0x10000010
    42a0:	1000000c 	.word	0x1000000c

000042a4 <sjsu::cortex::DwtCounter::GetCount()>:

  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    42a4:	b480      	push	{r7}
    42a6:	b083      	sub	sp, #12
    42a8:	af00      	add	r7, sp, #0
    42aa:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    42ac:	4b04      	ldr	r3, [pc, #16]	; (42c0 <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    42ae:	681b      	ldr	r3, [r3, #0]
    42b0:	685b      	ldr	r3, [r3, #4]
  }
    42b2:	4618      	mov	r0, r3
    42b4:	370c      	adds	r7, #12
    42b6:	46bd      	mov	sp, r7
    42b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    42bc:	4770      	bx	lr
    42be:	bf00      	nop
    42c0:	1000000c 	.word	0x1000000c

000042c4 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    42c4:	b480      	push	{r7}
    42c6:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    42c8:	f8df 001c 	ldr.w	r0, [pc, #28]	; 42e8 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    42cc:	6801      	ldr	r1, [r0, #0]
    42ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    42d2:	6001      	str	r1, [r0, #0]
    42d4:	f3bf 8f4f 	dsb	sy
    42d8:	f3bf 8f6f 	isb	sy
  }
}
    42dc:	bf00      	nop
    42de:	46bd      	mov	sp, r7
    42e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e4:	4770      	bx	lr
    42e6:	0000      	.short	0x0000
    42e8:	e000ed88 	.word	0xe000ed88

000042ec <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)>:
  static void SetPlatformController(InterruptController * interrupt_controller)
    42ec:	b480      	push	{r7}
    42ee:	b083      	sub	sp, #12
    42f0:	af00      	add	r7, sp, #0
    42f2:	6078      	str	r0, [r7, #4]
    platform_interrupt_controller = interrupt_controller;
    42f4:	4a04      	ldr	r2, [pc, #16]	; (4308 <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)+0x1c>)
    42f6:	687b      	ldr	r3, [r7, #4]
    42f8:	6013      	str	r3, [r2, #0]
  }
    42fa:	bf00      	nop
    42fc:	370c      	adds	r7, #12
    42fe:	46bd      	mov	sp, r7
    4300:	f85d 7b04 	ldr.w	r7, [sp], #4
    4304:	4770      	bx	lr
    4306:	bf00      	nop
    4308:	1000010c 	.word	0x1000010c

0000430c <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    430c:	b580      	push	{r7, lr}
    430e:	b084      	sub	sp, #16
    4310:	af00      	add	r7, sp, #0
    4312:	e9c7 0100 	strd	r0, r1, [r7]
    4316:	e9d7 0100 	ldrd	r0, r1, [r7]
    431a:	f002 fa1b 	bl	6754 <__aeabi_ul2f>
    431e:	4602      	mov	r2, r0
    4320:	f107 030c 	add.w	r3, r7, #12
    4324:	ee00 2a10 	vmov	s0, r2
    4328:	4618      	mov	r0, r3
    432a:	f000 f85c 	bl	43e6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    432e:	68fb      	ldr	r3, [r7, #12]
    4330:	4618      	mov	r0, r3
    4332:	3710      	adds	r7, #16
    4334:	46bd      	mov	sp, r7
    4336:	bd80      	pop	{r7, pc}

00004338 <units::literals::operator"" _MHz(unsigned long long)>:
    4338:	b580      	push	{r7, lr}
    433a:	b084      	sub	sp, #16
    433c:	af00      	add	r7, sp, #0
    433e:	e9c7 0100 	strd	r0, r1, [r7]
    4342:	e9d7 0100 	ldrd	r0, r1, [r7]
    4346:	f002 fa05 	bl	6754 <__aeabi_ul2f>
    434a:	4602      	mov	r2, r0
    434c:	f107 030c 	add.w	r3, r7, #12
    4350:	ee00 2a10 	vmov	s0, r2
    4354:	4618      	mov	r0, r3
    4356:	f000 f805 	bl	4364 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    435a:	68fb      	ldr	r3, [r7, #12]
    435c:	4618      	mov	r0, r3
    435e:	3710      	adds	r7, #16
    4360:	46bd      	mov	sp, r7
    4362:	bd80      	pop	{r7, pc}

00004364 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    4364:	b580      	push	{r7, lr}
    4366:	b082      	sub	sp, #8
    4368:	af00      	add	r7, sp, #0
    436a:	6078      	str	r0, [r7, #4]
    436c:	ed87 0a00 	vstr	s0, [r7]
    4370:	687b      	ldr	r3, [r7, #4]
    4372:	463a      	mov	r2, r7
    4374:	4611      	mov	r1, r2
    4376:	4618      	mov	r0, r3
    4378:	f000 f805 	bl	4386 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    437c:	687b      	ldr	r3, [r7, #4]
    437e:	4618      	mov	r0, r3
    4380:	3708      	adds	r7, #8
    4382:	46bd      	mov	sp, r7
    4384:	bd80      	pop	{r7, pc}

00004386 <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    4386:	b480      	push	{r7}
    4388:	b083      	sub	sp, #12
    438a:	af00      	add	r7, sp, #0
    438c:	6078      	str	r0, [r7, #4]
    438e:	6039      	str	r1, [r7, #0]
    4390:	683b      	ldr	r3, [r7, #0]
    4392:	681a      	ldr	r2, [r3, #0]
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	601a      	str	r2, [r3, #0]
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	4618      	mov	r0, r3
    439c:	370c      	adds	r7, #12
    439e:	46bd      	mov	sp, r7
    43a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    43a4:	4770      	bx	lr

000043a6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    43a6:	b580      	push	{r7, lr}
    43a8:	b086      	sub	sp, #24
    43aa:	af00      	add	r7, sp, #0
    43ac:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    43ae:	6878      	ldr	r0, [r7, #4]
    43b0:	f000 f807 	bl	43c2 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    43b4:	eef0 7a40 	vmov.f32	s15, s0
	}
    43b8:	eeb0 0a67 	vmov.f32	s0, s15
    43bc:	3718      	adds	r7, #24
    43be:	46bd      	mov	sp, r7
    43c0:	bd80      	pop	{r7, pc}

000043c2 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    43c2:	b480      	push	{r7}
    43c4:	b085      	sub	sp, #20
    43c6:	af00      	add	r7, sp, #0
    43c8:	60f8      	str	r0, [r7, #12]
    43ca:	7239      	strb	r1, [r7, #8]
    43cc:	713a      	strb	r2, [r7, #4]
    43ce:	703b      	strb	r3, [r7, #0]
			return value;
    43d0:	68fb      	ldr	r3, [r7, #12]
    43d2:	681b      	ldr	r3, [r3, #0]
    43d4:	ee07 3a90 	vmov	s15, r3
		}
    43d8:	eeb0 0a67 	vmov.f32	s0, s15
    43dc:	3714      	adds	r7, #20
    43de:	46bd      	mov	sp, r7
    43e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    43e4:	4770      	bx	lr

000043e6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    43e6:	b580      	push	{r7, lr}
    43e8:	b082      	sub	sp, #8
    43ea:	af00      	add	r7, sp, #0
    43ec:	6078      	str	r0, [r7, #4]
    43ee:	ed87 0a00 	vstr	s0, [r7]
    43f2:	687b      	ldr	r3, [r7, #4]
    43f4:	463a      	mov	r2, r7
    43f6:	4611      	mov	r1, r2
    43f8:	4618      	mov	r0, r3
    43fa:	f7ff ffc4 	bl	4386 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    43fe:	687b      	ldr	r3, [r7, #4]
    4400:	4618      	mov	r0, r3
    4402:	3708      	adds	r7, #8
    4404:	46bd      	mov	sp, r7
    4406:	bd80      	pop	{r7, pc}

00004408 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4408:	b580      	push	{r7, lr}
    440a:	b086      	sub	sp, #24
    440c:	af00      	add	r7, sp, #0
    440e:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4410:	6878      	ldr	r0, [r7, #4]
    4412:	f000 f807 	bl	4424 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    4416:	eef0 7a40 	vmov.f32	s15, s0
	}
    441a:	eeb0 0a67 	vmov.f32	s0, s15
    441e:	3718      	adds	r7, #24
    4420:	46bd      	mov	sp, r7
    4422:	bd80      	pop	{r7, pc}

00004424 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    4424:	b480      	push	{r7}
    4426:	b085      	sub	sp, #20
    4428:	af00      	add	r7, sp, #0
    442a:	60f8      	str	r0, [r7, #12]
    442c:	7239      	strb	r1, [r7, #8]
    442e:	713a      	strb	r2, [r7, #4]
    4430:	703b      	strb	r3, [r7, #0]
			return value;
    4432:	68fb      	ldr	r3, [r7, #12]
    4434:	681b      	ldr	r3, [r3, #0]
    4436:	ee07 3a90 	vmov	s15, r3
		}
    443a:	eeb0 0a67 	vmov.f32	s0, s15
    443e:	3714      	adds	r7, #20
    4440:	46bd      	mov	sp, r7
    4442:	f85d 7b04 	ldr.w	r7, [sp], #4
    4446:	4770      	bx	lr

00004448 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    4448:	b580      	push	{r7, lr}
    444a:	ed2d 8b02 	vpush	{d8}
    444e:	b082      	sub	sp, #8
    4450:	af00      	add	r7, sp, #0
    4452:	6078      	str	r0, [r7, #4]
    4454:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    4456:	687b      	ldr	r3, [r7, #4]
    4458:	ed93 8a00 	vldr	s16, [r3]
    445c:	683b      	ldr	r3, [r7, #0]
    445e:	4618      	mov	r0, r3
    4460:	f7ff ffd2 	bl	4408 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4464:	eef0 7a40 	vmov.f32	s15, s0
    4468:	eeb4 8ae7 	vcmpe.f32	s16, s15
    446c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4470:	bf94      	ite	ls
    4472:	2301      	movls	r3, #1
    4474:	2300      	movhi	r3, #0
    4476:	b2db      	uxtb	r3, r3
		}
    4478:	4618      	mov	r0, r3
    447a:	3708      	adds	r7, #8
    447c:	46bd      	mov	sp, r7
    447e:	ecbd 8b02 	vpop	{d8}
    4482:	bd80      	pop	{r7, pc}

00004484 <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)>:
{
    4484:	b580      	push	{r7, lr}
    4486:	b082      	sub	sp, #8
    4488:	af00      	add	r7, sp, #0
    448a:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    448c:	6879      	ldr	r1, [r7, #4]
    448e:	4803      	ldr	r0, [pc, #12]	; (449c <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)+0x18>)
    4490:	f001 fa70 	bl	5974 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>
}
    4494:	bf00      	nop
    4496:	3708      	adds	r7, #8
    4498:	46bd      	mov	sp, r7
    449a:	bd80      	pop	{r7, pc}
    449c:	10000120 	.word	0x10000120

000044a0 <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)>:
 public:
  /// Set the controller for the platform
  ///
  /// @param system_controller - a pointer to the current platform's
  ///        system controller.
  static void SetPlatformController(SystemController * system_controller)
    44a0:	b480      	push	{r7}
    44a2:	b083      	sub	sp, #12
    44a4:	af00      	add	r7, sp, #0
    44a6:	6078      	str	r0, [r7, #4]
  {
    platform_system_controller = system_controller;
    44a8:	4a04      	ldr	r2, [pc, #16]	; (44bc <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)+0x1c>)
    44aa:	687b      	ldr	r3, [r7, #4]
    44ac:	6013      	str	r3, [r2, #0]
  }
    44ae:	bf00      	nop
    44b0:	370c      	adds	r7, #12
    44b2:	46bd      	mov	sp, r7
    44b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    44b8:	4770      	bx	lr
    44ba:	bf00      	nop
    44bc:	100007dc 	.word	0x100007dc

000044c0 <sjsu::SystemController::GetPlatformController()>:
  /// Retrieve a reference of the platforms system controller
  static sjsu::SystemController & GetPlatformController()
    44c0:	b480      	push	{r7}
    44c2:	af00      	add	r7, sp, #0
  {
    return *platform_system_controller;
    44c4:	4b03      	ldr	r3, [pc, #12]	; (44d4 <sjsu::SystemController::GetPlatformController()+0x14>)
    44c6:	681b      	ldr	r3, [r3, #0]
  }
    44c8:	4618      	mov	r0, r3
    44ca:	46bd      	mov	sp, r7
    44cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    44d0:	4770      	bx	lr
    44d2:	bf00      	nop
    44d4:	100007dc 	.word	0x100007dc

000044d8 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
    44d8:	b580      	push	{r7, lr}
    44da:	b086      	sub	sp, #24
    44dc:	af00      	add	r7, sp, #0
    44de:	6078      	str	r0, [r7, #4]
    44e0:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
    44e2:	687b      	ldr	r3, [r7, #4]
    44e4:	681b      	ldr	r3, [r3, #0]
    44e6:	3308      	adds	r3, #8
    44e8:	681b      	ldr	r3, [r3, #0]
    44ea:	6839      	ldr	r1, [r7, #0]
    44ec:	6878      	ldr	r0, [r7, #4]
    44ee:	4798      	blx	r3
    44f0:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
    44f2:	f04f 0300 	mov.w	r3, #0
    44f6:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
    44f8:	697b      	ldr	r3, [r7, #20]
    44fa:	2b00      	cmp	r3, #0
    44fc:	d00f      	beq.n	451e <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
    44fe:	687b      	ldr	r3, [r7, #4]
    4500:	681b      	ldr	r3, [r3, #0]
    4502:	330c      	adds	r3, #12
    4504:	681b      	ldr	r3, [r3, #0]
    4506:	6878      	ldr	r0, [r7, #4]
    4508:	4798      	blx	r3
    450a:	4603      	mov	r3, r0
    450c:	613b      	str	r3, [r7, #16]
    450e:	f107 0310 	add.w	r3, r7, #16
    4512:	6979      	ldr	r1, [r7, #20]
    4514:	4618      	mov	r0, r3
    4516:	f001 fa48 	bl	59aa <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
    451a:	4603      	mov	r3, r0
    451c:	60fb      	str	r3, [r7, #12]
    }
    return result;
    451e:	68fb      	ldr	r3, [r7, #12]
  }
    4520:	4618      	mov	r0, r3
    4522:	3718      	adds	r7, #24
    4524:	46bd      	mov	sp, r7
    4526:	bd80      	pop	{r7, pc}

00004528 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }

  /// System timer interrupt handler.
  static void SystemTimerHandler()
    4528:	b580      	push	{r7, lr}
    452a:	b084      	sub	sp, #16
    452c:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    millisecond_count += 1ms;
    452e:	f107 0308 	add.w	r3, r7, #8
    4532:	4618      	mov	r0, r3
    4534:	f001 fa65 	bl	5a02 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    4538:	f107 0208 	add.w	r2, r7, #8
    453c:	463b      	mov	r3, r7
    453e:	4611      	mov	r1, r2
    4540:	4618      	mov	r0, r3
    4542:	f001 fa6b 	bl	5a1c <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    4546:	463b      	mov	r3, r7
    4548:	4619      	mov	r1, r3
    454a:	4808      	ldr	r0, [pc, #32]	; (456c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    454c:	f7fc f91b 	bl	786 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    if (callback)
    4550:	4807      	ldr	r0, [pc, #28]	; (4570 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x48>)
    4552:	f7fe f87a 	bl	264a <std::function<void ()>::operator bool() const>
    4556:	4603      	mov	r3, r0
    4558:	2b00      	cmp	r3, #0
    455a:	d002      	beq.n	4562 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x3a>
    {
      callback();
    455c:	4804      	ldr	r0, [pc, #16]	; (4570 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x48>)
    455e:	f7fd fbc9 	bl	1cf4 <std::function<void ()>::operator()() const>
    }
  }
    4562:	bf00      	nop
    4564:	3710      	adds	r7, #16
    4566:	46bd      	mov	sp, r7
    4568:	bd80      	pop	{r7, pc}
    456a:	bf00      	nop
    456c:	100007f0 	.word	0x100007f0
    4570:	100007e0 	.word	0x100007e0

00004574 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)
    4574:	b580      	push	{r7, lr}
    4576:	b084      	sub	sp, #16
    4578:	af00      	add	r7, sp, #0
    457a:	60f8      	str	r0, [r7, #12]
    457c:	60b9      	str	r1, [r7, #8]
    457e:	607a      	str	r2, [r7, #4]
      { return __d * __s; }
    4580:	68fb      	ldr	r3, [r7, #12]
    4582:	68ba      	ldr	r2, [r7, #8]
    4584:	6879      	ldr	r1, [r7, #4]
    4586:	4618      	mov	r0, r3
    4588:	f000 f805 	bl	4596 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>
    458c:	bf00      	nop
    458e:	68f8      	ldr	r0, [r7, #12]
    4590:	3710      	adds	r7, #16
    4592:	46bd      	mov	sp, r7
    4594:	bd80      	pop	{r7, pc}

00004596 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>:
      operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
    4596:	b5b0      	push	{r4, r5, r7, lr}
    4598:	b088      	sub	sp, #32
    459a:	af00      	add	r7, sp, #0
    459c:	60f8      	str	r0, [r7, #12]
    459e:	60b9      	str	r1, [r7, #8]
    45a0:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__d).count() * __s);
    45a2:	68bb      	ldr	r3, [r7, #8]
    45a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    45a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    45ac:	f107 0318 	add.w	r3, r7, #24
    45b0:	4618      	mov	r0, r3
    45b2:	f7fc f87f 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	681b      	ldr	r3, [r3, #0]
    45ba:	461a      	mov	r2, r3
    45bc:	f04f 0300 	mov.w	r3, #0
    45c0:	fb02 f501 	mul.w	r5, r2, r1
    45c4:	fb00 f403 	mul.w	r4, r0, r3
    45c8:	442c      	add	r4, r5
    45ca:	fba0 2302 	umull	r2, r3, r0, r2
    45ce:	18e1      	adds	r1, r4, r3
    45d0:	460b      	mov	r3, r1
    45d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    45d6:	f107 0310 	add.w	r3, r7, #16
    45da:	4619      	mov	r1, r3
    45dc:	68f8      	ldr	r0, [r7, #12]
    45de:	f7fc f89f 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    45e2:	68f8      	ldr	r0, [r7, #12]
    45e4:	3720      	adds	r7, #32
    45e6:	46bd      	mov	sp, r7
    45e8:	bdb0      	pop	{r4, r5, r7, pc}

000045ea <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>:
      operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
    45ea:	b580      	push	{r7, lr}
    45ec:	b088      	sub	sp, #32
    45ee:	af00      	add	r7, sp, #0
    45f0:	60f8      	str	r0, [r7, #12]
    45f2:	60b9      	str	r1, [r7, #8]
    45f4:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__d).count() / __s);
    45f6:	68bb      	ldr	r3, [r7, #8]
    45f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    45fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    4600:	f107 0318 	add.w	r3, r7, #24
    4604:	4618      	mov	r0, r3
    4606:	f7fc f855 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	681b      	ldr	r3, [r3, #0]
    460e:	461a      	mov	r2, r3
    4610:	f04f 0300 	mov.w	r3, #0
    4614:	f002 f8e4 	bl	67e0 <__aeabi_ldivmod>
    4618:	4602      	mov	r2, r0
    461a:	460b      	mov	r3, r1
    461c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    4620:	f107 0310 	add.w	r3, r7, #16
    4624:	4619      	mov	r1, r3
    4626:	68f8      	ldr	r0, [r7, #12]
    4628:	f7fc f87a 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    462c:	68f8      	ldr	r0, [r7, #12]
    462e:	3720      	adds	r7, #32
    4630:	46bd      	mov	sp, r7
    4632:	bd80      	pop	{r7, pc}

00004634 <sjsu::cortex::SystemTimer::GetCount()>:

  /// @return returns the current system_timer counter value.
  static std::chrono::nanoseconds GetCount()
    4634:	b580      	push	{r7, lr}
    4636:	b08c      	sub	sp, #48	; 0x30
    4638:	af00      	add	r7, sp, #0
    463a:	6078      	str	r0, [r7, #4]
  {
    // Capture all count variables at this instant.
    uint32_t high_speed_ticks = dwt_counter.GetCount();
    463c:	4816      	ldr	r0, [pc, #88]	; (4698 <sjsu::cortex::SystemTimer::GetCount()+0x64>)
    463e:	f7ff fe31 	bl	42a4 <sjsu::cortex::DwtCounter::GetCount()>
    4642:	62f8      	str	r0, [r7, #44]	; 0x2c
    auto current_millis_count = millisecond_count;
    4644:	4b15      	ldr	r3, [pc, #84]	; (469c <sjsu::cortex::SystemTimer::GetCount()+0x68>)
    4646:	e9d3 2300 	ldrd	r2, r3, [r3]
    464a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Get rid of the portion of the dwt tick count that is above 1ms.
    // We only want the information about the ticks that is below 1ms, since we
    // get the 1ms count from the SysTick timer interrupt.
    uint32_t sub_millis_ticks = (high_speed_ticks % ticks_per_millisecond);
    464e:	4b14      	ldr	r3, [pc, #80]	; (46a0 <sjsu::cortex::SystemTimer::GetCount()+0x6c>)
    4650:	681a      	ldr	r2, [r3, #0]
    4652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4654:	fbb3 f1f2 	udiv	r1, r3, r2
    4658:	fb02 f201 	mul.w	r2, r2, r1
    465c:	1a9b      	subs	r3, r3, r2
    465e:	61fb      	str	r3, [r7, #28]
    // Perform the conversion from ticks to nanoseconds
    auto nanoseconds_unscaled = (sub_millis_ticks * nanoseconds_per_tick);
    4660:	f107 0310 	add.w	r3, r7, #16
    4664:	f107 011c 	add.w	r1, r7, #28
    4668:	4a0e      	ldr	r2, [pc, #56]	; (46a4 <sjsu::cortex::SystemTimer::GetCount()+0x70>)
    466a:	4618      	mov	r0, r3
    466c:	f7ff ff82 	bl	4574 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    // Nanoseconds per tick is actually scaled up by the kFixedPointScaling
    // factor, meaning it needs to be divided by that value to get the correct
    // nanosecond_uptime.
    auto nanoseconds_uptime_scaled = nanoseconds_unscaled / kFixedPointScaling;
    4670:	f107 0308 	add.w	r3, r7, #8
    4674:	f107 0110 	add.w	r1, r7, #16
    4678:	4a0b      	ldr	r2, [pc, #44]	; (46a8 <sjsu::cortex::SystemTimer::GetCount()+0x74>)
    467a:	4618      	mov	r0, r3
    467c:	f7ff ffb5 	bl	45ea <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>

    // Result is simply the uptime milliseconds (represented in nanoseconds) +
    // the added nanoseconds
    return current_millis_count + nanoseconds_uptime_scaled;
    4680:	687b      	ldr	r3, [r7, #4]
    4682:	f107 0208 	add.w	r2, r7, #8
    4686:	f107 0120 	add.w	r1, r7, #32
    468a:	4618      	mov	r0, r3
    468c:	f7fd fa90 	bl	1bb0 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
  }
    4690:	6878      	ldr	r0, [r7, #4]
    4692:	3730      	adds	r7, #48	; 0x30
    4694:	46bd      	mov	sp, r7
    4696:	bd80      	pop	{r7, pc}
    4698:	100007f8 	.word	0x100007f8
    469c:	100007f0 	.word	0x100007f0
    46a0:	10000020 	.word	0x10000020
    46a4:	10000018 	.word	0x10000018
    46a8:	00008ee4 	.word	0x00008ee4

000046ac <sjsu::cortex::SystemTimer::Initialize() const>:
  /// Constructor for ARM Cortex M system timer.
  ///
  /// @param priority - the interrupt priority of
  explicit constexpr SystemTimer(uint8_t priority = -1) : priority_(priority) {}

  void Initialize() const override
    46ac:	b590      	push	{r4, r7, lr}
    46ae:	b08b      	sub	sp, #44	; 0x2c
    46b0:	af00      	add	r7, sp, #0
    46b2:	60f8      	str	r0, [r7, #12]
  {
    dwt_counter.Initialize();
    46b4:	481c      	ldr	r0, [pc, #112]	; (4728 <sjsu::cortex::SystemTimer::Initialize() const+0x7c>)
    46b6:	f7ff fdd3 	bl	4260 <sjsu::cortex::DwtCounter::Initialize()>

    auto system_frequency = SystemController::GetPlatformController()
    46ba:	f7ff ff01 	bl	44c0 <sjsu::SystemController::GetPlatformController()>
    46be:	4603      	mov	r3, r0
                                .GetSystemFrequency()
    46c0:	681a      	ldr	r2, [r3, #0]
    46c2:	320c      	adds	r2, #12
    46c4:	6812      	ldr	r2, [r2, #0]
    46c6:	4618      	mov	r0, r3
    46c8:	4790      	blx	r2
    46ca:	4603      	mov	r3, r0
    46cc:	617b      	str	r3, [r7, #20]
                                .to<uint32_t>();
    46ce:	f107 0314 	add.w	r3, r7, #20
    46d2:	4618      	mov	r0, r3
    46d4:	f001 f9bc 	bl	5a50 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    46d8:	4603      	mov	r3, r0
    46da:	613b      	str	r3, [r7, #16]

    ticks_per_millisecond = system_frequency / 1000 /* ms/s */;
    46dc:	693b      	ldr	r3, [r7, #16]
    46de:	4a13      	ldr	r2, [pc, #76]	; (472c <sjsu::cortex::SystemTimer::Initialize() const+0x80>)
    46e0:	fba2 2303 	umull	r2, r3, r2, r3
    46e4:	099b      	lsrs	r3, r3, #6
    46e6:	4a12      	ldr	r2, [pc, #72]	; (4730 <sjsu::cortex::SystemTimer::Initialize() const+0x84>)
    46e8:	6013      	str	r3, [r2, #0]
    nanoseconds_per_tick =
        (kFixedPointScaling * 1'000'000'000ns) / system_frequency;
    46ea:	f107 0320 	add.w	r3, r7, #32
    46ee:	4618      	mov	r0, r3
    46f0:	f001 f9ba 	bl	5a68 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>
    46f4:	f107 0318 	add.w	r3, r7, #24
    46f8:	f107 0220 	add.w	r2, r7, #32
    46fc:	490d      	ldr	r1, [pc, #52]	; (4734 <sjsu::cortex::SystemTimer::Initialize() const+0x88>)
    46fe:	4618      	mov	r0, r3
    4700:	f7ff ff38 	bl	4574 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    4704:	4c0c      	ldr	r4, [pc, #48]	; (4738 <sjsu::cortex::SystemTimer::Initialize() const+0x8c>)
    4706:	463b      	mov	r3, r7
    4708:	f107 0210 	add.w	r2, r7, #16
    470c:	f107 0118 	add.w	r1, r7, #24
    4710:	4618      	mov	r0, r3
    4712:	f7ff ff6a 	bl	45ea <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>
    4716:	e9d7 2300 	ldrd	r2, r3, [r7]
    471a:	e9c4 2300 	strd	r2, r3, [r4]
  }
    471e:	bf00      	nop
    4720:	372c      	adds	r7, #44	; 0x2c
    4722:	46bd      	mov	sp, r7
    4724:	bd90      	pop	{r4, r7, pc}
    4726:	bf00      	nop
    4728:	100007f8 	.word	0x100007f8
    472c:	10624dd3 	.word	0x10624dd3
    4730:	10000020 	.word	0x10000020
    4734:	00008ee4 	.word	0x00008ee4
    4738:	10000018 	.word	0x10000018

0000473c <sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const>:

  void SetCallback(InterruptCallback isr) const override
    473c:	b580      	push	{r7, lr}
    473e:	b082      	sub	sp, #8
    4740:	af00      	add	r7, sp, #0
    4742:	6078      	str	r0, [r7, #4]
    4744:	6039      	str	r1, [r7, #0]
  {
    callback = isr;
    4746:	6839      	ldr	r1, [r7, #0]
    4748:	4803      	ldr	r0, [pc, #12]	; (4758 <sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const+0x1c>)
    474a:	f7fd fb4f 	bl	1dec <std::function<void ()>::operator=(std::function<void ()> const&)>
  }
    474e:	bf00      	nop
    4750:	3708      	adds	r7, #8
    4752:	46bd      	mov	sp, r7
    4754:	bd80      	pop	{r7, pc}
    4756:	bf00      	nop
    4758:	100007e0 	.word	0x100007e0

0000475c <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    475c:	b5b0      	push	{r4, r5, r7, lr}
    475e:	b08a      	sub	sp, #40	; 0x28
    4760:	af00      	add	r7, sp, #0
    4762:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    4764:	2304      	movs	r3, #4
    4766:	627b      	str	r3, [r7, #36]	; 0x24

    if (sys_tick->LOAD != 0)
    4768:	4b1d      	ldr	r3, [pc, #116]	; (47e0 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    476a:	681b      	ldr	r3, [r3, #0]
    476c:	685b      	ldr	r3, [r3, #4]
    476e:	2b00      	cmp	r3, #0
    4770:	bf14      	ite	ne
    4772:	2301      	movne	r3, #1
    4774:	2300      	moveq	r3, #0
    4776:	b2db      	uxtb	r3, r3
    4778:	2b00      	cmp	r3, #0
    477a:	d02c      	beq.n	47d6 <sjsu::cortex::SystemTimer::StartTimer() const+0x7a>
    {
      // The interrupt handler must be registered before you starting the timer
      // by setting the Enable counter flag in the CTRL register.
      // Otherwise, the handler may not be set by the time the first tick
      // interrupt occurs.
      sjsu::InterruptController::GetPlatformController().Enable({
    477c:	f7fb fe56 	bl	42c <sjsu::InterruptController::GetPlatformController()>
    4780:	4604      	mov	r4, r0
          .interrupt_request_number = cortex::SysTick_IRQn,
          .interrupt_handler        = SystemTimerHandler,
          .priority                 = priority_,
      });
    4782:	6823      	ldr	r3, [r4, #0]
    4784:	3304      	adds	r3, #4
    4786:	681d      	ldr	r5, [r3, #0]
      sjsu::InterruptController::GetPlatformController().Enable({
    4788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    478c:	60bb      	str	r3, [r7, #8]
    478e:	f107 0308 	add.w	r3, r7, #8
    4792:	3304      	adds	r3, #4
    4794:	4913      	ldr	r1, [pc, #76]	; (47e4 <sjsu::cortex::SystemTimer::StartTimer() const+0x88>)
    4796:	4618      	mov	r0, r3
    4798:	f7fd fafe 	bl	1d98 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
          .priority                 = priority_,
    479c:	687b      	ldr	r3, [r7, #4]
    479e:	791b      	ldrb	r3, [r3, #4]
      sjsu::InterruptController::GetPlatformController().Enable({
    47a0:	61fb      	str	r3, [r7, #28]
    47a2:	f107 0308 	add.w	r3, r7, #8
    47a6:	4619      	mov	r1, r3
    47a8:	4620      	mov	r0, r4
    47aa:	47a8      	blx	r5
      });
    47ac:	f107 0308 	add.w	r3, r7, #8
    47b0:	4618      	mov	r0, r3
    47b2:	f7fc fb85 	bl	ec0 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>
      // Set all flags required to enable the counter
      uint32_t ctrl_mask = (1 << ControlBitMap::kTickInterupt) |
    47b6:	2307      	movs	r3, #7
    47b8:	623b      	str	r3, [r7, #32]
                           (1 << ControlBitMap::kEnableCounter) |
                           (1 << ControlBitMap::kClkSource);
      // Set the system tick counter to start immediately
      sys_tick->VAL = 0;
    47ba:	4b09      	ldr	r3, [pc, #36]	; (47e0 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    47bc:	681b      	ldr	r3, [r3, #0]
    47be:	2200      	movs	r2, #0
    47c0:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= ctrl_mask;
    47c2:	4b07      	ldr	r3, [pc, #28]	; (47e0 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    47c4:	681b      	ldr	r3, [r3, #0]
    47c6:	6819      	ldr	r1, [r3, #0]
    47c8:	4b05      	ldr	r3, [pc, #20]	; (47e0 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    47ca:	681b      	ldr	r3, [r3, #0]
    47cc:	6a3a      	ldr	r2, [r7, #32]
    47ce:	430a      	orrs	r2, r1
    47d0:	601a      	str	r2, [r3, #0]

      status = Status::kSuccess;
    47d2:	2300      	movs	r3, #0
    47d4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return status;
    47d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
    47d8:	4618      	mov	r0, r3
    47da:	3728      	adds	r7, #40	; 0x28
    47dc:	46bd      	mov	sp, r7
    47de:	bdb0      	pop	{r4, r5, r7, pc}
    47e0:	10000014 	.word	0x10000014
    47e4:	00004529 	.word	0x00004529

000047e8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    47e8:	b580      	push	{r7, lr}
    47ea:	b082      	sub	sp, #8
    47ec:	af00      	add	r7, sp, #0
    47ee:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    47f0:	6878      	ldr	r0, [r7, #4]
    47f2:	f001 f946 	bl	5a82 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    47f6:	4603      	mov	r3, r0
	}
    47f8:	4618      	mov	r0, r3
    47fa:	3708      	adds	r7, #8
    47fc:	46bd      	mov	sp, r7
    47fe:	bd80      	pop	{r7, pc}

00004800 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
    4800:	b480      	push	{r7}
    4802:	b083      	sub	sp, #12
    4804:	af00      	add	r7, sp, #0
    4806:	6078      	str	r0, [r7, #4]
    4808:	687b      	ldr	r3, [r7, #4]
    480a:	681b      	ldr	r3, [r3, #0]
    480c:	ee07 3a90 	vmov	s15, r3
    4810:	eeb0 0a67 	vmov.f32	s0, s15
    4814:	370c      	adds	r7, #12
    4816:	46bd      	mov	sp, r7
    4818:	f85d 7b04 	ldr.w	r7, [sp], #4
    481c:	4770      	bx	lr

0000481e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    481e:	b580      	push	{r7, lr}
    4820:	b084      	sub	sp, #16
    4822:	af00      	add	r7, sp, #0
    4824:	6078      	str	r0, [r7, #4]
    4826:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    4828:	687b      	ldr	r3, [r7, #4]
    482a:	4618      	mov	r0, r3
    482c:	f7ff ffe8 	bl	4800 <units::linear_scale<float>::operator()() const>
    4830:	eeb0 7a40 	vmov.f32	s14, s0
    4834:	683b      	ldr	r3, [r7, #0]
    4836:	ee07 3a90 	vmov	s15, r3
    483a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    483e:	ee77 7a67 	vsub.f32	s15, s14, s15
    4842:	f107 030c 	add.w	r3, r7, #12
    4846:	eeb0 0a67 	vmov.f32	s0, s15
    484a:	4618      	mov	r0, r3
    484c:	f000 f831 	bl	48b2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4850:	68fb      	ldr	r3, [r7, #12]
	}
    4852:	4618      	mov	r0, r3
    4854:	3710      	adds	r7, #16
    4856:	46bd      	mov	sp, r7
    4858:	bd80      	pop	{r7, pc}

0000485a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    485a:	b580      	push	{r7, lr}
    485c:	ed2d 8b02 	vpush	{d8}
    4860:	b084      	sub	sp, #16
    4862:	af00      	add	r7, sp, #0
    4864:	6078      	str	r0, [r7, #4]
    4866:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    4868:	687b      	ldr	r3, [r7, #4]
    486a:	4618      	mov	r0, r3
    486c:	f7ff ffc8 	bl	4800 <units::linear_scale<float>::operator()() const>
    4870:	eeb0 8a40 	vmov.f32	s16, s0
    4874:	683b      	ldr	r3, [r7, #0]
    4876:	4618      	mov	r0, r3
    4878:	f7ff ffc2 	bl	4800 <units::linear_scale<float>::operator()() const>
    487c:	eef0 7a40 	vmov.f32	s15, s0
    4880:	edc7 7a03 	vstr	s15, [r7, #12]
    4884:	f107 030c 	add.w	r3, r7, #12
    4888:	4618      	mov	r0, r3
    488a:	f7ff fdbd 	bl	4408 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    488e:	eeb0 7a40 	vmov.f32	s14, s0
    4892:	eec8 7a07 	vdiv.f32	s15, s16, s14
    4896:	f107 0308 	add.w	r3, r7, #8
    489a:	eeb0 0a67 	vmov.f32	s0, s15
    489e:	4618      	mov	r0, r3
    48a0:	f000 f807 	bl	48b2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    48a4:	68bb      	ldr	r3, [r7, #8]
	}
    48a6:	4618      	mov	r0, r3
    48a8:	3710      	adds	r7, #16
    48aa:	46bd      	mov	sp, r7
    48ac:	ecbd 8b02 	vpop	{d8}
    48b0:	bd80      	pop	{r7, pc}

000048b2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    48b2:	b580      	push	{r7, lr}
    48b4:	b082      	sub	sp, #8
    48b6:	af00      	add	r7, sp, #0
    48b8:	6078      	str	r0, [r7, #4]
    48ba:	ed87 0a00 	vstr	s0, [r7]
    48be:	687b      	ldr	r3, [r7, #4]
    48c0:	463a      	mov	r2, r7
    48c2:	4611      	mov	r1, r2
    48c4:	4618      	mov	r0, r3
    48c6:	f7ff fd5e 	bl	4386 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	4618      	mov	r0, r3
    48ce:	3708      	adds	r7, #8
    48d0:	46bd      	mov	sp, r7
    48d2:	bd80      	pop	{r7, pc}

000048d4 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    48d4:	b580      	push	{r7, lr}
    48d6:	b082      	sub	sp, #8
    48d8:	af00      	add	r7, sp, #0
    48da:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    48dc:	6878      	ldr	r0, [r7, #4]
    48de:	f000 f805 	bl	48ec <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    48e2:	4603      	mov	r3, r0
	}
    48e4:	4618      	mov	r0, r3
    48e6:	3708      	adds	r7, #8
    48e8:	46bd      	mov	sp, r7
    48ea:	bd80      	pop	{r7, pc}

000048ec <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    48ec:	b580      	push	{r7, lr}
    48ee:	b082      	sub	sp, #8
    48f0:	af00      	add	r7, sp, #0
    48f2:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	4618      	mov	r0, r3
    48f8:	f7ff ff82 	bl	4800 <units::linear_scale<float>::operator()() const>
    48fc:	eef0 7a40 	vmov.f32	s15, s0
    4900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4904:	ee17 3a90 	vmov	r3, s15
		}
    4908:	4618      	mov	r0, r3
    490a:	3708      	adds	r7, #8
    490c:	46bd      	mov	sp, r7
    490e:	bd80      	pop	{r7, pc}

00004910 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    4910:	b590      	push	{r4, r7, lr}
    4912:	b089      	sub	sp, #36	; 0x24
    4914:	af00      	add	r7, sp, #0
    4916:	6078      	str	r0, [r7, #4]
    4918:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    491a:	f04f 0001 	mov.w	r0, #1
    491e:	f04f 0100 	mov.w	r1, #0
    4922:	f7ff fcf3 	bl	430c <units::literals::operator"" _Hz(unsigned long long)>
    4926:	4603      	mov	r3, r0
    4928:	60fb      	str	r3, [r7, #12]
    492a:	f107 020c 	add.w	r2, r7, #12
    492e:	463b      	mov	r3, r7
    4930:	4611      	mov	r1, r2
    4932:	4618      	mov	r0, r3
    4934:	f7ff fd88 	bl	4448 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4938:	4603      	mov	r3, r0
    493a:	2b00      	cmp	r3, #0
    493c:	d002      	beq.n	4944 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    493e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4942:	e040      	b.n	49c6 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb6>
    }

    units::frequency::hertz_t system_frequency =
        sjsu::SystemController::GetPlatformController().GetSystemFrequency();
    4944:	f7ff fdbc 	bl	44c0 <sjsu::SystemController::GetPlatformController()>
    4948:	4603      	mov	r3, r0
    494a:	681a      	ldr	r2, [r3, #0]
    494c:	320c      	adds	r2, #12
    494e:	6812      	ldr	r2, [r2, #0]
    4950:	4618      	mov	r0, r3
    4952:	4790      	blx	r2
    4954:	4603      	mov	r3, r0
    4956:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    4958:	463a      	mov	r2, r7
    495a:	f107 0308 	add.w	r3, r7, #8
    495e:	4611      	mov	r1, r2
    4960:	4618      	mov	r0, r3
    4962:	f7ff ff7a 	bl	485a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4966:	4603      	mov	r3, r0
    4968:	617b      	str	r3, [r7, #20]
    496a:	f107 0314 	add.w	r3, r7, #20
    496e:	2101      	movs	r1, #1
    4970:	4618      	mov	r0, r3
    4972:	f7ff ff54 	bl	481e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    4976:	4603      	mov	r3, r0
    4978:	613b      	str	r3, [r7, #16]
    497a:	f107 0310 	add.w	r3, r7, #16
    497e:	4618      	mov	r0, r3
    4980:	f7ff ff32 	bl	47e8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4984:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    4986:	f107 0308 	add.w	r3, r7, #8
    498a:	4618      	mov	r0, r3
    498c:	f7ff ffa2 	bl	48d4 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4990:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    4992:	463b      	mov	r3, r7
    4994:	4618      	mov	r0, r3
    4996:	f7ff ff9d 	bl	48d4 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    499a:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    499c:	fbb4 f2f3 	udiv	r2, r4, r3
    49a0:	fb03 f302 	mul.w	r3, r3, r2
    49a4:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    49a6:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    49a8:	69fb      	ldr	r3, [r7, #28]
    49aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    49ae:	d305      	bcc.n	49bc <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xac>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    49b0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    49b4:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    49b6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    49ba:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    49bc:	4b04      	ldr	r3, [pc, #16]	; (49d0 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    49be:	681b      	ldr	r3, [r3, #0]
    49c0:	69fa      	ldr	r2, [r7, #28]
    49c2:	605a      	str	r2, [r3, #4]
    return remainder;
    49c4:	69bb      	ldr	r3, [r7, #24]
  }
    49c6:	4618      	mov	r0, r3
    49c8:	3724      	adds	r7, #36	; 0x24
    49ca:	46bd      	mov	sp, r7
    49cc:	bd90      	pop	{r4, r7, pc}
    49ce:	bf00      	nop
    49d0:	10000014 	.word	0x10000014

000049d4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    49d4:	b480      	push	{r7}
    49d6:	b083      	sub	sp, #12
    49d8:	af00      	add	r7, sp, #0
    49da:	6078      	str	r0, [r7, #4]
	{ return __r; }
    49dc:	687b      	ldr	r3, [r7, #4]
    49de:	e9d3 2300 	ldrd	r2, r3, [r3]
    49e2:	4610      	mov	r0, r2
    49e4:	4619      	mov	r1, r3
    49e6:	370c      	adds	r7, #12
    49e8:	46bd      	mov	sp, r7
    49ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    49ee:	4770      	bx	lr

000049f0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    49f0:	b480      	push	{r7}
    49f2:	b083      	sub	sp, #12
    49f4:	af00      	add	r7, sp, #0
    49f6:	6078      	str	r0, [r7, #4]
    49f8:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    49fa:	683b      	ldr	r3, [r7, #0]
    49fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a00:	6879      	ldr	r1, [r7, #4]
    4a02:	e9c1 2300 	strd	r2, r3, [r1]
    4a06:	687b      	ldr	r3, [r7, #4]
    4a08:	4618      	mov	r0, r3
    4a0a:	370c      	adds	r7, #12
    4a0c:	46bd      	mov	sp, r7
    4a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a12:	4770      	bx	lr

00004a14 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4a14:	b580      	push	{r7, lr}
    4a16:	b086      	sub	sp, #24
    4a18:	af00      	add	r7, sp, #0
    4a1a:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4a1c:	6878      	ldr	r0, [r7, #4]
    4a1e:	f000 f807 	bl	4a30 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    4a22:	eef0 7a40 	vmov.f32	s15, s0
	}
    4a26:	eeb0 0a67 	vmov.f32	s0, s15
    4a2a:	3718      	adds	r7, #24
    4a2c:	46bd      	mov	sp, r7
    4a2e:	bd80      	pop	{r7, pc}

00004a30 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    4a30:	b480      	push	{r7}
    4a32:	b085      	sub	sp, #20
    4a34:	af00      	add	r7, sp, #0
    4a36:	60f8      	str	r0, [r7, #12]
    4a38:	7239      	strb	r1, [r7, #8]
    4a3a:	713a      	strb	r2, [r7, #4]
    4a3c:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    4a3e:	68fb      	ldr	r3, [r7, #12]
    4a40:	edd3 7a00 	vldr	s15, [r3]
    4a44:	ed9f 7a05 	vldr	s14, [pc, #20]	; 4a5c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
    4a48:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
    4a4c:	eeb0 0a67 	vmov.f32	s0, s15
    4a50:	3714      	adds	r7, #20
    4a52:	46bd      	mov	sp, r7
    4a54:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a58:	4770      	bx	lr
    4a5a:	bf00      	nop
    4a5c:	49742400 	.word	0x49742400

00004a60 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
    4a60:	b580      	push	{r7, lr}
    4a62:	b084      	sub	sp, #16
    4a64:	af00      	add	r7, sp, #0
    4a66:	6078      	str	r0, [r7, #4]
    4a68:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
    4a6a:	2100      	movs	r1, #0
    4a6c:	6878      	ldr	r0, [r7, #4]
    4a6e:	f000 f8e3 	bl	4c38 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
    4a72:	f04f 000c 	mov.w	r0, #12
    4a76:	f04f 0100 	mov.w	r1, #0
    4a7a:	f7ff fc5d 	bl	4338 <units::literals::operator"" _MHz(unsigned long long)>
    4a7e:	4603      	mov	r3, r0
    4a80:	60bb      	str	r3, [r7, #8]
    4a82:	f107 0208 	add.w	r2, r7, #8
    4a86:	463b      	mov	r3, r7
    4a88:	4611      	mov	r1, r2
    4a8a:	4618      	mov	r0, r3
    4a8c:	f000 f982 	bl	4d94 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4a90:	4603      	mov	r3, r0
    4a92:	2b00      	cmp	r3, #0
    4a94:	d00f      	beq.n	4ab6 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
    4a96:	4b16      	ldr	r3, [pc, #88]	; (4af0 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
    4a98:	683a      	ldr	r2, [r7, #0]
    4a9a:	6819      	ldr	r1, [r3, #0]
    4a9c:	6878      	ldr	r0, [r7, #4]
    4a9e:	f000 fa95 	bl	4fcc <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
    4aa2:	2101      	movs	r1, #1
    4aa4:	6878      	ldr	r0, [r7, #4]
    4aa6:	f000 f8eb 	bl	4c80 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
    4aaa:	463b      	mov	r3, r7
    4aac:	4619      	mov	r1, r3
    4aae:	4811      	ldr	r0, [pc, #68]	; (4af4 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    4ab0:	f001 f802 	bl	5ab8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4ab4:	e007      	b.n	4ac6 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
    4ab6:	2100      	movs	r1, #0
    4ab8:	6878      	ldr	r0, [r7, #4]
    4aba:	f000 f8e1 	bl	4c80 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
    4abe:	490e      	ldr	r1, [pc, #56]	; (4af8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
    4ac0:	480c      	ldr	r0, [pc, #48]	; (4af4 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    4ac2:	f000 fff9 	bl	5ab8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
    4ac6:	2101      	movs	r1, #1
    4ac8:	6878      	ldr	r0, [r7, #4]
    4aca:	f000 fae3 	bl	5094 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
    4ace:	23ff      	movs	r3, #255	; 0xff
    4ad0:	733b      	strb	r3, [r7, #12]
    4ad2:	f107 030c 	add.w	r3, r7, #12
    4ad6:	2201      	movs	r2, #1
    4ad8:	4619      	mov	r1, r3
    4ada:	6878      	ldr	r0, [r7, #4]
    4adc:	f000 f80e 	bl	4afc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
    4ae0:	2100      	movs	r1, #0
    4ae2:	6878      	ldr	r0, [r7, #4]
    4ae4:	f000 fb14 	bl	5110 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
    4ae8:	bf00      	nop
    4aea:	3710      	adds	r7, #16
    4aec:	46bd      	mov	sp, r7
    4aee:	bd80      	pop	{r7, pc}
    4af0:	00008ee8 	.word	0x00008ee8
    4af4:	10000024 	.word	0x10000024
    4af8:	00008eec 	.word	0x00008eec

00004afc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
    4afc:	b580      	push	{r7, lr}
    4afe:	b084      	sub	sp, #16
    4b00:	af00      	add	r7, sp, #0
    4b02:	60f8      	str	r0, [r7, #12]
    4b04:	60b9      	str	r1, [r7, #8]
    4b06:	4613      	mov	r3, r2
    4b08:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
    4b0a:	79fb      	ldrb	r3, [r7, #7]
    4b0c:	2b04      	cmp	r3, #4
    4b0e:	d90e      	bls.n	4b2e <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x32>
    4b10:	23b2      	movs	r3, #178	; 0xb2
    4b12:	4a0b      	ldr	r2, [pc, #44]	; (4b40 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
    4b14:	490b      	ldr	r1, [pc, #44]	; (4b44 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
    4b16:	480c      	ldr	r0, [pc, #48]	; (4b48 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
    4b18:	f7ff fb06 	bl	4128 <printf>
    4b1c:	480b      	ldr	r0, [pc, #44]	; (4b4c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
    4b1e:	f7fe f9bd 	bl	2e9c <puts>
    4b22:	2100      	movs	r1, #0
    4b24:	2001      	movs	r0, #1
    4b26:	f7fd ff49 	bl	29bc <sjsu::debug::PrintBacktrace(bool, void*)>
    4b2a:	f7fd ff93 	bl	2a54 <sjsu::Halt()>
    system_controller->PCLKSEL = peripheral_divider;
    4b2e:	4b08      	ldr	r3, [pc, #32]	; (4b50 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
    4b30:	681b      	ldr	r3, [r3, #0]
    4b32:	79fa      	ldrb	r2, [r7, #7]
    4b34:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
    4b38:	bf00      	nop
    4b3a:	3710      	adds	r7, #16
    4b3c:	46bd      	mov	sp, r7
    4b3e:	bd80      	pop	{r7, pc}
    4b40:	0000888c 	.word	0x0000888c
    4b44:	00008f08 	.word	0x00008f08
    4b48:	00008910 	.word	0x00008910
    4b4c:	000089b0 	.word	0x000089b0
    4b50:	100007fc 	.word	0x100007fc

00004b54 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
    4b54:	b480      	push	{r7}
    4b56:	b083      	sub	sp, #12
    4b58:	af00      	add	r7, sp, #0
    4b5a:	6078      	str	r0, [r7, #4]
    4b5c:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
    4b5e:	4b05      	ldr	r3, [pc, #20]	; (4b74 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
    4b60:	681b      	ldr	r3, [r3, #0]
    4b62:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
    4b66:	4618      	mov	r0, r3
    4b68:	370c      	adds	r7, #12
    4b6a:	46bd      	mov	sp, r7
    4b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b70:	4770      	bx	lr
    4b72:	bf00      	nop
    4b74:	100007fc 	.word	0x100007fc

00004b78 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
    4b78:	b480      	push	{r7}
    4b7a:	b083      	sub	sp, #12
    4b7c:	af00      	add	r7, sp, #0
    4b7e:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
    4b80:	4b03      	ldr	r3, [pc, #12]	; (4b90 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
    4b82:	681b      	ldr	r3, [r3, #0]
  }
    4b84:	4618      	mov	r0, r3
    4b86:	370c      	adds	r7, #12
    4b88:	46bd      	mov	sp, r7
    4b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b8e:	4770      	bx	lr
    4b90:	10000024 	.word	0x10000024

00004b94 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
    4b94:	b480      	push	{r7}
    4b96:	b085      	sub	sp, #20
    4b98:	af00      	add	r7, sp, #0
    4b9a:	6078      	str	r0, [r7, #4]
    4b9c:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
    4b9e:	4b0b      	ldr	r3, [pc, #44]	; (4bcc <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
    4ba0:	681b      	ldr	r3, [r3, #0]
    4ba2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4ba6:	683a      	ldr	r2, [r7, #0]
    4ba8:	7812      	ldrb	r2, [r2, #0]
    4baa:	4611      	mov	r1, r2
    4bac:	2201      	movs	r2, #1
    4bae:	408a      	lsls	r2, r1
    4bb0:	4013      	ands	r3, r2
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	bf14      	ite	ne
    4bb6:	2301      	movne	r3, #1
    4bb8:	2300      	moveq	r3, #0
    4bba:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
    4bbc:	7bfb      	ldrb	r3, [r7, #15]
  }
    4bbe:	4618      	mov	r0, r3
    4bc0:	3714      	adds	r7, #20
    4bc2:	46bd      	mov	sp, r7
    4bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bc8:	4770      	bx	lr
    4bca:	bf00      	nop
    4bcc:	100007fc 	.word	0x100007fc

00004bd0 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
    4bd0:	b590      	push	{r4, r7, lr}
    4bd2:	b083      	sub	sp, #12
    4bd4:	af00      	add	r7, sp, #0
    4bd6:	6078      	str	r0, [r7, #4]
    4bd8:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    4bda:	4b09      	ldr	r3, [pc, #36]	; (4c00 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    4bdc:	681b      	ldr	r3, [r3, #0]
    4bde:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    4be2:	683b      	ldr	r3, [r7, #0]
    4be4:	781b      	ldrb	r3, [r3, #0]
    4be6:	4619      	mov	r1, r3
    system_controller->PCONP =
    4be8:	4b05      	ldr	r3, [pc, #20]	; (4c00 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    4bea:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    4bec:	4610      	mov	r0, r2
    4bee:	f7fd f8aa 	bl	1d46 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    4bf2:	4603      	mov	r3, r0
    system_controller->PCONP =
    4bf4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    4bf8:	bf00      	nop
    4bfa:	370c      	adds	r7, #12
    4bfc:	46bd      	mov	sp, r7
    4bfe:	bd90      	pop	{r4, r7, pc}
    4c00:	100007fc 	.word	0x100007fc

00004c04 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
    4c04:	b590      	push	{r4, r7, lr}
    4c06:	b083      	sub	sp, #12
    4c08:	af00      	add	r7, sp, #0
    4c0a:	6078      	str	r0, [r7, #4]
    4c0c:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    4c0e:	4b09      	ldr	r3, [pc, #36]	; (4c34 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    4c10:	681b      	ldr	r3, [r3, #0]
    4c12:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    4c16:	683b      	ldr	r3, [r7, #0]
    4c18:	781b      	ldrb	r3, [r3, #0]
    4c1a:	4619      	mov	r1, r3
    system_controller->PCONP =
    4c1c:	4b05      	ldr	r3, [pc, #20]	; (4c34 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    4c1e:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    4c20:	4610      	mov	r0, r2
    4c22:	f7fd f87d 	bl	1d20 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    4c26:	4603      	mov	r3, r0
    system_controller->PCONP =
    4c28:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    4c2c:	bf00      	nop
    4c2e:	370c      	adds	r7, #12
    4c30:	46bd      	mov	sp, r7
    4c32:	bd90      	pop	{r4, r7, pc}
    4c34:	100007fc 	.word	0x100007fc

00004c38 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
    4c38:	b590      	push	{r4, r7, lr}
    4c3a:	b083      	sub	sp, #12
    4c3c:	af00      	add	r7, sp, #0
    4c3e:	6078      	str	r0, [r7, #4]
    4c40:	460b      	mov	r3, r1
    4c42:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
    4c44:	4b0c      	ldr	r3, [pc, #48]	; (4c78 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    4c46:	681b      	ldr	r3, [r3, #0]
    4c48:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    4c4c:	8879      	ldrh	r1, [r7, #2]
    4c4e:	4b0a      	ldr	r3, [pc, #40]	; (4c78 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    4c50:	681c      	ldr	r4, [r3, #0]
    4c52:	4b0a      	ldr	r3, [pc, #40]	; (4c7c <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
    4c54:	781a      	ldrb	r2, [r3, #0]
    4c56:	785b      	ldrb	r3, [r3, #1]
    4c58:	021b      	lsls	r3, r3, #8
    4c5a:	431a      	orrs	r2, r3
    4c5c:	2300      	movs	r3, #0
    4c5e:	f362 030f 	bfi	r3, r2, #0, #16
    4c62:	461a      	mov	r2, r3
    4c64:	f000 ff3b 	bl	5ade <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    4c68:	4603      	mov	r3, r0
    4c6a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
    4c6e:	bf00      	nop
    4c70:	370c      	adds	r7, #12
    4c72:	46bd      	mov	sp, r7
    4c74:	bd90      	pop	{r4, r7, pc}
    4c76:	bf00      	nop
    4c78:	100007fc 	.word	0x100007fc
    4c7c:	00008ef0 	.word	0x00008ef0

00004c80 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
    4c80:	b590      	push	{r4, r7, lr}
    4c82:	b083      	sub	sp, #12
    4c84:	af00      	add	r7, sp, #0
    4c86:	6078      	str	r0, [r7, #4]
    4c88:	460b      	mov	r3, r1
    4c8a:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
    4c8c:	4b0c      	ldr	r3, [pc, #48]	; (4cc0 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    4c8e:	681b      	ldr	r3, [r3, #0]
    4c90:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    4c94:	8879      	ldrh	r1, [r7, #2]
    4c96:	4b0a      	ldr	r3, [pc, #40]	; (4cc0 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    4c98:	681c      	ldr	r4, [r3, #0]
    4c9a:	4b0a      	ldr	r3, [pc, #40]	; (4cc4 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
    4c9c:	781a      	ldrb	r2, [r3, #0]
    4c9e:	785b      	ldrb	r3, [r3, #1]
    4ca0:	021b      	lsls	r3, r3, #8
    4ca2:	431a      	orrs	r2, r3
    4ca4:	2300      	movs	r3, #0
    4ca6:	f362 030f 	bfi	r3, r2, #0, #16
    4caa:	461a      	mov	r2, r3
    4cac:	f000 ff17 	bl	5ade <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    4cb0:	4603      	mov	r3, r0
    4cb2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
    4cb6:	bf00      	nop
    4cb8:	370c      	adds	r7, #12
    4cba:	46bd      	mov	sp, r7
    4cbc:	bd90      	pop	{r4, r7, pc}
    4cbe:	bf00      	nop
    4cc0:	100007fc 	.word	0x100007fc
    4cc4:	00008efc 	.word	0x00008efc

00004cc8 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
    4cc8:	b590      	push	{r4, r7, lr}
    4cca:	b083      	sub	sp, #12
    4ccc:	af00      	add	r7, sp, #0
    4cce:	6078      	str	r0, [r7, #4]
    4cd0:	460b      	mov	r3, r1
    4cd2:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
    4cd4:	4b0c      	ldr	r3, [pc, #48]	; (4d08 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    4cd6:	681b      	ldr	r3, [r3, #0]
    4cd8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    4cdc:	8879      	ldrh	r1, [r7, #2]
    4cde:	4b0a      	ldr	r3, [pc, #40]	; (4d08 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    4ce0:	681c      	ldr	r4, [r3, #0]
    4ce2:	4b0a      	ldr	r3, [pc, #40]	; (4d0c <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
    4ce4:	781a      	ldrb	r2, [r3, #0]
    4ce6:	785b      	ldrb	r3, [r3, #1]
    4ce8:	021b      	lsls	r3, r3, #8
    4cea:	431a      	orrs	r2, r3
    4cec:	2300      	movs	r3, #0
    4cee:	f362 030f 	bfi	r3, r2, #0, #16
    4cf2:	461a      	mov	r2, r3
    4cf4:	f000 fef3 	bl	5ade <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    4cf8:	4603      	mov	r3, r0
    4cfa:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
    4cfe:	bf00      	nop
    4d00:	370c      	adds	r7, #12
    4d02:	46bd      	mov	sp, r7
    4d04:	bd90      	pop	{r4, r7, pc}
    4d06:	bf00      	nop
    4d08:	100007fc 	.word	0x100007fc
    4d0c:	00008f00 	.word	0x00008f00

00004d10 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
    4d10:	b590      	push	{r4, r7, lr}
    4d12:	b083      	sub	sp, #12
    4d14:	af00      	add	r7, sp, #0
    4d16:	6078      	str	r0, [r7, #4]
    4d18:	460b      	mov	r3, r1
    4d1a:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
    4d1c:	4b0c      	ldr	r3, [pc, #48]	; (4d50 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    4d1e:	681b      	ldr	r3, [r3, #0]
    4d20:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
    4d24:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
    4d26:	4b0a      	ldr	r3, [pc, #40]	; (4d50 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    4d28:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
    4d2a:	4b0a      	ldr	r3, [pc, #40]	; (4d54 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
    4d2c:	781a      	ldrb	r2, [r3, #0]
    4d2e:	785b      	ldrb	r3, [r3, #1]
    4d30:	021b      	lsls	r3, r3, #8
    4d32:	431a      	orrs	r2, r3
    4d34:	2300      	movs	r3, #0
    4d36:	f362 030f 	bfi	r3, r2, #0, #16
    4d3a:	461a      	mov	r2, r3
    4d3c:	f000 fecf 	bl	5ade <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    4d40:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
    4d42:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
    4d46:	bf00      	nop
    4d48:	370c      	adds	r7, #12
    4d4a:	46bd      	mov	sp, r7
    4d4c:	bd90      	pop	{r4, r7, pc}
    4d4e:	bf00      	nop
    4d50:	100007fc 	.word	0x100007fc
    4d54:	00008f04 	.word	0x00008f04

00004d58 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    4d58:	b580      	push	{r7, lr}
    4d5a:	ed2d 8b02 	vpush	{d8}
    4d5e:	b082      	sub	sp, #8
    4d60:	af00      	add	r7, sp, #0
    4d62:	6078      	str	r0, [r7, #4]
    4d64:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
    4d66:	687b      	ldr	r3, [r7, #4]
    4d68:	ed93 8a00 	vldr	s16, [r3]
    4d6c:	683b      	ldr	r3, [r7, #0]
    4d6e:	4618      	mov	r0, r3
    4d70:	f7ff fb19 	bl	43a6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4d74:	eef0 7a40 	vmov.f32	s15, s0
    4d78:	eeb4 8ae7 	vcmpe.f32	s16, s15
    4d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d80:	bf4c      	ite	mi
    4d82:	2301      	movmi	r3, #1
    4d84:	2300      	movpl	r3, #0
    4d86:	b2db      	uxtb	r3, r3
		}
    4d88:	4618      	mov	r0, r3
    4d8a:	3708      	adds	r7, #8
    4d8c:	46bd      	mov	sp, r7
    4d8e:	ecbd 8b02 	vpop	{d8}
    4d92:	bd80      	pop	{r7, pc}

00004d94 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    4d94:	b580      	push	{r7, lr}
    4d96:	ed2d 8b02 	vpush	{d8}
    4d9a:	b082      	sub	sp, #8
    4d9c:	af00      	add	r7, sp, #0
    4d9e:	6078      	str	r0, [r7, #4]
    4da0:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	ed93 8a00 	vldr	s16, [r3]
    4da8:	683b      	ldr	r3, [r7, #0]
    4daa:	4618      	mov	r0, r3
    4dac:	f7ff fafb 	bl	43a6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4db0:	eef0 7a40 	vmov.f32	s15, s0
    4db4:	eeb4 8ae7 	vcmpe.f32	s16, s15
    4db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dbc:	bfcc      	ite	gt
    4dbe:	2301      	movgt	r3, #1
    4dc0:	2300      	movle	r3, #0
    4dc2:	b2db      	uxtb	r3, r3
		}
    4dc4:	4618      	mov	r0, r3
    4dc6:	3708      	adds	r7, #8
    4dc8:	46bd      	mov	sp, r7
    4dca:	ecbd 8b02 	vpop	{d8}
    4dce:	bd80      	pop	{r7, pc}

00004dd0 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    4dd0:	b580      	push	{r7, lr}
    4dd2:	b082      	sub	sp, #8
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    4dd8:	6878      	ldr	r0, [r7, #4]
    4dda:	f000 f805 	bl	4de8 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    4dde:	4603      	mov	r3, r0
		}
    4de0:	4618      	mov	r0, r3
    4de2:	3708      	adds	r7, #8
    4de4:	46bd      	mov	sp, r7
    4de6:	bd80      	pop	{r7, pc}

00004de8 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    4de8:	b580      	push	{r7, lr}
    4dea:	b082      	sub	sp, #8
    4dec:	af00      	add	r7, sp, #0
    4dee:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	4618      	mov	r0, r3
    4df4:	f7ff fd04 	bl	4800 <units::linear_scale<float>::operator()() const>
    4df8:	eef0 7a40 	vmov.f32	s15, s0
    4dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4e00:	ee17 3a90 	vmov	r3, s15
		}
    4e04:	4618      	mov	r0, r3
    4e06:	3708      	adds	r7, #8
    4e08:	46bd      	mov	sp, r7
    4e0a:	bd80      	pop	{r7, pc}

00004e0c <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    4e0c:	b580      	push	{r7, lr}
    4e0e:	b082      	sub	sp, #8
    4e10:	af00      	add	r7, sp, #0
    4e12:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    4e14:	687b      	ldr	r3, [r7, #4]
    4e16:	4618      	mov	r0, r3
    4e18:	f7ff fcf2 	bl	4800 <units::linear_scale<float>::operator()() const>
    4e1c:	eef0 7a40 	vmov.f32	s15, s0
    4e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4e24:	ee17 3a90 	vmov	r3, s15
    4e28:	b29b      	uxth	r3, r3
		}
    4e2a:	4618      	mov	r0, r3
    4e2c:	3708      	adds	r7, #8
    4e2e:	46bd      	mov	sp, r7
    4e30:	bd80      	pop	{r7, pc}
    4e32:	Address 0x0000000000004e32 is out of bounds.


00004e34 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
    4e34:	b590      	push	{r4, r7, lr}
    4e36:	b08d      	sub	sp, #52	; 0x34
    4e38:	af00      	add	r7, sp, #0
    4e3a:	60f8      	str	r0, [r7, #12]
    4e3c:	60b9      	str	r1, [r7, #8]
    4e3e:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
    4e40:	f44f 70c0 	mov.w	r0, #384	; 0x180
    4e44:	f04f 0100 	mov.w	r1, #0
    4e48:	f7ff fa76 	bl	4338 <units::literals::operator"" _MHz(unsigned long long)>
    4e4c:	4603      	mov	r3, r0
    4e4e:	613b      	str	r3, [r7, #16]
    4e50:	f107 0210 	add.w	r2, r7, #16
    4e54:	1d3b      	adds	r3, r7, #4
    4e56:	4611      	mov	r1, r2
    4e58:	4618      	mov	r0, r3
    4e5a:	f7ff ff7d 	bl	4d58 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4e5e:	4603      	mov	r3, r0
    4e60:	f083 0301 	eor.w	r3, r3, #1
    4e64:	b2db      	uxtb	r3, r3
    4e66:	2b00      	cmp	r3, #0
    4e68:	d114      	bne.n	4e94 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
    4e6a:	f04f 000c 	mov.w	r0, #12
    4e6e:	f04f 0100 	mov.w	r1, #0
    4e72:	f7ff fa61 	bl	4338 <units::literals::operator"" _MHz(unsigned long long)>
    4e76:	4603      	mov	r3, r0
    4e78:	617b      	str	r3, [r7, #20]
    4e7a:	f107 0214 	add.w	r2, r7, #20
    4e7e:	1d3b      	adds	r3, r7, #4
    4e80:	4611      	mov	r1, r2
    4e82:	4618      	mov	r0, r3
    4e84:	f7ff ff86 	bl	4d94 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4e88:	4603      	mov	r3, r0
    4e8a:	f083 0301 	eor.w	r3, r3, #1
    4e8e:	b2db      	uxtb	r3, r3
    4e90:	2b00      	cmp	r3, #0
    4e92:	d001      	beq.n	4e98 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
    4e94:	2301      	movs	r3, #1
    4e96:	e000      	b.n	4e9a <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    4e98:	2300      	movs	r3, #0
    4e9a:	2b00      	cmp	r3, #0
    4e9c:	d00e      	beq.n	4ebc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x88>
    4e9e:	23f4      	movs	r3, #244	; 0xf4
    4ea0:	4a44      	ldr	r2, [pc, #272]	; (4fb4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    4ea2:	4945      	ldr	r1, [pc, #276]	; (4fb8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
    4ea4:	4845      	ldr	r0, [pc, #276]	; (4fbc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    4ea6:	f7ff f93f 	bl	4128 <printf>
    4eaa:	4845      	ldr	r0, [pc, #276]	; (4fc0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    4eac:	f7fd fff6 	bl	2e9c <puts>
    4eb0:	2100      	movs	r1, #0
    4eb2:	2001      	movs	r0, #1
    4eb4:	f7fd fd82 	bl	29bc <sjsu::debug::PrintBacktrace(bool, void*)>
    4eb8:	f7fd fdcc 	bl	2a54 <sjsu::Halt()>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
    4ebc:	2301      	movs	r3, #1
    4ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
    4ec2:	1d3b      	adds	r3, r7, #4
    4ec4:	4618      	mov	r0, r3
    4ec6:	f7ff ff83 	bl	4dd0 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    4eca:	4604      	mov	r4, r0
    4ecc:	f107 0308 	add.w	r3, r7, #8
    4ed0:	4618      	mov	r0, r3
    4ed2:	f7ff ff7d 	bl	4dd0 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    4ed6:	4603      	mov	r3, r0
    4ed8:	fbb4 f2f3 	udiv	r2, r4, r3
    4edc:	fb03 f302 	mul.w	r3, r3, r2
    4ee0:	1ae3      	subs	r3, r4, r3
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	bf14      	ite	ne
    4ee6:	2301      	movne	r3, #1
    4ee8:	2300      	moveq	r3, #0
    4eea:	b2db      	uxtb	r3, r3
    4eec:	2b00      	cmp	r3, #0
    4eee:	d017      	beq.n	4f20 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xec>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
    4ef0:	f107 0208 	add.w	r2, r7, #8
    4ef4:	1d3b      	adds	r3, r7, #4
    4ef6:	4611      	mov	r1, r2
    4ef8:	4618      	mov	r0, r3
    4efa:	f000 fe02 	bl	5b02 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4efe:	4603      	mov	r3, r0
    4f00:	61fb      	str	r3, [r7, #28]
    4f02:	f107 031c 	add.w	r3, r7, #28
    4f06:	2101      	movs	r1, #1
    4f08:	4618      	mov	r0, r3
    4f0a:	f000 fe26 	bl	5b5a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    4f0e:	4603      	mov	r3, r0
    4f10:	61bb      	str	r3, [r7, #24]
    4f12:	f107 0318 	add.w	r3, r7, #24
    4f16:	4618      	mov	r0, r3
    4f18:	f000 fdb3 	bl	5a82 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    4f1c:	62b8      	str	r0, [r7, #40]	; 0x28
    4f1e:	e00e      	b.n	4f3e <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10a>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
    4f20:	f107 0208 	add.w	r2, r7, #8
    4f24:	1d3b      	adds	r3, r7, #4
    4f26:	4611      	mov	r1, r2
    4f28:	4618      	mov	r0, r3
    4f2a:	f000 fdea 	bl	5b02 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4f2e:	4603      	mov	r3, r0
    4f30:	623b      	str	r3, [r7, #32]
    4f32:	f107 0320 	add.w	r3, r7, #32
    4f36:	4618      	mov	r0, r3
    4f38:	f000 fda3 	bl	5a82 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    4f3c:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
    4f3e:	2301      	movs	r3, #1
    4f40:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
    4f42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    4f46:	2b00      	cmp	r3, #0
    4f48:	d02f      	beq.n	4faa <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x176>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
    4f4a:	f107 0308 	add.w	r3, r7, #8
    4f4e:	4618      	mov	r0, r3
    4f50:	f7ff ff5c 	bl	4e0c <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    4f54:	4603      	mov	r3, r0
    4f56:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
    4f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4f5a:	b29b      	uxth	r3, r3
    4f5c:	fb12 f303 	smulbb	r3, r2, r3
    4f60:	b29b      	uxth	r3, r3
    4f62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    4f64:	fb12 f303 	smulbb	r3, r2, r3
    4f68:	b29b      	uxth	r3, r3
    4f6a:	005b      	lsls	r3, r3, #1
    4f6c:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
    4f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    4f70:	2b9b      	cmp	r3, #155	; 0x9b
    4f72:	d903      	bls.n	4f7c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x148>
      {
        calculating = false;
    4f74:	2300      	movs	r3, #0
    4f76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    4f7a:	e7e2      	b.n	4f42 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
    4f7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    4f7e:	005b      	lsls	r3, r3, #1
    4f80:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
    4f82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    4f84:	2b07      	cmp	r3, #7
    4f86:	d9dc      	bls.n	4f42 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
    4f88:	f240 1311 	movw	r3, #273	; 0x111
    4f8c:	4a09      	ldr	r2, [pc, #36]	; (4fb4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    4f8e:	490d      	ldr	r1, [pc, #52]	; (4fc4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
    4f90:	480d      	ldr	r0, [pc, #52]	; (4fc8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x194>)
    4f92:	f7ff f8c9 	bl	4128 <printf>
    4f96:	480a      	ldr	r0, [pc, #40]	; (4fc0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    4f98:	f7fd ff80 	bl	2e9c <puts>
    4f9c:	2100      	movs	r1, #0
    4f9e:	2001      	movs	r0, #1
    4fa0:	f7fd fd0c 	bl	29bc <sjsu::debug::PrintBacktrace(bool, void*)>
    4fa4:	f7fd fd56 	bl	2a54 <sjsu::Halt()>
    while (calculating)
    4fa8:	e7cb      	b.n	4f42 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
    4faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
    4fac:	4618      	mov	r0, r3
    4fae:	3734      	adds	r7, #52	; 0x34
    4fb0:	46bd      	mov	sp, r7
    4fb2:	bd90      	pop	{r4, r7, pc}
    4fb4:	000089c8 	.word	0x000089c8
    4fb8:	00008f20 	.word	0x00008f20
    4fbc:	00008a44 	.word	0x00008a44
    4fc0:	000089b0 	.word	0x000089b0
    4fc4:	00008f38 	.word	0x00008f38
    4fc8:	00008b34 	.word	0x00008b34

00004fcc <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
    4fcc:	b580      	push	{r7, lr}
    4fce:	b086      	sub	sp, #24
    4fd0:	af00      	add	r7, sp, #0
    4fd2:	60f8      	str	r0, [r7, #12]
    4fd4:	60b9      	str	r1, [r7, #8]
    4fd6:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    4fd8:	2301      	movs	r3, #1
    4fda:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    4fdc:	687a      	ldr	r2, [r7, #4]
    4fde:	68b9      	ldr	r1, [r7, #8]
    4fe0:	68f8      	ldr	r0, [r7, #12]
    4fe2:	f7ff ff27 	bl	4e34 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    4fe6:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    4fe8:	2100      	movs	r1, #0
    4fea:	68f8      	ldr	r0, [r7, #12]
    4fec:	f7ff fe24 	bl	4c38 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    4ff0:	2100      	movs	r1, #0
    4ff2:	68f8      	ldr	r0, [r7, #12]
    4ff4:	f7ff fe44 	bl	4c80 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    4ff8:	2100      	movs	r1, #0
    4ffa:	68f8      	ldr	r0, [r7, #12]
    4ffc:	f7ff fe64 	bl	4cc8 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    5000:	2100      	movs	r1, #0
    5002:	68f8      	ldr	r0, [r7, #12]
    5004:	f7ff fe84 	bl	4d10 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    5008:	4b21      	ldr	r3, [pc, #132]	; (5090 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    500a:	681b      	ldr	r3, [r3, #0]
    500c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5010:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    5014:	693b      	ldr	r3, [r7, #16]
    5016:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    5018:	4b1d      	ldr	r3, [pc, #116]	; (5090 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    501a:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    501c:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    501e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    5022:	4b1b      	ldr	r3, [pc, #108]	; (5090 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5024:	681b      	ldr	r3, [r3, #0]
    5026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    502a:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    502e:	8afb      	ldrh	r3, [r7, #22]
    5030:	015b      	lsls	r3, r3, #5
    5032:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    5034:	4b16      	ldr	r3, [pc, #88]	; (5090 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5036:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    5038:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    503a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    503e:	4b14      	ldr	r3, [pc, #80]	; (5090 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5040:	681b      	ldr	r3, [r3, #0]
    5042:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    5046:	4b12      	ldr	r3, [pc, #72]	; (5090 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5048:	681b      	ldr	r3, [r3, #0]
    504a:	f042 0201 	orr.w	r2, r2, #1
    504e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    5052:	4b0f      	ldr	r3, [pc, #60]	; (5090 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5054:	681b      	ldr	r3, [r3, #0]
    5056:	22aa      	movs	r2, #170	; 0xaa
    5058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    505c:	4b0c      	ldr	r3, [pc, #48]	; (5090 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    505e:	681b      	ldr	r3, [r3, #0]
    5060:	2255      	movs	r2, #85	; 0x55
    5062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    5066:	4b0a      	ldr	r3, [pc, #40]	; (5090 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5068:	681b      	ldr	r3, [r3, #0]
    506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    506e:	210a      	movs	r1, #10
    5070:	4618      	mov	r0, r3
    5072:	f7fc fe7a 	bl	1d6a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    5076:	4603      	mov	r3, r0
    5078:	f083 0301 	eor.w	r3, r3, #1
    507c:	b2db      	uxtb	r3, r3
    507e:	2b00      	cmp	r3, #0
    5080:	d001      	beq.n	5086 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    5082:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    5084:	e7ef      	b.n	5066 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    5086:	bf00      	nop
    5088:	3718      	adds	r7, #24
    508a:	46bd      	mov	sp, r7
    508c:	bd80      	pop	{r7, pc}
    508e:	bf00      	nop
    5090:	100007fc 	.word	0x100007fc

00005094 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    5094:	b590      	push	{r4, r7, lr}
    5096:	b083      	sub	sp, #12
    5098:	af00      	add	r7, sp, #0
    509a:	6078      	str	r0, [r7, #4]
    509c:	460b      	mov	r3, r1
    509e:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    50a0:	78fb      	ldrb	r3, [r7, #3]
    50a2:	2b1f      	cmp	r3, #31
    50a4:	d90f      	bls.n	50c6 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x32>
    50a6:	f44f 73a9 	mov.w	r3, #338	; 0x152
    50aa:	4a13      	ldr	r2, [pc, #76]	; (50f8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    50ac:	4913      	ldr	r1, [pc, #76]	; (50fc <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    50ae:	4814      	ldr	r0, [pc, #80]	; (5100 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    50b0:	f7ff f83a 	bl	4128 <printf>
    50b4:	4813      	ldr	r0, [pc, #76]	; (5104 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    50b6:	f7fd fef1 	bl	2e9c <puts>
    50ba:	2100      	movs	r1, #0
    50bc:	2001      	movs	r0, #1
    50be:	f7fd fc7d 	bl	29bc <sjsu::debug::PrintBacktrace(bool, void*)>
    50c2:	f7fd fcc7 	bl	2a54 <sjsu::Halt()>

    system_controller->CCLKSEL = bit::Insert(
    50c6:	4b10      	ldr	r3, [pc, #64]	; (5108 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    50c8:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    50ca:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    50ce:	4b0e      	ldr	r3, [pc, #56]	; (5108 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    50d0:	681c      	ldr	r4, [r3, #0]
    50d2:	4b0e      	ldr	r3, [pc, #56]	; (510c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    50d4:	78f9      	ldrb	r1, [r7, #3]
    50d6:	781a      	ldrb	r2, [r3, #0]
    50d8:	785b      	ldrb	r3, [r3, #1]
    50da:	021b      	lsls	r3, r3, #8
    50dc:	431a      	orrs	r2, r3
    50de:	2300      	movs	r3, #0
    50e0:	f362 030f 	bfi	r3, r2, #0, #16
    50e4:	461a      	mov	r2, r3
    50e6:	f7fc fcab 	bl	1a40 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    50ea:	4603      	mov	r3, r0
    50ec:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    50f0:	bf00      	nop
    50f2:	370c      	adds	r7, #12
    50f4:	46bd      	mov	sp, r7
    50f6:	bd90      	pop	{r4, r7, pc}
    50f8:	00008bdc 	.word	0x00008bdc
    50fc:	00008f50 	.word	0x00008f50
    5100:	00008c24 	.word	0x00008c24
    5104:	000089b0 	.word	0x000089b0
    5108:	100007fc 	.word	0x100007fc
    510c:	00008ef8 	.word	0x00008ef8

00005110 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    5110:	b590      	push	{r4, r7, lr}
    5112:	b083      	sub	sp, #12
    5114:	af00      	add	r7, sp, #0
    5116:	6078      	str	r0, [r7, #4]
    5118:	460b      	mov	r3, r1
    511a:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    511c:	4b0c      	ldr	r3, [pc, #48]	; (5150 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    511e:	681b      	ldr	r3, [r3, #0]
    5120:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    5124:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    5126:	4b0a      	ldr	r3, [pc, #40]	; (5150 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    5128:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    512a:	4b0a      	ldr	r3, [pc, #40]	; (5154 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    512c:	781a      	ldrb	r2, [r3, #0]
    512e:	785b      	ldrb	r3, [r3, #1]
    5130:	021b      	lsls	r3, r3, #8
    5132:	431a      	orrs	r2, r3
    5134:	2300      	movs	r3, #0
    5136:	f362 030f 	bfi	r3, r2, #0, #16
    513a:	461a      	mov	r2, r3
    513c:	f000 fccf 	bl	5ade <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    5140:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    5142:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    5146:	bf00      	nop
    5148:	370c      	adds	r7, #12
    514a:	46bd      	mov	sp, r7
    514c:	bd90      	pop	{r4, r7, pc}
    514e:	bf00      	nop
    5150:	100007fc 	.word	0x100007fc
    5154:	00008ef4 	.word	0x00008ef4

00005158 <sjsu::Pin::PullUp() const>:
  void PullUp() const
    5158:	b580      	push	{r7, lr}
    515a:	b082      	sub	sp, #8
    515c:	af00      	add	r7, sp, #0
    515e:	6078      	str	r0, [r7, #4]
    SetPull(Resistor::kPullUp);
    5160:	687b      	ldr	r3, [r7, #4]
    5162:	681b      	ldr	r3, [r3, #0]
    5164:	3308      	adds	r3, #8
    5166:	681b      	ldr	r3, [r3, #0]
    5168:	2102      	movs	r1, #2
    516a:	6878      	ldr	r0, [r7, #4]
    516c:	4798      	blx	r3
  }
    516e:	bf00      	nop
    5170:	3708      	adds	r7, #8
    5172:	46bd      	mov	sp, r7
    5174:	bd80      	pop	{r7, pc}

00005176 <sjsu::Uart::Flush() const>:
  /// Will flush all bytes currently head with the UART peripherals buffers.
  ///
  /// The default implementation reads out all of the bytes by checking
  /// HasData() repeatedly and use Read() to read each. Some implementations may
  /// have more efficient methods of clearing their buffers.
  virtual void Flush() const
    5176:	b580      	push	{r7, lr}
    5178:	b082      	sub	sp, #8
    517a:	af00      	add	r7, sp, #0
    517c:	6078      	str	r0, [r7, #4]
  {
    PollingFlush();
    517e:	6878      	ldr	r0, [r7, #4]
    5180:	f000 f820 	bl	51c4 <sjsu::Uart::PollingFlush() const>
  }
    5184:	bf00      	nop
    5186:	3708      	adds	r7, #8
    5188:	46bd      	mov	sp, r7
    518a:	bd80      	pop	{r7, pc}

0000518c <sjsu::Uart::Read() const>:
  }

  /// @return Retrieves a single byte from UART RX line. Users must ensure that
  /// HasData() is true before reading using this method. Otherwise contents of
  /// read data will not be correct and the returned byte will be 0xFF.
  uint8_t Read() const
    518c:	b580      	push	{r7, lr}
    518e:	b084      	sub	sp, #16
    5190:	af00      	add	r7, sp, #0
    5192:	6078      	str	r0, [r7, #4]
  {
    uint8_t byte;
    if (Read(&byte, sizeof(byte)) == 0)
    5194:	687b      	ldr	r3, [r7, #4]
    5196:	681b      	ldr	r3, [r3, #0]
    5198:	330c      	adds	r3, #12
    519a:	681b      	ldr	r3, [r3, #0]
    519c:	f107 010f 	add.w	r1, r7, #15
    51a0:	2201      	movs	r2, #1
    51a2:	6878      	ldr	r0, [r7, #4]
    51a4:	4798      	blx	r3
    51a6:	4603      	mov	r3, r0
    51a8:	2b00      	cmp	r3, #0
    51aa:	bf0c      	ite	eq
    51ac:	2301      	moveq	r3, #1
    51ae:	2300      	movne	r3, #0
    51b0:	b2db      	uxtb	r3, r3
    51b2:	2b00      	cmp	r3, #0
    51b4:	d001      	beq.n	51ba <sjsu::Uart::Read() const+0x2e>
    {
      byte = 0xFF;
    51b6:	23ff      	movs	r3, #255	; 0xff
    51b8:	73fb      	strb	r3, [r7, #15]
    }
    return byte;
    51ba:	7bfb      	ldrb	r3, [r7, #15]
  }
    51bc:	4618      	mov	r0, r3
    51be:	3710      	adds	r7, #16
    51c0:	46bd      	mov	sp, r7
    51c2:	bd80      	pop	{r7, pc}

000051c4 <sjsu::Uart::PollingFlush() const>:

  /// Will flush all bytes currently head with the UART peripherals buffers.
  ///
  /// by checking HasData() repeatedly and use Read() to read each. Some
  /// implementations may have more efficient methods of clearing their buffers.
  void PollingFlush() const
    51c4:	b580      	push	{r7, lr}
    51c6:	b082      	sub	sp, #8
    51c8:	af00      	add	r7, sp, #0
    51ca:	6078      	str	r0, [r7, #4]
  {
    while (HasData())
    51cc:	687b      	ldr	r3, [r7, #4]
    51ce:	681b      	ldr	r3, [r3, #0]
    51d0:	3310      	adds	r3, #16
    51d2:	681b      	ldr	r3, [r3, #0]
    51d4:	6878      	ldr	r0, [r7, #4]
    51d6:	4798      	blx	r3
    51d8:	4603      	mov	r3, r0
    51da:	2b00      	cmp	r3, #0
    51dc:	d003      	beq.n	51e6 <sjsu::Uart::PollingFlush() const+0x22>
    {
      Read();
    51de:	6878      	ldr	r0, [r7, #4]
    51e0:	f7ff ffd4 	bl	518c <sjsu::Uart::Read() const>
    while (HasData())
    51e4:	e7f2      	b.n	51cc <sjsu::Uart::PollingFlush() const+0x8>
    }
  }
    51e6:	bf00      	nop
    51e8:	3708      	adds	r7, #8
    51ea:	46bd      	mov	sp, r7
    51ec:	bd80      	pop	{r7, pc}
    51ee:	Address 0x00000000000051ee is out of bounds.


000051f0 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    51f0:	b480      	push	{r7}
    51f2:	b089      	sub	sp, #36	; 0x24
    51f4:	af00      	add	r7, sp, #0
    51f6:	6078      	str	r0, [r7, #4]
    51f8:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    51fc:	687b      	ldr	r3, [r7, #4]
    51fe:	2200      	movs	r2, #0
    5200:	601a      	str	r2, [r3, #0]
    5202:	687b      	ldr	r3, [r7, #4]
    5204:	2200      	movs	r2, #0
    5206:	605a      	str	r2, [r3, #4]
    5208:	687b      	ldr	r3, [r7, #4]
    520a:	2201      	movs	r2, #1
    520c:	609a      	str	r2, [r3, #8]
  bool finished = false;
    520e:	2300      	movs	r3, #0
    5210:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    5212:	2300      	movs	r3, #0
    5214:	61bb      	str	r3, [r7, #24]
    5216:	69bb      	ldr	r3, [r7, #24]
    5218:	2b0e      	cmp	r3, #14
    521a:	dc4f      	bgt.n	52bc <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    521c:	7ffb      	ldrb	r3, [r7, #31]
    521e:	2b00      	cmp	r3, #0
    5220:	d14c      	bne.n	52bc <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    5222:	69bb      	ldr	r3, [r7, #24]
    5224:	3301      	adds	r3, #1
    5226:	617b      	str	r3, [r7, #20]
    5228:	697b      	ldr	r3, [r7, #20]
    522a:	2b0e      	cmp	r3, #14
    522c:	dc42      	bgt.n	52b4 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    522e:	7ffb      	ldrb	r3, [r7, #31]
    5230:	2b00      	cmp	r3, #0
    5232:	d13f      	bne.n	52b4 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    5234:	69bb      	ldr	r3, [r7, #24]
    5236:	ee07 3a90 	vmov	s15, r3
    523a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    523e:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    5242:	697b      	ldr	r3, [r7, #20]
    5244:	ee07 3a90 	vmov	s15, r3
    5248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    524c:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    5250:	edd7 6a04 	vldr	s13, [r7, #16]
    5254:	ed97 7a03 	vldr	s14, [r7, #12]
    5258:	eec6 7a87 	vdiv.f32	s15, s13, s14
    525c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5260:	ee77 7a87 	vadd.f32	s15, s15, s14
    5264:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    5268:	edd7 7a02 	vldr	s15, [r7, #8]
    526c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 52cc <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    5270:	ee77 7a87 	vadd.f32	s15, s15, s14
    5274:	ed97 7a00 	vldr	s14, [r7]
    5278:	eeb4 7ae7 	vcmpe.f32	s14, s15
    527c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5280:	d814      	bhi.n	52ac <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    5282:	edd7 7a02 	vldr	s15, [r7, #8]
    5286:	ed9f 7a11 	vldr	s14, [pc, #68]	; 52cc <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    528a:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    528e:	ed97 7a00 	vldr	s14, [r7]
    5292:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    529a:	db07      	blt.n	52ac <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    529c:	69ba      	ldr	r2, [r7, #24]
    529e:	687b      	ldr	r3, [r7, #4]
    52a0:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    52a2:	697a      	ldr	r2, [r7, #20]
    52a4:	687b      	ldr	r3, [r7, #4]
    52a6:	609a      	str	r2, [r3, #8]
        finished          = true;
    52a8:	2301      	movs	r3, #1
    52aa:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    52ac:	697b      	ldr	r3, [r7, #20]
    52ae:	3301      	adds	r3, #1
    52b0:	617b      	str	r3, [r7, #20]
    52b2:	e7b9      	b.n	5228 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    52b4:	69bb      	ldr	r3, [r7, #24]
    52b6:	3301      	adds	r3, #1
    52b8:	61bb      	str	r3, [r7, #24]
    52ba:	e7ac      	b.n	5216 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    52bc:	bf00      	nop
}
    52be:	6878      	ldr	r0, [r7, #4]
    52c0:	3724      	adds	r7, #36	; 0x24
    52c2:	46bd      	mov	sp, r7
    52c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    52c8:	4770      	bx	lr
    52ca:	bf00      	nop
    52cc:	3c23d70a 	.word	0x3c23d70a

000052d0 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    52d0:	b480      	push	{r7}
    52d2:	b087      	sub	sp, #28
    52d4:	af00      	add	r7, sp, #0
    52d6:	ed87 0a03 	vstr	s0, [r7, #12]
    52da:	edc7 0a02 	vstr	s1, [r7, #8]
    52de:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    52e0:	687b      	ldr	r3, [r7, #4]
    52e2:	ee07 3a90 	vmov	s15, r3
    52e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    52ea:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    52ee:	edd7 7a03 	vldr	s15, [r7, #12]
    52f2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    52f6:	ee27 7a87 	vmul.f32	s14, s15, s14
    52fa:	edd7 7a02 	vldr	s15, [r7, #8]
    52fe:	ee67 7a27 	vmul.f32	s15, s14, s15
    5302:	ed97 7a05 	vldr	s14, [r7, #20]
    5306:	eec7 6a27 	vdiv.f32	s13, s14, s15
    530a:	eef0 7a66 	vmov.f32	s15, s13
}
    530e:	eeb0 0a67 	vmov.f32	s0, s15
    5312:	371c      	adds	r7, #28
    5314:	46bd      	mov	sp, r7
    5316:	f85d 7b04 	ldr.w	r7, [sp], #4
    531a:	4770      	bx	lr

0000531c <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    531c:	b480      	push	{r7}
    531e:	b087      	sub	sp, #28
    5320:	af00      	add	r7, sp, #0
    5322:	ed87 0a03 	vstr	s0, [r7, #12]
    5326:	edc7 0a02 	vstr	s1, [r7, #8]
    532a:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    532c:	687b      	ldr	r3, [r7, #4]
    532e:	ee07 3a90 	vmov	s15, r3
    5332:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5336:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    533a:	edd7 7a03 	vldr	s15, [r7, #12]
    533e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    5342:	ee27 7a87 	vmul.f32	s14, s15, s14
    5346:	edd7 7a02 	vldr	s15, [r7, #8]
    534a:	ee67 7a27 	vmul.f32	s15, s14, s15
    534e:	ed97 7a05 	vldr	s14, [r7, #20]
    5352:	eec7 6a27 	vdiv.f32	s13, s14, s15
    5356:	eef0 7a66 	vmov.f32	s15, s13
}
    535a:	eeb0 0a67 	vmov.f32	s0, s15
    535e:	371c      	adds	r7, #28
    5360:	46bd      	mov	sp, r7
    5362:	f85d 7b04 	ldr.w	r7, [sp], #4
    5366:	4770      	bx	lr

00005368 <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    5368:	b480      	push	{r7}
    536a:	b083      	sub	sp, #12
    536c:	af00      	add	r7, sp, #0
    536e:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    5372:	edd7 7a01 	vldr	s15, [r7, #4]
    5376:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    537a:	ee77 7a87 	vadd.f32	s15, s15, s14
    537e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    5386:	eeb0 0a67 	vmov.f32	s0, s15
    538a:	370c      	adds	r7, #12
    538c:	46bd      	mov	sp, r7
    538e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5392:	4770      	bx	lr

00005394 <sjsu::lpc40xx::uart::IsDecimal(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecimal(float value)
{
    5394:	b580      	push	{r7, lr}
    5396:	b086      	sub	sp, #24
    5398:	af00      	add	r7, sp, #0
    539a:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    539e:	2300      	movs	r3, #0
    53a0:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    53a2:	ed97 0a01 	vldr	s0, [r7, #4]
    53a6:	f7ff ffdf 	bl	5368 <sjsu::lpc40xx::uart::RoundFloat(float)>
    53aa:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    53ae:	ed97 7a01 	vldr	s14, [r7, #4]
    53b2:	edd7 7a04 	vldr	s15, [r7, #16]
    53b6:	ee77 7a67 	vsub.f32	s15, s14, s15
    53ba:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    53be:	edd7 7a03 	vldr	s15, [r7, #12]
    53c2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 53f0 <sjsu::lpc40xx::uart::IsDecimal(float)+0x5c>
    53c6:	eef4 7ac7 	vcmpe.f32	s15, s14
    53ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53ce:	db0a      	blt.n	53e6 <sjsu::lpc40xx::uart::IsDecimal(float)+0x52>
    53d0:	edd7 7a03 	vldr	s15, [r7, #12]
    53d4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 53f4 <sjsu::lpc40xx::uart::IsDecimal(float)+0x60>
    53d8:	eef4 7ac7 	vcmpe.f32	s15, s14
    53dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53e0:	d801      	bhi.n	53e6 <sjsu::lpc40xx::uart::IsDecimal(float)+0x52>
  {
    result = true;
    53e2:	2301      	movs	r3, #1
    53e4:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    53e6:	7dfb      	ldrb	r3, [r7, #23]
}
    53e8:	4618      	mov	r0, r3
    53ea:	3718      	adds	r7, #24
    53ec:	46bd      	mov	sp, r7
    53ee:	bd80      	pop	{r7, pc}
    53f0:	bc23d70a 	.word	0xbc23d70a
    53f4:	3c23d70a 	.word	0x3c23d70a

000053f8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    53f8:	b590      	push	{r4, r7, lr}
    53fa:	b091      	sub	sp, #68	; 0x44
    53fc:	af00      	add	r7, sp, #0
    53fe:	61f8      	str	r0, [r7, #28]
    5400:	61b9      	str	r1, [r7, #24]
    5402:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    5404:	f107 0314 	add.w	r3, r7, #20
    5408:	4618      	mov	r0, r3
    540a:	f7ff fa63 	bl	48d4 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    540e:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    5410:	2300      	movs	r3, #0
    5412:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    5414:	69fb      	ldr	r3, [r7, #28]
    5416:	2200      	movs	r2, #0
    5418:	601a      	str	r2, [r3, #0]
    541a:	69fb      	ldr	r3, [r7, #28]
    541c:	2200      	movs	r2, #0
    541e:	605a      	str	r2, [r3, #4]
    5420:	69fb      	ldr	r3, [r7, #28]
    5422:	2201      	movs	r2, #1
    5424:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    5426:	69bb      	ldr	r3, [r7, #24]
    5428:	ee07 3a90 	vmov	s15, r3
    542c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5430:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    5434:	f04f 0300 	mov.w	r3, #0
    5438:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    543a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    543e:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    5440:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    5444:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    5446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    544a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    544c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    544e:	2b04      	cmp	r3, #4
    5450:	f000 80be 	beq.w	55d0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
    5454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5456:	2b03      	cmp	r3, #3
    5458:	f200 80b8 	bhi.w	55cc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    545c:	a201      	add	r2, pc, #4	; (adr r2, 5464 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    545e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5462:	bf00      	nop
    5464:	00005475 	.word	0x00005475
    5468:	000054cf 	.word	0x000054cf
    546c:	0000552f 	.word	0x0000552f
    5470:	0000559f 	.word	0x0000559f
    switch (state)
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);
    5474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5476:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    547a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    547e:	f7ff ff27 	bl	52d0 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    5482:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

        if (divide_estimate < 1.0f)
    5486:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    548a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    548e:	eef4 7ac7 	vcmpe.f32	s15, s14
    5492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5496:	d505      	bpl.n	54a4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    5498:	69fb      	ldr	r3, [r7, #28]
    549a:	2200      	movs	r2, #0
    549c:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    549e:	2304      	movs	r3, #4
    54a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    54a2:	e094      	b.n	55ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecimal(divide_estimate))
    54a4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    54a8:	f7ff ff74 	bl	5394 <sjsu::lpc40xx::uart::IsDecimal(float)>
    54ac:	4603      	mov	r3, r0
    54ae:	2b00      	cmp	r3, #0
    54b0:	d00a      	beq.n	54c8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    54b2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    54b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    54ba:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    54be:	69fb      	ldr	r3, [r7, #28]
    54c0:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    54c2:	2304      	movs	r3, #4
    54c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    54c6:	e082      	b.n	55ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    54c8:	2301      	movs	r3, #1
    54ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    54cc:	e07f      	b.n	55ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    54ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    54d0:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    54d4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    54d8:	f7ff fefa 	bl	52d0 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    54dc:	eef0 7a40 	vmov.f32	s15, s0
    54e0:	eeb0 0a67 	vmov.f32	s0, s15
    54e4:	f7ff ff40 	bl	5368 <sjsu::lpc40xx::uart::RoundFloat(float)>
    54e8:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    54ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    54ee:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    54f2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    54f6:	f7ff ff11 	bl	531c <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    54fa:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    54fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    5502:	ed9f 7a36 	vldr	s14, [pc, #216]	; 55dc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    5506:	eef4 7ac7 	vcmpe.f32	s15, s14
    550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    550e:	db0b      	blt.n	5528 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    5510:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    5514:	ed9f 7a32 	vldr	s14, [pc, #200]	; 55e0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    5518:	eef4 7ac7 	vcmpe.f32	s15, s14
    551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5520:	d802      	bhi.n	5528 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    5522:	2303      	movs	r3, #3
    5524:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    5526:	e052      	b.n	55ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    5528:	2302      	movs	r3, #2
    552a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    552c:	e04f      	b.n	55ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    552e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    5532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5536:	ee77 7a87 	vadd.f32	s15, s15, s14
    553a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    553e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    5542:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    5546:	eef4 7ac7 	vcmpe.f32	s15, s14
    554a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    554e:	dd02      	ble.n	5556 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    5550:	2304      	movs	r3, #4
    5552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    5554:	e03b      	b.n	55ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    5556:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    555a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    555e:	eef4 7ac7 	vcmpe.f32	s15, s14
    5562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5566:	dd0f      	ble.n	5588 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    5568:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    556c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5570:	ee77 7a87 	vadd.f32	s15, s15, s14
    5574:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    5578:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    557c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5580:	ee77 7a87 	vadd.f32	s15, s15, s14
    5584:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    5588:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    558c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    5590:	eec6 7a87 	vdiv.f32	s15, s13, s14
    5594:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    5598:	2301      	movs	r3, #1
    559a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    559c:	e017      	b.n	55ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    559e:	69fc      	ldr	r4, [r7, #28]
    55a0:	463b      	mov	r3, r7
    55a2:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    55a6:	4618      	mov	r0, r3
    55a8:	f7ff fe22 	bl	51f0 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    55ac:	463b      	mov	r3, r7
    55ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    55b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    55b6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    55ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    55be:	ee17 2a90 	vmov	r2, s15
    55c2:	69fb      	ldr	r3, [r7, #28]
    55c4:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    55c6:	2304      	movs	r3, #4
    55c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    55ca:	e000      	b.n	55ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    55cc:	bf00      	nop
  while (state != States::kDone)
    55ce:	e73d      	b.n	544c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    55d0:	bf00      	nop
}
    55d2:	69f8      	ldr	r0, [r7, #28]
    55d4:	3744      	adds	r7, #68	; 0x44
    55d6:	46bd      	mov	sp, r7
    55d8:	bd90      	pop	{r4, r7, pc}
    55da:	bf00      	nop
    55dc:	3f8ccccd 	.word	0x3f8ccccd
    55e0:	3ff33333 	.word	0x3ff33333

000055e4 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:
  };

  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  explicit constexpr Uart(const Port_t & port) : port_(port) {}

  Status Initialize(uint32_t baud_rate) const override
    55e4:	b580      	push	{r7, lr}
    55e6:	b084      	sub	sp, #16
    55e8:	af00      	add	r7, sp, #0
    55ea:	6078      	str	r0, [r7, #4]
    55ec:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    55ee:	2307      	movs	r3, #7
    55f0:	73fb      	strb	r3, [r7, #15]
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    55f2:	f7fe ff65 	bl	44c0 <sjsu::SystemController::GetPlatformController()>
    55f6:	4603      	mov	r3, r0
        port_.power_on_id);
    55f8:	681a      	ldr	r2, [r3, #0]
    55fa:	3214      	adds	r2, #20
    55fc:	6812      	ldr	r2, [r2, #0]
    55fe:	6879      	ldr	r1, [r7, #4]
    5600:	6849      	ldr	r1, [r1, #4]
    5602:	3104      	adds	r1, #4
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    5604:	4618      	mov	r0, r3
    5606:	4790      	blx	r2

    SetBaudRate(baud_rate);
    5608:	6839      	ldr	r1, [r7, #0]
    560a:	6878      	ldr	r0, [r7, #4]
    560c:	f000 f83f 	bl	568e <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    5610:	687b      	ldr	r3, [r7, #4]
    5612:	685b      	ldr	r3, [r3, #4]
    5614:	68db      	ldr	r3, [r3, #12]
    5616:	681b      	ldr	r3, [r3, #0]
    5618:	3304      	adds	r3, #4
    561a:	681b      	ldr	r3, [r3, #0]
    561c:	687a      	ldr	r2, [r7, #4]
    561e:	6852      	ldr	r2, [r2, #4]
    5620:	68d0      	ldr	r0, [r2, #12]
    5622:	687a      	ldr	r2, [r7, #4]
    5624:	6852      	ldr	r2, [r2, #4]
    5626:	7c12      	ldrb	r2, [r2, #16]
    5628:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    562c:	b2d2      	uxtb	r2, r2
    562e:	4611      	mov	r1, r2
    5630:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    5632:	687b      	ldr	r3, [r7, #4]
    5634:	685b      	ldr	r3, [r3, #4]
    5636:	689b      	ldr	r3, [r3, #8]
    5638:	681b      	ldr	r3, [r3, #0]
    563a:	3304      	adds	r3, #4
    563c:	681b      	ldr	r3, [r3, #0]
    563e:	687a      	ldr	r2, [r7, #4]
    5640:	6852      	ldr	r2, [r2, #4]
    5642:	6890      	ldr	r0, [r2, #8]
    5644:	687a      	ldr	r2, [r7, #4]
    5646:	6852      	ldr	r2, [r2, #4]
    5648:	7c12      	ldrb	r2, [r2, #16]
    564a:	f3c2 0202 	ubfx	r2, r2, #0, #3
    564e:	b2d2      	uxtb	r2, r2
    5650:	4611      	mov	r1, r2
    5652:	4798      	blx	r3
    port_.rx.PullUp();
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	685b      	ldr	r3, [r3, #4]
    5658:	68db      	ldr	r3, [r3, #12]
    565a:	4618      	mov	r0, r3
    565c:	f7ff fd7c 	bl	5158 <sjsu::Pin::PullUp() const>
    port_.tx.PullUp();
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	685b      	ldr	r3, [r3, #4]
    5664:	689b      	ldr	r3, [r3, #8]
    5666:	4618      	mov	r0, r3
    5668:	f7ff fd76 	bl	5158 <sjsu::Pin::PullUp() const>
    port_.registers->FCR |= kFIFOEnableAndReset;
    566c:	687b      	ldr	r3, [r7, #4]
    566e:	685b      	ldr	r3, [r3, #4]
    5670:	681b      	ldr	r3, [r3, #0]
    5672:	7a1b      	ldrb	r3, [r3, #8]
    5674:	b2da      	uxtb	r2, r3
    5676:	687b      	ldr	r3, [r7, #4]
    5678:	685b      	ldr	r3, [r3, #4]
    567a:	681b      	ldr	r3, [r3, #0]
    567c:	f042 0207 	orr.w	r2, r2, #7
    5680:	b2d2      	uxtb	r2, r2
    5682:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    5684:	2300      	movs	r3, #0
  }
    5686:	4618      	mov	r0, r3
    5688:	3710      	adds	r7, #16
    568a:	46bd      	mov	sp, r7
    568c:	bd80      	pop	{r7, pc}

0000568e <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    568e:	b580      	push	{r7, lr}
    5690:	b088      	sub	sp, #32
    5692:	af00      	add	r7, sp, #0
    5694:	6078      	str	r0, [r7, #4]
    5696:	6039      	str	r1, [r7, #0]
  {
    auto peripheral_frequency =
        sjsu::SystemController::GetPlatformController().GetPeripheralFrequency(
    5698:	f7fe ff12 	bl	44c0 <sjsu::SystemController::GetPlatformController()>
    569c:	4602      	mov	r2, r0
            port_.power_on_id);
    569e:	687b      	ldr	r3, [r7, #4]
    56a0:	685b      	ldr	r3, [r3, #4]
    56a2:	3304      	adds	r3, #4
    56a4:	4619      	mov	r1, r3
    56a6:	4610      	mov	r0, r2
    56a8:	f7fe ff16 	bl	44d8 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    56ac:	4603      	mov	r3, r0
    56ae:	61bb      	str	r3, [r7, #24]

    uart::UartCalibration_t calibration =
        uart::GenerateUartCalibration(baud_rate, peripheral_frequency);
    56b0:	f107 030c 	add.w	r3, r7, #12
    56b4:	69ba      	ldr	r2, [r7, #24]
    56b6:	6839      	ldr	r1, [r7, #0]
    56b8:	4618      	mov	r0, r3
    56ba:	f7ff fe9d 	bl	53f8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    56be:	2380      	movs	r3, #128	; 0x80
    56c0:	77fb      	strb	r3, [r7, #31]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    56c2:	68fb      	ldr	r3, [r7, #12]
    56c4:	0a1b      	lsrs	r3, r3, #8
    56c6:	77bb      	strb	r3, [r7, #30]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    56c8:	68fb      	ldr	r3, [r7, #12]
    56ca:	777b      	strb	r3, [r7, #29]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    56cc:	697b      	ldr	r3, [r7, #20]
    56ce:	b2db      	uxtb	r3, r3
    56d0:	011b      	lsls	r3, r3, #4
    56d2:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    56d4:	693b      	ldr	r3, [r7, #16]
    56d6:	b2db      	uxtb	r3, r3
    56d8:	f003 030f 	and.w	r3, r3, #15
    56dc:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    56de:	4313      	orrs	r3, r2
    56e0:	773b      	strb	r3, [r7, #28]

    port_.registers->LCR = kDlabBit;
    56e2:	687b      	ldr	r3, [r7, #4]
    56e4:	685b      	ldr	r3, [r3, #4]
    56e6:	681b      	ldr	r3, [r3, #0]
    56e8:	2280      	movs	r2, #128	; 0x80
    56ea:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    56ec:	687b      	ldr	r3, [r7, #4]
    56ee:	685b      	ldr	r3, [r3, #4]
    56f0:	681b      	ldr	r3, [r3, #0]
    56f2:	7fba      	ldrb	r2, [r7, #30]
    56f4:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    56f6:	687b      	ldr	r3, [r7, #4]
    56f8:	685b      	ldr	r3, [r3, #4]
    56fa:	681b      	ldr	r3, [r3, #0]
    56fc:	7f7a      	ldrb	r2, [r7, #29]
    56fe:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    5700:	687b      	ldr	r3, [r7, #4]
    5702:	685b      	ldr	r3, [r3, #4]
    5704:	681b      	ldr	r3, [r3, #0]
    5706:	7f3a      	ldrb	r2, [r7, #28]
    5708:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    570c:	687b      	ldr	r3, [r7, #4]
    570e:	685b      	ldr	r3, [r3, #4]
    5710:	681b      	ldr	r3, [r3, #0]
    5712:	2203      	movs	r2, #3
    5714:	731a      	strb	r2, [r3, #12]
    return true;
    5716:	2301      	movs	r3, #1
  }
    5718:	4618      	mov	r0, r3
    571a:	3720      	adds	r7, #32
    571c:	46bd      	mov	sp, r7
    571e:	bd80      	pop	{r7, pc}

00005720 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const>:

  void Write(const void * data, size_t size) const override
    5720:	b580      	push	{r7, lr}
    5722:	b086      	sub	sp, #24
    5724:	af00      	add	r7, sp, #0
    5726:	60f8      	str	r0, [r7, #12]
    5728:	60b9      	str	r1, [r7, #8]
    572a:	607a      	str	r2, [r7, #4]
  {
    const uint8_t * data_buffer = reinterpret_cast<const uint8_t *>(data);
    572c:	68bb      	ldr	r3, [r7, #8]
    572e:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < size; i++)
    5730:	2300      	movs	r3, #0
    5732:	617b      	str	r3, [r7, #20]
    5734:	697a      	ldr	r2, [r7, #20]
    5736:	687b      	ldr	r3, [r7, #4]
    5738:	429a      	cmp	r2, r3
    573a:	d216      	bcs.n	576a <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x4a>
    {
      port_.registers->THR = data_buffer[i];
    573c:	693a      	ldr	r2, [r7, #16]
    573e:	697b      	ldr	r3, [r7, #20]
    5740:	441a      	add	r2, r3
    5742:	68fb      	ldr	r3, [r7, #12]
    5744:	685b      	ldr	r3, [r3, #4]
    5746:	681b      	ldr	r3, [r3, #0]
    5748:	7812      	ldrb	r2, [r2, #0]
    574a:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    574c:	68f8      	ldr	r0, [r7, #12]
    574e:	f000 f843 	bl	57d8 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    5752:	4603      	mov	r3, r0
    5754:	f083 0301 	eor.w	r3, r3, #1
    5758:	b2db      	uxtb	r3, r3
    575a:	2b00      	cmp	r3, #0
    575c:	d001      	beq.n	5762 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x42>
      {
        continue;
    575e:	bf00      	nop
      while (!TransmissionComplete())
    5760:	e7f4      	b.n	574c <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x2c>
    for (size_t i = 0; i < size; i++)
    5762:	697b      	ldr	r3, [r7, #20]
    5764:	3301      	adds	r3, #1
    5766:	617b      	str	r3, [r7, #20]
    5768:	e7e4      	b.n	5734 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x14>
      }
    }
  }
    576a:	bf00      	nop
    576c:	3718      	adds	r7, #24
    576e:	46bd      	mov	sp, r7
    5770:	bd80      	pop	{r7, pc}

00005772 <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const>:

  size_t Read(void * data, size_t size) const override
    5772:	b580      	push	{r7, lr}
    5774:	b086      	sub	sp, #24
    5776:	af00      	add	r7, sp, #0
    5778:	60f8      	str	r0, [r7, #12]
    577a:	60b9      	str	r1, [r7, #8]
    577c:	607a      	str	r2, [r7, #4]
  {
    uint8_t * data_buffer = reinterpret_cast<uint8_t *>(data);
    577e:	68bb      	ldr	r3, [r7, #8]
    5780:	613b      	str	r3, [r7, #16]
    size_t index          = 0;
    5782:	2300      	movs	r3, #0
    5784:	617b      	str	r3, [r7, #20]
    while (FifoHasData())
    5786:	68f8      	ldr	r0, [r7, #12]
    5788:	f000 f838 	bl	57fc <sjsu::lpc40xx::Uart::FifoHasData() const>
    578c:	4603      	mov	r3, r0
    578e:	2b00      	cmp	r3, #0
    5790:	d011      	beq.n	57b6 <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x44>
    {
      if (index >= size)
    5792:	697a      	ldr	r2, [r7, #20]
    5794:	687b      	ldr	r3, [r7, #4]
    5796:	429a      	cmp	r2, r3
    5798:	d20c      	bcs.n	57b4 <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x42>
      {
        break;
      }
      data_buffer[index++] = port_.registers->RBR;
    579a:	68fb      	ldr	r3, [r7, #12]
    579c:	685b      	ldr	r3, [r3, #4]
    579e:	681b      	ldr	r3, [r3, #0]
    57a0:	781b      	ldrb	r3, [r3, #0]
    57a2:	b2d9      	uxtb	r1, r3
    57a4:	697b      	ldr	r3, [r7, #20]
    57a6:	1c5a      	adds	r2, r3, #1
    57a8:	617a      	str	r2, [r7, #20]
    57aa:	693a      	ldr	r2, [r7, #16]
    57ac:	4413      	add	r3, r2
    57ae:	460a      	mov	r2, r1
    57b0:	701a      	strb	r2, [r3, #0]
    while (FifoHasData())
    57b2:	e7e8      	b.n	5786 <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x14>
        break;
    57b4:	bf00      	nop
    }
    return index;
    57b6:	697b      	ldr	r3, [r7, #20]
  }
    57b8:	4618      	mov	r0, r3
    57ba:	3718      	adds	r7, #24
    57bc:	46bd      	mov	sp, r7
    57be:	bd80      	pop	{r7, pc}

000057c0 <sjsu::lpc40xx::Uart::HasData() const>:

  bool HasData() const override
    57c0:	b580      	push	{r7, lr}
    57c2:	b082      	sub	sp, #8
    57c4:	af00      	add	r7, sp, #0
    57c6:	6078      	str	r0, [r7, #4]
  {
    return FifoHasData();
    57c8:	6878      	ldr	r0, [r7, #4]
    57ca:	f000 f817 	bl	57fc <sjsu::lpc40xx::Uart::FifoHasData() const>
    57ce:	4603      	mov	r3, r0
  }
    57d0:	4618      	mov	r0, r3
    57d2:	3708      	adds	r7, #8
    57d4:	46bd      	mov	sp, r7
    57d6:	bd80      	pop	{r7, pc}

000057d8 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    57d8:	b580      	push	{r7, lr}
    57da:	b082      	sub	sp, #8
    57dc:	af00      	add	r7, sp, #0
    57de:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	685b      	ldr	r3, [r3, #4]
    57e4:	681b      	ldr	r3, [r3, #0]
    57e6:	7d1b      	ldrb	r3, [r3, #20]
    57e8:	b2db      	uxtb	r3, r3
    57ea:	2105      	movs	r1, #5
    57ec:	4618      	mov	r0, r3
    57ee:	f000 f9d2 	bl	5b96 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    57f2:	4603      	mov	r3, r0
  }
    57f4:	4618      	mov	r0, r3
    57f6:	3708      	adds	r7, #8
    57f8:	46bd      	mov	sp, r7
    57fa:	bd80      	pop	{r7, pc}

000057fc <sjsu::lpc40xx::Uart::FifoHasData() const>:
  /// @return true if fifo contains receive data.
  bool FifoHasData() const
    57fc:	b580      	push	{r7, lr}
    57fe:	b082      	sub	sp, #8
    5800:	af00      	add	r7, sp, #0
    5802:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    5804:	687b      	ldr	r3, [r7, #4]
    5806:	685b      	ldr	r3, [r3, #4]
    5808:	681b      	ldr	r3, [r3, #0]
    580a:	7d1b      	ldrb	r3, [r3, #20]
    580c:	b2db      	uxtb	r3, r3
    580e:	2100      	movs	r1, #0
    5810:	4618      	mov	r0, r3
    5812:	f000 f9c0 	bl	5b96 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    5816:	4603      	mov	r3, r0
  }
    5818:	4618      	mov	r0, r3
    581a:	3708      	adds	r7, #8
    581c:	46bd      	mov	sp, r7
    581e:	bd80      	pop	{r7, pc}

00005820 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::InterruptController<sjsu::lpc40xx::kNumberOfIrqs,
                                  __NVIC_PRIO_BITS>
    interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    5820:	b580      	push	{r7, lr}
    5822:	b082      	sub	sp, #8
    5824:	af00      	add	r7, sp, #0
    5826:	6078      	str	r0, [r7, #4]
    5828:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    582a:	683a      	ldr	r2, [r7, #0]
    582c:	6879      	ldr	r1, [r7, #4]
    582e:	4804      	ldr	r0, [pc, #16]	; (5840 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    5830:	f7ff ff76 	bl	5720 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const>
  return length;
    5834:	683b      	ldr	r3, [r7, #0]
}
    5836:	4618      	mov	r0, r3
    5838:	3708      	adds	r7, #8
    583a:	46bd      	mov	sp, r7
    583c:	bd80      	pop	{r7, pc}
    583e:	bf00      	nop
    5840:	10000068 	.word	0x10000068

00005844 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    5844:	b580      	push	{r7, lr}
    5846:	b082      	sub	sp, #8
    5848:	af00      	add	r7, sp, #0
    584a:	6078      	str	r0, [r7, #4]
    584c:	6039      	str	r1, [r7, #0]
  // Wait until data comes in
  while (!uart0.HasData())
    584e:	480a      	ldr	r0, [pc, #40]	; (5878 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x34>)
    5850:	f7ff ffb6 	bl	57c0 <sjsu::lpc40xx::Uart::HasData() const>
    5854:	4603      	mov	r3, r0
    5856:	f083 0301 	eor.w	r3, r3, #1
    585a:	b2db      	uxtb	r3, r3
    585c:	2b00      	cmp	r3, #0
    585e:	d001      	beq.n	5864 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x20>
  {
    continue;
    5860:	bf00      	nop
  while (!uart0.HasData())
    5862:	e7f4      	b.n	584e <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0xa>
  }
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    5864:	683a      	ldr	r2, [r7, #0]
    5866:	6879      	ldr	r1, [r7, #4]
    5868:	4803      	ldr	r0, [pc, #12]	; (5878 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x34>)
    586a:	f7ff ff82 	bl	5772 <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const>
  return length;
    586e:	683b      	ldr	r3, [r7, #0]
}
    5870:	4618      	mov	r0, r3
    5872:	3708      	adds	r7, #8
    5874:	46bd      	mov	sp, r7
    5876:	bd80      	pop	{r7, pc}
    5878:	10000068 	.word	0x10000068

0000587c <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    587c:	b580      	push	{r7, lr}
    587e:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    5880:	4802      	ldr	r0, [pc, #8]	; (588c <ThreadRuntimeCounter+0x10>)
    5882:	f7fe fd0f 	bl	42a4 <sjsu::cortex::DwtCounter::GetCount()>
    5886:	4603      	mov	r3, r0
}
    5888:	4618      	mov	r0, r3
    588a:	bd80      	pop	{r7, pc}
    588c:	10000800 	.word	0x10000800

00005890 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    5890:	b580      	push	{r7, lr}
    5892:	b086      	sub	sp, #24
    5894:	af00      	add	r7, sp, #0
  // Enable FPU (Floating Point Unit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    5896:	f7fe fd15 	bl	42c4 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set the platform's interrupt controller.
  // This will be used by other libraries to enable and disable interrupts.
  sjsu::InterruptController::SetPlatformController(&interrupt_controller);
    589a:	4828      	ldr	r0, [pc, #160]	; (593c <sjsu::InitializePlatform()+0xac>)
    589c:	f7fe fd26 	bl	42ec <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)>
  sjsu::SystemController::SetPlatformController(&system_controller);
    58a0:	4827      	ldr	r0, [pc, #156]	; (5940 <sjsu::InitializePlatform()+0xb0>)
    58a2:	f7fe fdfd 	bl	44a0 <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    58a6:	4b27      	ldr	r3, [pc, #156]	; (5944 <sjsu::InitializePlatform()+0xb4>)
    58a8:	6819      	ldr	r1, [r3, #0]
    58aa:	4825      	ldr	r0, [pc, #148]	; (5940 <sjsu::InitializePlatform()+0xb0>)
    58ac:	f7ff f8d8 	bl	4a60 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    58b0:	23ff      	movs	r3, #255	; 0xff
    58b2:	703b      	strb	r3, [r7, #0]
    58b4:	463b      	mov	r3, r7
    58b6:	2201      	movs	r2, #1
    58b8:	4619      	mov	r1, r3
    58ba:	4821      	ldr	r0, [pc, #132]	; (5940 <sjsu::InitializePlatform()+0xb0>)
    58bc:	f7ff f91e 	bl	4afc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    58c0:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    58c4:	4820      	ldr	r0, [pc, #128]	; (5948 <sjsu::InitializePlatform()+0xb8>)
    58c6:	f7ff fe8d 	bl	55e4 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    58ca:	4820      	ldr	r0, [pc, #128]	; (594c <sjsu::InitializePlatform()+0xbc>)
    58cc:	f000 fdec 	bl	64a8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    58d0:	481f      	ldr	r0, [pc, #124]	; (5950 <sjsu::InitializePlatform()+0xc0>)
    58d2:	f000 fdf9 	bl	64c8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.Initialize();
    58d6:	481f      	ldr	r0, [pc, #124]	; (5954 <sjsu::InitializePlatform()+0xc4>)
    58d8:	f7fe fee8 	bl	46ac <sjsu::cortex::SystemTimer::Initialize() const>
  system_timer.SetTickFrequency(config::kRtosFrequency);
    58dc:	4b1e      	ldr	r3, [pc, #120]	; (5958 <sjsu::InitializePlatform()+0xc8>)
    58de:	6819      	ldr	r1, [r3, #0]
    58e0:	481c      	ldr	r0, [pc, #112]	; (5954 <sjsu::InitializePlatform()+0xc4>)
    58e2:	f7ff f815 	bl	4910 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    58e6:	481b      	ldr	r0, [pc, #108]	; (5954 <sjsu::InitializePlatform()+0xc4>)
    58e8:	f7fe ff38 	bl	475c <sjsu::cortex::SystemTimer::StartTimer() const>
    58ec:	6178      	str	r0, [r7, #20]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    58ee:	697b      	ldr	r3, [r7, #20]
    58f0:	2b00      	cmp	r3, #0
    58f2:	d00e      	beq.n	5912 <sjsu::InitializePlatform()+0x82>
    58f4:	23ba      	movs	r3, #186	; 0xba
    58f6:	4a19      	ldr	r2, [pc, #100]	; (595c <sjsu::InitializePlatform()+0xcc>)
    58f8:	4919      	ldr	r1, [pc, #100]	; (5960 <sjsu::InitializePlatform()+0xd0>)
    58fa:	481a      	ldr	r0, [pc, #104]	; (5964 <sjsu::InitializePlatform()+0xd4>)
    58fc:	f7fe fc14 	bl	4128 <printf>
    5900:	4819      	ldr	r0, [pc, #100]	; (5968 <sjsu::InitializePlatform()+0xd8>)
    5902:	f7fd facb 	bl	2e9c <puts>
    5906:	2100      	movs	r1, #0
    5908:	2001      	movs	r0, #1
    590a:	f7fd f857 	bl	29bc <sjsu::debug::PrintBacktrace(bool, void*)>
    590e:	f7fd f8a1 	bl	2a54 <sjsu::Halt()>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    5912:	4816      	ldr	r0, [pc, #88]	; (596c <sjsu::InitializePlatform()+0xdc>)
    5914:	f7fe fca4 	bl	4260 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    5918:	1d3b      	adds	r3, r7, #4
    591a:	4915      	ldr	r1, [pc, #84]	; (5970 <sjsu::InitializePlatform()+0xe0>)
    591c:	4618      	mov	r0, r3
    591e:	f7fc f8c9 	bl	1ab4 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    5922:	1d3b      	adds	r3, r7, #4
    5924:	4618      	mov	r0, r3
    5926:	f7fe fdad 	bl	4484 <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)>
    592a:	1d3b      	adds	r3, r7, #4
    592c:	4618      	mov	r0, r3
    592e:	f7fa ff65 	bl	7fc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>
}
    5932:	bf00      	nop
    5934:	3718      	adds	r7, #24
    5936:	46bd      	mov	sp, r7
    5938:	bd80      	pop	{r7, pc}
    593a:	bf00      	nop
    593c:	10000084 	.word	0x10000084
    5940:	10000064 	.word	0x10000064
    5944:	0000879c 	.word	0x0000879c
    5948:	10000068 	.word	0x10000068
    594c:	00005821 	.word	0x00005821
    5950:	00005845 	.word	0x00005845
    5954:	10000070 	.word	0x10000070
    5958:	000087a0 	.word	0x000087a0
    595c:	00008cc0 	.word	0x00008cc0
    5960:	00008fbc 	.word	0x00008fbc
    5964:	00008ce0 	.word	0x00008ce0
    5968:	000089b0 	.word	0x000089b0
    596c:	10000800 	.word	0x10000800
    5970:	00004635 	.word	0x00004635

00005974 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>:
      operator=(const function& __x)
    5974:	b580      	push	{r7, lr}
    5976:	b086      	sub	sp, #24
    5978:	af00      	add	r7, sp, #0
    597a:	6078      	str	r0, [r7, #4]
    597c:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
    597e:	f107 0308 	add.w	r3, r7, #8
    5982:	6839      	ldr	r1, [r7, #0]
    5984:	4618      	mov	r0, r3
    5986:	f000 f95d 	bl	5c44 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>
    598a:	f107 0308 	add.w	r3, r7, #8
    598e:	6879      	ldr	r1, [r7, #4]
    5990:	4618      	mov	r0, r3
    5992:	f000 f979 	bl	5c88 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)>
    5996:	f107 0308 	add.w	r3, r7, #8
    599a:	4618      	mov	r0, r3
    599c:	f7fa ff2e 	bl	7fc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>
	return *this;
    59a0:	687b      	ldr	r3, [r7, #4]
      }
    59a2:	4618      	mov	r0, r3
    59a4:	3718      	adds	r7, #24
    59a6:	46bd      	mov	sp, r7
    59a8:	bd80      	pop	{r7, pc}

000059aa <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    59aa:	b580      	push	{r7, lr}
    59ac:	b084      	sub	sp, #16
    59ae:	af00      	add	r7, sp, #0
    59b0:	6078      	str	r0, [r7, #4]
    59b2:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    59b4:	687b      	ldr	r3, [r7, #4]
    59b6:	4618      	mov	r0, r3
    59b8:	f7fe ff22 	bl	4800 <units::linear_scale<float>::operator()() const>
    59bc:	eef0 6a40 	vmov.f32	s13, s0
    59c0:	683b      	ldr	r3, [r7, #0]
    59c2:	ee07 3a90 	vmov	s15, r3
    59c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    59ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    59ce:	f107 030c 	add.w	r3, r7, #12
    59d2:	eeb0 0a47 	vmov.f32	s0, s14
    59d6:	4618      	mov	r0, r3
    59d8:	f7fe fd05 	bl	43e6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    59dc:	68fb      	ldr	r3, [r7, #12]
	}
    59de:	4618      	mov	r0, r3
    59e0:	3710      	adds	r7, #16
    59e2:	46bd      	mov	sp, r7
    59e4:	bd80      	pop	{r7, pc}

000059e6 <std::function<void ()>::function(decltype(nullptr))>:
      function(nullptr_t) noexcept
    59e6:	b580      	push	{r7, lr}
    59e8:	b082      	sub	sp, #8
    59ea:	af00      	add	r7, sp, #0
    59ec:	6078      	str	r0, [r7, #4]
    59ee:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	4618      	mov	r0, r3
    59f4:	f7fa fce8 	bl	3c8 <std::_Function_base::_Function_base()>
    59f8:	687b      	ldr	r3, [r7, #4]
    59fa:	4618      	mov	r0, r3
    59fc:	3708      	adds	r7, #8
    59fe:	46bd      	mov	sp, r7
    5a00:	bd80      	pop	{r7, pc}

00005a02 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    5a02:	b580      	push	{r7, lr}
    5a04:	b082      	sub	sp, #8
    5a06:	af00      	add	r7, sp, #0
    5a08:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    5a0a:	687b      	ldr	r3, [r7, #4]
    5a0c:	4618      	mov	r0, r3
    5a0e:	f000 f95c 	bl	5cca <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    5a12:	bf00      	nop
    5a14:	6878      	ldr	r0, [r7, #4]
    5a16:	3708      	adds	r7, #8
    5a18:	46bd      	mov	sp, r7
    5a1a:	bd80      	pop	{r7, pc}

00005a1c <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    5a1c:	b580      	push	{r7, lr}
    5a1e:	b084      	sub	sp, #16
    5a20:	af00      	add	r7, sp, #0
    5a22:	6078      	str	r0, [r7, #4]
    5a24:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    5a26:	f107 0308 	add.w	r3, r7, #8
    5a2a:	6839      	ldr	r1, [r7, #0]
    5a2c:	4618      	mov	r0, r3
    5a2e:	f000 f960 	bl	5cf2 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    5a32:	f107 0308 	add.w	r3, r7, #8
    5a36:	4618      	mov	r0, r3
    5a38:	f7fa fe3c 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    5a3c:	4602      	mov	r2, r0
    5a3e:	460b      	mov	r3, r1
    5a40:	6879      	ldr	r1, [r7, #4]
    5a42:	e9c1 2300 	strd	r2, r3, [r1]
    5a46:	687b      	ldr	r3, [r7, #4]
    5a48:	4618      	mov	r0, r3
    5a4a:	3710      	adds	r7, #16
    5a4c:	46bd      	mov	sp, r7
    5a4e:	bd80      	pop	{r7, pc}

00005a50 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    5a50:	b580      	push	{r7, lr}
    5a52:	b082      	sub	sp, #8
    5a54:	af00      	add	r7, sp, #0
    5a56:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    5a58:	6878      	ldr	r0, [r7, #4]
    5a5a:	f7fe ff47 	bl	48ec <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    5a5e:	4603      	mov	r3, r0
		}
    5a60:	4618      	mov	r0, r3
    5a62:	3708      	adds	r7, #8
    5a64:	46bd      	mov	sp, r7
    5a66:	bd80      	pop	{r7, pc}

00005a68 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>:
      operator""ns()
    5a68:	b580      	push	{r7, lr}
    5a6a:	b082      	sub	sp, #8
    5a6c:	af00      	add	r7, sp, #0
    5a6e:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	4618      	mov	r0, r3
    5a74:	f000 f94c 	bl	5d10 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>
    5a78:	bf00      	nop
    5a7a:	6878      	ldr	r0, [r7, #4]
    5a7c:	3708      	adds	r7, #8
    5a7e:	46bd      	mov	sp, r7
    5a80:	bd80      	pop	{r7, pc}

00005a82 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    5a82:	b580      	push	{r7, lr}
    5a84:	b084      	sub	sp, #16
    5a86:	af00      	add	r7, sp, #0
    5a88:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    5a8a:	687b      	ldr	r3, [r7, #4]
    5a8c:	4618      	mov	r0, r3
    5a8e:	f7fe feb7 	bl	4800 <units::linear_scale<float>::operator()() const>
    5a92:	eef0 7a40 	vmov.f32	s15, s0
    5a96:	edc7 7a03 	vstr	s15, [r7, #12]
    5a9a:	f107 030c 	add.w	r3, r7, #12
    5a9e:	4618      	mov	r0, r3
    5aa0:	f000 f94e 	bl	5d40 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5aa4:	eef0 7a40 	vmov.f32	s15, s0
    5aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5aac:	ee17 3a90 	vmov	r3, s15
		}
    5ab0:	4618      	mov	r0, r3
    5ab2:	3710      	adds	r7, #16
    5ab4:	46bd      	mov	sp, r7
    5ab6:	bd80      	pop	{r7, pc}

00005ab8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    5ab8:	b580      	push	{r7, lr}
    5aba:	b082      	sub	sp, #8
    5abc:	af00      	add	r7, sp, #0
    5abe:	6078      	str	r0, [r7, #4]
    5ac0:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    5ac2:	683b      	ldr	r3, [r7, #0]
    5ac4:	4618      	mov	r0, r3
    5ac6:	f7fe ffa5 	bl	4a14 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5aca:	eef0 7a40 	vmov.f32	s15, s0
    5ace:	687b      	ldr	r3, [r7, #4]
    5ad0:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    5ad4:	687b      	ldr	r3, [r7, #4]
		}
    5ad6:	4618      	mov	r0, r3
    5ad8:	3708      	adds	r7, #8
    5ada:	46bd      	mov	sp, r7
    5adc:	bd80      	pop	{r7, pc}

00005ade <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    5ade:	b580      	push	{r7, lr}
    5ae0:	b084      	sub	sp, #16
    5ae2:	af00      	add	r7, sp, #0
    5ae4:	60f8      	str	r0, [r7, #12]
    5ae6:	60b9      	str	r1, [r7, #8]
    5ae8:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    5aea:	793b      	ldrb	r3, [r7, #4]
    5aec:	461a      	mov	r2, r3
    5aee:	797b      	ldrb	r3, [r7, #5]
    5af0:	68b9      	ldr	r1, [r7, #8]
    5af2:	68f8      	ldr	r0, [r7, #12]
    5af4:	f000 f932 	bl	5d5c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    5af8:	4603      	mov	r3, r0
}
    5afa:	4618      	mov	r0, r3
    5afc:	3710      	adds	r7, #16
    5afe:	46bd      	mov	sp, r7
    5b00:	bd80      	pop	{r7, pc}

00005b02 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    5b02:	b580      	push	{r7, lr}
    5b04:	ed2d 8b02 	vpush	{d8}
    5b08:	b084      	sub	sp, #16
    5b0a:	af00      	add	r7, sp, #0
    5b0c:	6078      	str	r0, [r7, #4]
    5b0e:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    5b10:	687b      	ldr	r3, [r7, #4]
    5b12:	4618      	mov	r0, r3
    5b14:	f7fe fe74 	bl	4800 <units::linear_scale<float>::operator()() const>
    5b18:	eeb0 8a40 	vmov.f32	s16, s0
    5b1c:	683b      	ldr	r3, [r7, #0]
    5b1e:	4618      	mov	r0, r3
    5b20:	f7fe fe6e 	bl	4800 <units::linear_scale<float>::operator()() const>
    5b24:	eef0 7a40 	vmov.f32	s15, s0
    5b28:	edc7 7a03 	vstr	s15, [r7, #12]
    5b2c:	f107 030c 	add.w	r3, r7, #12
    5b30:	4618      	mov	r0, r3
    5b32:	f7fe fc38 	bl	43a6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5b36:	eeb0 7a40 	vmov.f32	s14, s0
    5b3a:	eec8 7a07 	vdiv.f32	s15, s16, s14
    5b3e:	f107 0308 	add.w	r3, r7, #8
    5b42:	eeb0 0a67 	vmov.f32	s0, s15
    5b46:	4618      	mov	r0, r3
    5b48:	f7fe feb3 	bl	48b2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    5b4c:	68bb      	ldr	r3, [r7, #8]
	}
    5b4e:	4618      	mov	r0, r3
    5b50:	3710      	adds	r7, #16
    5b52:	46bd      	mov	sp, r7
    5b54:	ecbd 8b02 	vpop	{d8}
    5b58:	bd80      	pop	{r7, pc}

00005b5a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
    5b5a:	b580      	push	{r7, lr}
    5b5c:	b084      	sub	sp, #16
    5b5e:	af00      	add	r7, sp, #0
    5b60:	6078      	str	r0, [r7, #4]
    5b62:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
    5b64:	687b      	ldr	r3, [r7, #4]
    5b66:	4618      	mov	r0, r3
    5b68:	f7fe fe4a 	bl	4800 <units::linear_scale<float>::operator()() const>
    5b6c:	eeb0 7a40 	vmov.f32	s14, s0
    5b70:	683b      	ldr	r3, [r7, #0]
    5b72:	ee07 3a90 	vmov	s15, r3
    5b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
    5b7e:	f107 030c 	add.w	r3, r7, #12
    5b82:	eeb0 0a67 	vmov.f32	s0, s15
    5b86:	4618      	mov	r0, r3
    5b88:	f7fe fe93 	bl	48b2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    5b8c:	68fb      	ldr	r3, [r7, #12]
	}
    5b8e:	4618      	mov	r0, r3
    5b90:	3710      	adds	r7, #16
    5b92:	46bd      	mov	sp, r7
    5b94:	bd80      	pop	{r7, pc}

00005b96 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    5b96:	b480      	push	{r7}
    5b98:	b083      	sub	sp, #12
    5b9a:	af00      	add	r7, sp, #0
    5b9c:	4603      	mov	r3, r0
    5b9e:	6039      	str	r1, [r7, #0]
    5ba0:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    5ba2:	79fa      	ldrb	r2, [r7, #7]
    5ba4:	683b      	ldr	r3, [r7, #0]
    5ba6:	fa42 f303 	asr.w	r3, r2, r3
    5baa:	f003 0301 	and.w	r3, r3, #1
    5bae:	2b00      	cmp	r3, #0
    5bb0:	bf14      	ite	ne
    5bb2:	2301      	movne	r3, #1
    5bb4:	2300      	moveq	r3, #0
    5bb6:	b2db      	uxtb	r3, r3
}
    5bb8:	4618      	mov	r0, r3
    5bba:	370c      	adds	r7, #12
    5bbc:	46bd      	mov	sp, r7
    5bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bc2:	4770      	bx	lr

00005bc4 <std::array<std::function<void ()>, 59u>::array()>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
    5bc4:	b5b0      	push	{r4, r5, r7, lr}
    5bc6:	b082      	sub	sp, #8
    5bc8:	af00      	add	r7, sp, #0
    5bca:	6078      	str	r0, [r7, #4]
    5bcc:	687b      	ldr	r3, [r7, #4]
    5bce:	243a      	movs	r4, #58	; 0x3a
    5bd0:	461d      	mov	r5, r3
    5bd2:	2c00      	cmp	r4, #0
    5bd4:	db05      	blt.n	5be2 <std::array<std::function<void ()>, 59u>::array()+0x1e>
    5bd6:	4628      	mov	r0, r5
    5bd8:	f7fc f87f 	bl	1cda <std::function<void ()>::function()>
    5bdc:	3510      	adds	r5, #16
    5bde:	3c01      	subs	r4, #1
    5be0:	e7f7      	b.n	5bd2 <std::array<std::function<void ()>, 59u>::array()+0xe>
    5be2:	687b      	ldr	r3, [r7, #4]
    5be4:	4618      	mov	r0, r3
    5be6:	3708      	adds	r7, #8
    5be8:	46bd      	mov	sp, r7
    5bea:	bdb0      	pop	{r4, r5, r7, pc}

00005bec <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()>:

  /// This must be put into the interrupt vector table for all of the interrupts
  /// this lookup handler will work for in ROM at compile time.
  /// @note This must not be executed directly, only by the processor when an
  ///       interrupt occurs.
  static void LookupHandler()
    5bec:	b580      	push	{r7, lr}
    5bee:	b086      	sub	sp, #24
    5bf0:	af00      	add	r7, sp, #0
  {
    int active_interrupt     = (scb->ICSR & 0xFF);
    5bf2:	4b11      	ldr	r3, [pc, #68]	; (5c38 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x4c>)
    5bf4:	681b      	ldr	r3, [r3, #0]
    5bf6:	685b      	ldr	r3, [r3, #4]
    5bf8:	b2db      	uxtb	r3, r3
    5bfa:	617b      	str	r3, [r7, #20]
    current_vector           = IndexToIRQ(active_interrupt);
    5bfc:	6978      	ldr	r0, [r7, #20]
    5bfe:	f000 f8d9 	bl	5db4 <sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)>
    5c02:	4603      	mov	r3, r0
    5c04:	4a0d      	ldr	r2, [pc, #52]	; (5c3c <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x50>)
    5c06:	6013      	str	r3, [r2, #0]
    InterruptHandler handler = table[active_interrupt];
    5c08:	697b      	ldr	r3, [r7, #20]
    5c0a:	4619      	mov	r1, r3
    5c0c:	480c      	ldr	r0, [pc, #48]	; (5c40 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x54>)
    5c0e:	f000 f8dd 	bl	5dcc <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    5c12:	4602      	mov	r2, r0
    5c14:	1d3b      	adds	r3, r7, #4
    5c16:	4611      	mov	r1, r2
    5c18:	4618      	mov	r0, r3
    5c1a:	f7fc faef 	bl	21fc <std::function<void ()>::function(std::function<void ()> const&)>
    handler();
    5c1e:	1d3b      	adds	r3, r7, #4
    5c20:	4618      	mov	r0, r3
    5c22:	f7fc f867 	bl	1cf4 <std::function<void ()>::operator()() const>
    InterruptHandler handler = table[active_interrupt];
    5c26:	1d3b      	adds	r3, r7, #4
    5c28:	4618      	mov	r0, r3
    5c2a:	f7fb f93c 	bl	ea6 <std::function<void ()>::~function()>
  }
    5c2e:	bf00      	nop
    5c30:	3718      	adds	r7, #24
    5c32:	46bd      	mov	sp, r7
    5c34:	bd80      	pop	{r7, pc}
    5c36:	bf00      	nop
    5c38:	10000078 	.word	0x10000078
    5c3c:	10000080 	.word	0x10000080
    5c40:	10000804 	.word	0x10000804

00005c44 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>:
    function<_Res(_ArgTypes...)>::
    5c44:	b580      	push	{r7, lr}
    5c46:	b082      	sub	sp, #8
    5c48:	af00      	add	r7, sp, #0
    5c4a:	6078      	str	r0, [r7, #4]
    5c4c:	6039      	str	r1, [r7, #0]
    : _Function_base()
    5c4e:	687b      	ldr	r3, [r7, #4]
    5c50:	4618      	mov	r0, r3
    5c52:	f7fa fbb9 	bl	3c8 <std::_Function_base::_Function_base()>
      if (static_cast<bool>(__x))
    5c56:	6838      	ldr	r0, [r7, #0]
    5c58:	f000 f8c7 	bl	5dea <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const>
    5c5c:	4603      	mov	r3, r0
    5c5e:	2b00      	cmp	r3, #0
    5c60:	d00d      	beq.n	5c7e <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    5c62:	683b      	ldr	r3, [r7, #0]
    5c64:	689b      	ldr	r3, [r3, #8]
    5c66:	6878      	ldr	r0, [r7, #4]
    5c68:	6839      	ldr	r1, [r7, #0]
    5c6a:	2202      	movs	r2, #2
    5c6c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    5c6e:	683b      	ldr	r3, [r7, #0]
    5c70:	68da      	ldr	r2, [r3, #12]
    5c72:	687b      	ldr	r3, [r7, #4]
    5c74:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
    5c76:	683b      	ldr	r3, [r7, #0]
    5c78:	689a      	ldr	r2, [r3, #8]
    5c7a:	687b      	ldr	r3, [r7, #4]
    5c7c:	609a      	str	r2, [r3, #8]
    }
    5c7e:	687b      	ldr	r3, [r7, #4]
    5c80:	4618      	mov	r0, r3
    5c82:	3708      	adds	r7, #8
    5c84:	46bd      	mov	sp, r7
    5c86:	bd80      	pop	{r7, pc}

00005c88 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)>:
      void swap(function& __x) noexcept
    5c88:	b580      	push	{r7, lr}
    5c8a:	b082      	sub	sp, #8
    5c8c:	af00      	add	r7, sp, #0
    5c8e:	6078      	str	r0, [r7, #4]
    5c90:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	683a      	ldr	r2, [r7, #0]
    5c96:	4611      	mov	r1, r2
    5c98:	4618      	mov	r0, r3
    5c9a:	f7fc fbd9 	bl	2450 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>
	std::swap(_M_manager, __x._M_manager);
    5c9e:	687b      	ldr	r3, [r7, #4]
    5ca0:	f103 0208 	add.w	r2, r3, #8
    5ca4:	683b      	ldr	r3, [r7, #0]
    5ca6:	3308      	adds	r3, #8
    5ca8:	4619      	mov	r1, r3
    5caa:	4610      	mov	r0, r2
    5cac:	f7fc fc02 	bl	24b4 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
	std::swap(_M_invoker, __x._M_invoker);
    5cb0:	687b      	ldr	r3, [r7, #4]
    5cb2:	f103 020c 	add.w	r2, r3, #12
    5cb6:	683b      	ldr	r3, [r7, #0]
    5cb8:	330c      	adds	r3, #12
    5cba:	4619      	mov	r1, r3
    5cbc:	4610      	mov	r0, r2
    5cbe:	f000 f8af 	bl	5e20 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
      }
    5cc2:	bf00      	nop
    5cc4:	3708      	adds	r7, #8
    5cc6:	46bd      	mov	sp, r7
    5cc8:	bd80      	pop	{r7, pc}

00005cca <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    5cca:	b580      	push	{r7, lr}
    5ccc:	b084      	sub	sp, #16
    5cce:	af00      	add	r7, sp, #0
    5cd0:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    5cd2:	f04f 0201 	mov.w	r2, #1
    5cd6:	f04f 0300 	mov.w	r3, #0
    5cda:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    5cde:	f107 0308 	add.w	r3, r7, #8
    5ce2:	4619      	mov	r1, r3
    5ce4:	6878      	ldr	r0, [r7, #4]
    5ce6:	f7fe fe83 	bl	49f0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    5cea:	6878      	ldr	r0, [r7, #4]
    5cec:	3710      	adds	r7, #16
    5cee:	46bd      	mov	sp, r7
    5cf0:	bd80      	pop	{r7, pc}

00005cf2 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    5cf2:	b580      	push	{r7, lr}
    5cf4:	b082      	sub	sp, #8
    5cf6:	af00      	add	r7, sp, #0
    5cf8:	6078      	str	r0, [r7, #4]
    5cfa:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    5cfc:	687b      	ldr	r3, [r7, #4]
    5cfe:	6839      	ldr	r1, [r7, #0]
    5d00:	4618      	mov	r0, r3
    5d02:	f000 f8ac 	bl	5e5e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    5d06:	bf00      	nop
      }
    5d08:	6878      	ldr	r0, [r7, #4]
    5d0a:	3708      	adds	r7, #8
    5d0c:	46bd      	mov	sp, r7
    5d0e:	bd80      	pop	{r7, pc}

00005d10 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    5d10:	b580      	push	{r7, lr}
    5d12:	b084      	sub	sp, #16
    5d14:	af00      	add	r7, sp, #0
    5d16:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    5d18:	a307      	add	r3, pc, #28	; (adr r3, 5d38 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()+0x28>)
    5d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    5d1e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    5d22:	f107 0308 	add.w	r3, r7, #8
    5d26:	4619      	mov	r1, r3
    5d28:	6878      	ldr	r0, [r7, #4]
    5d2a:	f7fa fcf9 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    5d2e:	6878      	ldr	r0, [r7, #4]
    5d30:	3710      	adds	r7, #16
    5d32:	46bd      	mov	sp, r7
    5d34:	bd80      	pop	{r7, pc}
    5d36:	bf00      	nop
    5d38:	3b9aca00 	.word	0x3b9aca00
    5d3c:	00000000 	.word	0x00000000

00005d40 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    5d40:	b580      	push	{r7, lr}
    5d42:	b086      	sub	sp, #24
    5d44:	af00      	add	r7, sp, #0
    5d46:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    5d48:	6878      	ldr	r0, [r7, #4]
    5d4a:	f000 f8cb 	bl	5ee4 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    5d4e:	eef0 7a40 	vmov.f32	s15, s0
	}
    5d52:	eeb0 0a67 	vmov.f32	s0, s15
    5d56:	3718      	adds	r7, #24
    5d58:	46bd      	mov	sp, r7
    5d5a:	bd80      	pop	{r7, pc}

00005d5c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    5d5c:	b480      	push	{r7}
    5d5e:	b089      	sub	sp, #36	; 0x24
    5d60:	af00      	add	r7, sp, #0
    5d62:	60f8      	str	r0, [r7, #12]
    5d64:	60b9      	str	r1, [r7, #8]
    5d66:	607a      	str	r2, [r7, #4]
    5d68:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    5d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5d6e:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    5d70:	2320      	movs	r3, #32
    5d72:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    5d74:	683b      	ldr	r3, [r7, #0]
    5d76:	f1c3 0320 	rsb	r3, r3, #32
    5d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5d7e:	fa22 f303 	lsr.w	r3, r2, r3
    5d82:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    5d84:	697a      	ldr	r2, [r7, #20]
    5d86:	687b      	ldr	r3, [r7, #4]
    5d88:	fa02 f303 	lsl.w	r3, r2, r3
    5d8c:	43db      	mvns	r3, r3
    5d8e:	68fa      	ldr	r2, [r7, #12]
    5d90:	4013      	ands	r3, r2
    5d92:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    5d94:	68ba      	ldr	r2, [r7, #8]
    5d96:	697b      	ldr	r3, [r7, #20]
    5d98:	401a      	ands	r2, r3
    5d9a:	687b      	ldr	r3, [r7, #4]
    5d9c:	fa02 f303 	lsl.w	r3, r2, r3
    5da0:	68fa      	ldr	r2, [r7, #12]
    5da2:	4313      	orrs	r3, r2
    5da4:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    5da6:	68fb      	ldr	r3, [r7, #12]
}
    5da8:	4618      	mov	r0, r3
    5daa:	3724      	adds	r7, #36	; 0x24
    5dac:	46bd      	mov	sp, r7
    5dae:	f85d 7b04 	ldr.w	r7, [sp], #4
    5db2:	4770      	bx	lr

00005db4 <sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)>:
  static int IndexToIRQ(int index)
    5db4:	b480      	push	{r7}
    5db6:	b083      	sub	sp, #12
    5db8:	af00      	add	r7, sp, #0
    5dba:	6078      	str	r0, [r7, #4]
    return index - kArmExceptionOffset;
    5dbc:	687b      	ldr	r3, [r7, #4]
    5dbe:	3b10      	subs	r3, #16
  }
    5dc0:	4618      	mov	r0, r3
    5dc2:	370c      	adds	r7, #12
    5dc4:	46bd      	mov	sp, r7
    5dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dca:	4770      	bx	lr

00005dcc <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
    5dcc:	b580      	push	{r7, lr}
    5dce:	b082      	sub	sp, #8
    5dd0:	af00      	add	r7, sp, #0
    5dd2:	6078      	str	r0, [r7, #4]
    5dd4:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
    5dd6:	687b      	ldr	r3, [r7, #4]
    5dd8:	6839      	ldr	r1, [r7, #0]
    5dda:	4618      	mov	r0, r3
    5ddc:	f000 f894 	bl	5f08 <std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)>
    5de0:	4603      	mov	r3, r0
    5de2:	4618      	mov	r0, r3
    5de4:	3708      	adds	r7, #8
    5de6:	46bd      	mov	sp, r7
    5de8:	bd80      	pop	{r7, pc}

00005dea <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const>:
      explicit operator bool() const noexcept
    5dea:	b580      	push	{r7, lr}
    5dec:	b082      	sub	sp, #8
    5dee:	af00      	add	r7, sp, #0
    5df0:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
    5df2:	687b      	ldr	r3, [r7, #4]
    5df4:	4618      	mov	r0, r3
    5df6:	f7fa fb08 	bl	40a <std::_Function_base::_M_empty() const>
    5dfa:	4603      	mov	r3, r0
    5dfc:	f083 0301 	eor.w	r3, r3, #1
    5e00:	b2db      	uxtb	r3, r3
    5e02:	4618      	mov	r0, r3
    5e04:	3708      	adds	r7, #8
    5e06:	46bd      	mov	sp, r7
    5e08:	bd80      	pop	{r7, pc}

00005e0a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>:
    move(_Tp&& __t) noexcept
    5e0a:	b480      	push	{r7}
    5e0c:	b083      	sub	sp, #12
    5e0e:	af00      	add	r7, sp, #0
    5e10:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    5e12:	687b      	ldr	r3, [r7, #4]
    5e14:	4618      	mov	r0, r3
    5e16:	370c      	adds	r7, #12
    5e18:	46bd      	mov	sp, r7
    5e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e1e:	4770      	bx	lr

00005e20 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>:
    swap(_Tp& __a, _Tp& __b)
    5e20:	b580      	push	{r7, lr}
    5e22:	b084      	sub	sp, #16
    5e24:	af00      	add	r7, sp, #0
    5e26:	6078      	str	r0, [r7, #4]
    5e28:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    5e2a:	6878      	ldr	r0, [r7, #4]
    5e2c:	f7ff ffed 	bl	5e0a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    5e30:	4603      	mov	r3, r0
    5e32:	681b      	ldr	r3, [r3, #0]
    5e34:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    5e36:	6838      	ldr	r0, [r7, #0]
    5e38:	f7ff ffe7 	bl	5e0a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    5e3c:	4603      	mov	r3, r0
    5e3e:	681a      	ldr	r2, [r3, #0]
    5e40:	687b      	ldr	r3, [r7, #4]
    5e42:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    5e44:	f107 030c 	add.w	r3, r7, #12
    5e48:	4618      	mov	r0, r3
    5e4a:	f7ff ffde 	bl	5e0a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    5e4e:	4603      	mov	r3, r0
    5e50:	681a      	ldr	r2, [r3, #0]
    5e52:	683b      	ldr	r3, [r7, #0]
    5e54:	601a      	str	r2, [r3, #0]
    }
    5e56:	bf00      	nop
    5e58:	3710      	adds	r7, #16
    5e5a:	46bd      	mov	sp, r7
    5e5c:	bd80      	pop	{r7, pc}

00005e5e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    5e5e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    5e62:	b084      	sub	sp, #16
    5e64:	af00      	add	r7, sp, #0
    5e66:	6078      	str	r0, [r7, #4]
    5e68:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    5e6a:	6838      	ldr	r0, [r7, #0]
    5e6c:	f7fe fdb2 	bl	49d4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    5e70:	4604      	mov	r4, r0
    5e72:	460d      	mov	r5, r1
    5e74:	4622      	mov	r2, r4
    5e76:	462b      	mov	r3, r5
    5e78:	f04f 0000 	mov.w	r0, #0
    5e7c:	f04f 0100 	mov.w	r1, #0
    5e80:	0159      	lsls	r1, r3, #5
    5e82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
    5e86:	0150      	lsls	r0, r2, #5
    5e88:	4602      	mov	r2, r0
    5e8a:	460b      	mov	r3, r1
    5e8c:	1b12      	subs	r2, r2, r4
    5e8e:	eb63 0305 	sbc.w	r3, r3, r5
    5e92:	f04f 0000 	mov.w	r0, #0
    5e96:	f04f 0100 	mov.w	r1, #0
    5e9a:	0259      	lsls	r1, r3, #9
    5e9c:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
    5ea0:	0250      	lsls	r0, r2, #9
    5ea2:	4602      	mov	r2, r0
    5ea4:	460b      	mov	r3, r1
    5ea6:	1912      	adds	r2, r2, r4
    5ea8:	eb45 0303 	adc.w	r3, r5, r3
    5eac:	f04f 0000 	mov.w	r0, #0
    5eb0:	f04f 0100 	mov.w	r1, #0
    5eb4:	0199      	lsls	r1, r3, #6
    5eb6:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
    5eba:	0190      	lsls	r0, r2, #6
    5ebc:	1a80      	subs	r0, r0, r2
    5ebe:	eb61 0103 	sbc.w	r1, r1, r3
    5ec2:	eb10 0804 	adds.w	r8, r0, r4
    5ec6:	eb41 0905 	adc.w	r9, r1, r5
    5eca:	e9c7 8902 	strd	r8, r9, [r7, #8]
    5ece:	f107 0308 	add.w	r3, r7, #8
    5ed2:	4619      	mov	r1, r3
    5ed4:	6878      	ldr	r0, [r7, #4]
    5ed6:	f7fa fc23 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
	  }
    5eda:	6878      	ldr	r0, [r7, #4]
    5edc:	3710      	adds	r7, #16
    5ede:	46bd      	mov	sp, r7
    5ee0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

00005ee4 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    5ee4:	b480      	push	{r7}
    5ee6:	b085      	sub	sp, #20
    5ee8:	af00      	add	r7, sp, #0
    5eea:	60f8      	str	r0, [r7, #12]
    5eec:	7239      	strb	r1, [r7, #8]
    5eee:	713a      	strb	r2, [r7, #4]
    5ef0:	703b      	strb	r3, [r7, #0]
			return value;
    5ef2:	68fb      	ldr	r3, [r7, #12]
    5ef4:	681b      	ldr	r3, [r3, #0]
    5ef6:	ee07 3a90 	vmov	s15, r3
		}
    5efa:	eeb0 0a67 	vmov.f32	s0, s15
    5efe:	3714      	adds	r7, #20
    5f00:	46bd      	mov	sp, r7
    5f02:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f06:	4770      	bx	lr

00005f08 <std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
    5f08:	b480      	push	{r7}
    5f0a:	b083      	sub	sp, #12
    5f0c:	af00      	add	r7, sp, #0
    5f0e:	6078      	str	r0, [r7, #4]
    5f10:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
    5f12:	683b      	ldr	r3, [r7, #0]
    5f14:	011b      	lsls	r3, r3, #4
    5f16:	687a      	ldr	r2, [r7, #4]
    5f18:	4413      	add	r3, r2
    5f1a:	4618      	mov	r0, r3
    5f1c:	370c      	adds	r7, #12
    5f1e:	46bd      	mov	sp, r7
    5f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f24:	4770      	bx	lr

00005f26 <std::array<std::function<void ()>, 59u>::~array()>:
    struct array
    5f26:	b590      	push	{r4, r7, lr}
    5f28:	b083      	sub	sp, #12
    5f2a:	af00      	add	r7, sp, #0
    5f2c:	6078      	str	r0, [r7, #4]
    5f2e:	687b      	ldr	r3, [r7, #4]
    5f30:	2b00      	cmp	r3, #0
    5f32:	d00a      	beq.n	5f4a <std::array<std::function<void ()>, 59u>::~array()+0x24>
    5f34:	687b      	ldr	r3, [r7, #4]
    5f36:	f503 746c 	add.w	r4, r3, #944	; 0x3b0
    5f3a:	687b      	ldr	r3, [r7, #4]
    5f3c:	429c      	cmp	r4, r3
    5f3e:	d004      	beq.n	5f4a <std::array<std::function<void ()>, 59u>::~array()+0x24>
    5f40:	3c10      	subs	r4, #16
    5f42:	4620      	mov	r0, r4
    5f44:	f7fa ffaf 	bl	ea6 <std::function<void ()>::~function()>
    5f48:	e7f7      	b.n	5f3a <std::array<std::function<void ()>, 59u>::~array()+0x14>
    5f4a:	687b      	ldr	r3, [r7, #4]
    5f4c:	4618      	mov	r0, r3
    5f4e:	370c      	adds	r7, #12
    5f50:	46bd      	mov	sp, r7
    5f52:	bd90      	pop	{r4, r7, pc}

00005f54 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    5f54:	b580      	push	{r7, lr}
    5f56:	b082      	sub	sp, #8
    5f58:	af00      	add	r7, sp, #0
    5f5a:	6078      	str	r0, [r7, #4]
    5f5c:	6039      	str	r1, [r7, #0]
    5f5e:	687b      	ldr	r3, [r7, #4]
    5f60:	2b01      	cmp	r3, #1
    5f62:	d175      	bne.n	6050 <__static_initialization_and_destruction_0(int, int)+0xfc>
    5f64:	683b      	ldr	r3, [r7, #0]
    5f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5f6a:	4293      	cmp	r3, r2
    5f6c:	d170      	bne.n	6050 <__static_initialization_and_destruction_0(int, int)+0xfc>
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    5f6e:	4b3a      	ldr	r3, [pc, #232]	; (6058 <__static_initialization_and_destruction_0(int, int)+0x104>)
    5f70:	681b      	ldr	r3, [r3, #0]
    5f72:	f003 0301 	and.w	r3, r3, #1
    5f76:	2b00      	cmp	r3, #0
    5f78:	d10b      	bne.n	5f92 <__static_initialization_and_destruction_0(int, int)+0x3e>
    5f7a:	4b37      	ldr	r3, [pc, #220]	; (6058 <__static_initialization_and_destruction_0(int, int)+0x104>)
    5f7c:	2201      	movs	r2, #1
    5f7e:	601a      	str	r2, [r3, #0]
    5f80:	4936      	ldr	r1, [pc, #216]	; (605c <__static_initialization_and_destruction_0(int, int)+0x108>)
    5f82:	4837      	ldr	r0, [pc, #220]	; (6060 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    5f84:	f7fb fd96 	bl	1ab4 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    5f88:	4a36      	ldr	r2, [pc, #216]	; (6064 <__static_initialization_and_destruction_0(int, int)+0x110>)
    5f8a:	4937      	ldr	r1, [pc, #220]	; (6068 <__static_initialization_and_destruction_0(int, int)+0x114>)
    5f8c:	4834      	ldr	r0, [pc, #208]	; (6060 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    5f8e:	f000 faab 	bl	64e8 <__aeabi_atexit>
  inline static InterruptCallback callback = nullptr;
    5f92:	4b36      	ldr	r3, [pc, #216]	; (606c <__static_initialization_and_destruction_0(int, int)+0x118>)
    5f94:	681b      	ldr	r3, [r3, #0]
    5f96:	f003 0301 	and.w	r3, r3, #1
    5f9a:	2b00      	cmp	r3, #0
    5f9c:	d10b      	bne.n	5fb6 <__static_initialization_and_destruction_0(int, int)+0x62>
    5f9e:	4b33      	ldr	r3, [pc, #204]	; (606c <__static_initialization_and_destruction_0(int, int)+0x118>)
    5fa0:	2201      	movs	r2, #1
    5fa2:	601a      	str	r2, [r3, #0]
    5fa4:	2100      	movs	r1, #0
    5fa6:	4832      	ldr	r0, [pc, #200]	; (6070 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    5fa8:	f7ff fd1d 	bl	59e6 <std::function<void ()>::function(decltype(nullptr))>
    5fac:	4a2d      	ldr	r2, [pc, #180]	; (6064 <__static_initialization_and_destruction_0(int, int)+0x110>)
    5fae:	4931      	ldr	r1, [pc, #196]	; (6074 <__static_initialization_and_destruction_0(int, int)+0x120>)
    5fb0:	482f      	ldr	r0, [pc, #188]	; (6070 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    5fb2:	f000 fa99 	bl	64e8 <__aeabi_atexit>
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    5fb6:	4b30      	ldr	r3, [pc, #192]	; (6078 <__static_initialization_and_destruction_0(int, int)+0x124>)
    5fb8:	681b      	ldr	r3, [r3, #0]
    5fba:	f003 0301 	and.w	r3, r3, #1
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	d105      	bne.n	5fce <__static_initialization_and_destruction_0(int, int)+0x7a>
    5fc2:	4b2d      	ldr	r3, [pc, #180]	; (6078 <__static_initialization_and_destruction_0(int, int)+0x124>)
    5fc4:	2201      	movs	r2, #1
    5fc6:	601a      	str	r2, [r3, #0]
    5fc8:	4a2c      	ldr	r2, [pc, #176]	; (607c <__static_initialization_and_destruction_0(int, int)+0x128>)
    5fca:	4b2d      	ldr	r3, [pc, #180]	; (6080 <__static_initialization_and_destruction_0(int, int)+0x12c>)
    5fcc:	601a      	str	r2, [r3, #0]
    5fce:	4b2d      	ldr	r3, [pc, #180]	; (6084 <__static_initialization_and_destruction_0(int, int)+0x130>)
    5fd0:	681b      	ldr	r3, [r3, #0]
    5fd2:	f003 0301 	and.w	r3, r3, #1
    5fd6:	2b00      	cmp	r3, #0
    5fd8:	d105      	bne.n	5fe6 <__static_initialization_and_destruction_0(int, int)+0x92>
    5fda:	4b2a      	ldr	r3, [pc, #168]	; (6084 <__static_initialization_and_destruction_0(int, int)+0x130>)
    5fdc:	2201      	movs	r2, #1
    5fde:	601a      	str	r2, [r3, #0]
    5fe0:	4a29      	ldr	r2, [pc, #164]	; (6088 <__static_initialization_and_destruction_0(int, int)+0x134>)
    5fe2:	4b2a      	ldr	r3, [pc, #168]	; (608c <__static_initialization_and_destruction_0(int, int)+0x138>)
    5fe4:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    5fe6:	4b2a      	ldr	r3, [pc, #168]	; (6090 <__static_initialization_and_destruction_0(int, int)+0x13c>)
    5fe8:	681b      	ldr	r3, [r3, #0]
    5fea:	f003 0301 	and.w	r3, r3, #1
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d105      	bne.n	5ffe <__static_initialization_and_destruction_0(int, int)+0xaa>
    5ff2:	4b27      	ldr	r3, [pc, #156]	; (6090 <__static_initialization_and_destruction_0(int, int)+0x13c>)
    5ff4:	2201      	movs	r2, #1
    5ff6:	601a      	str	r2, [r3, #0]
    };
    5ff8:	4a26      	ldr	r2, [pc, #152]	; (6094 <__static_initialization_and_destruction_0(int, int)+0x140>)
    5ffa:	4b27      	ldr	r3, [pc, #156]	; (6098 <__static_initialization_and_destruction_0(int, int)+0x144>)
    5ffc:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    5ffe:	4b27      	ldr	r3, [pc, #156]	; (609c <__static_initialization_and_destruction_0(int, int)+0x148>)
    6000:	681b      	ldr	r3, [r3, #0]
    6002:	f003 0301 	and.w	r3, r3, #1
    6006:	2b00      	cmp	r3, #0
    6008:	d105      	bne.n	6016 <__static_initialization_and_destruction_0(int, int)+0xc2>
    600a:	4b24      	ldr	r3, [pc, #144]	; (609c <__static_initialization_and_destruction_0(int, int)+0x148>)
    600c:	2201      	movs	r2, #1
    600e:	601a      	str	r2, [r3, #0]
    };
    6010:	4a23      	ldr	r2, [pc, #140]	; (60a0 <__static_initialization_and_destruction_0(int, int)+0x14c>)
    6012:	4b24      	ldr	r3, [pc, #144]	; (60a4 <__static_initialization_and_destruction_0(int, int)+0x150>)
    6014:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    6016:	4b24      	ldr	r3, [pc, #144]	; (60a8 <__static_initialization_and_destruction_0(int, int)+0x154>)
    6018:	681b      	ldr	r3, [r3, #0]
    601a:	f003 0301 	and.w	r3, r3, #1
    601e:	2b00      	cmp	r3, #0
    6020:	d105      	bne.n	602e <__static_initialization_and_destruction_0(int, int)+0xda>
    6022:	4b21      	ldr	r3, [pc, #132]	; (60a8 <__static_initialization_and_destruction_0(int, int)+0x154>)
    6024:	2201      	movs	r2, #1
    6026:	601a      	str	r2, [r3, #0]
    };
    6028:	4a20      	ldr	r2, [pc, #128]	; (60ac <__static_initialization_and_destruction_0(int, int)+0x158>)
    602a:	4b21      	ldr	r3, [pc, #132]	; (60b0 <__static_initialization_and_destruction_0(int, int)+0x15c>)
    602c:	601a      	str	r2, [r3, #0]
  }

 private:
  static inline std::array<InterruptHandler,
                           kNumberOfInterrupts + kArmExceptionOffset>
      table;
    602e:	4b21      	ldr	r3, [pc, #132]	; (60b4 <__static_initialization_and_destruction_0(int, int)+0x160>)
    6030:	681b      	ldr	r3, [r3, #0]
    6032:	f003 0301 	and.w	r3, r3, #1
    6036:	2b00      	cmp	r3, #0
    6038:	d10a      	bne.n	6050 <__static_initialization_and_destruction_0(int, int)+0xfc>
    603a:	4b1e      	ldr	r3, [pc, #120]	; (60b4 <__static_initialization_and_destruction_0(int, int)+0x160>)
    603c:	2201      	movs	r2, #1
    603e:	601a      	str	r2, [r3, #0]
    6040:	481d      	ldr	r0, [pc, #116]	; (60b8 <__static_initialization_and_destruction_0(int, int)+0x164>)
    6042:	f7ff fdbf 	bl	5bc4 <std::array<std::function<void ()>, 59u>::array()>
    6046:	4a07      	ldr	r2, [pc, #28]	; (6064 <__static_initialization_and_destruction_0(int, int)+0x110>)
    6048:	491c      	ldr	r1, [pc, #112]	; (60bc <__static_initialization_and_destruction_0(int, int)+0x168>)
    604a:	481b      	ldr	r0, [pc, #108]	; (60b8 <__static_initialization_and_destruction_0(int, int)+0x164>)
    604c:	f000 fa4c 	bl	64e8 <__aeabi_atexit>
    6050:	bf00      	nop
    6052:	3708      	adds	r7, #8
    6054:	46bd      	mov	sp, r7
    6056:	bd80      	pop	{r7, pc}
    6058:	10000748 	.word	0x10000748
    605c:	000007b5 	.word	0x000007b5
    6060:	10000120 	.word	0x10000120
    6064:	10000000 	.word	0x10000000
    6068:	000007fd 	.word	0x000007fd
    606c:	10000bb4 	.word	0x10000bb4
    6070:	100007e0 	.word	0x100007e0
    6074:	00000ea7 	.word	0x00000ea7
    6078:	10000bb8 	.word	0x10000bb8
    607c:	400fc000 	.word	0x400fc000
    6080:	100007fc 	.word	0x100007fc
    6084:	10000744 	.word	0x10000744
    6088:	4002c000 	.word	0x4002c000
    608c:	10000110 	.word	0x10000110
    6090:	10000bbc 	.word	0x10000bbc
    6094:	40098000 	.word	0x40098000
    6098:	10000028 	.word	0x10000028
    609c:	10000bc0 	.word	0x10000bc0
    60a0:	4009c000 	.word	0x4009c000
    60a4:	1000003c 	.word	0x1000003c
    60a8:	10000bc4 	.word	0x10000bc4
    60ac:	400a4000 	.word	0x400a4000
    60b0:	10000050 	.word	0x10000050
    60b4:	10000bc8 	.word	0x10000bc8
    60b8:	10000804 	.word	0x10000804
    60bc:	00005f27 	.word	0x00005f27

000060c0 <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)>:
  void Initialize(
    60c0:	b590      	push	{r4, r7, lr}
    60c2:	b083      	sub	sp, #12
    60c4:	af00      	add	r7, sp, #0
    60c6:	6078      	str	r0, [r7, #4]
    60c8:	6039      	str	r1, [r7, #0]
    std::fill(table.begin(), table.end(), unregistered_handler);
    60ca:	4808      	ldr	r0, [pc, #32]	; (60ec <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)+0x2c>)
    60cc:	f000 f85e 	bl	618c <std::array<std::function<void ()>, 59u>::begin()>
    60d0:	4604      	mov	r4, r0
    60d2:	4806      	ldr	r0, [pc, #24]	; (60ec <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)+0x2c>)
    60d4:	f000 f866 	bl	61a4 <std::array<std::function<void ()>, 59u>::end()>
    60d8:	4603      	mov	r3, r0
    60da:	683a      	ldr	r2, [r7, #0]
    60dc:	4619      	mov	r1, r3
    60de:	4620      	mov	r0, r4
    60e0:	f000 f86e 	bl	61c0 <void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>
  }
    60e4:	bf00      	nop
    60e6:	370c      	adds	r7, #12
    60e8:	46bd      	mov	sp, r7
    60ea:	bd90      	pop	{r4, r7, pc}
    60ec:	10000804 	.word	0x10000804

000060f0 <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)>:
  void Enable(RegistrationInfo_t register_info) override
    60f0:	b590      	push	{r4, r7, lr}
    60f2:	b085      	sub	sp, #20
    60f4:	af00      	add	r7, sp, #0
    60f6:	6078      	str	r0, [r7, #4]
    60f8:	6039      	str	r1, [r7, #0]
    int irq                = register_info.interrupt_request_number;
    60fa:	683b      	ldr	r3, [r7, #0]
    60fc:	681b      	ldr	r3, [r3, #0]
    60fe:	60fb      	str	r3, [r7, #12]
    table[IRQToIndex(irq)] = register_info.interrupt_handler;
    6100:	683b      	ldr	r3, [r7, #0]
    6102:	1d1c      	adds	r4, r3, #4
    6104:	68f8      	ldr	r0, [r7, #12]
    6106:	f000 f872 	bl	61ee <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>
    610a:	4603      	mov	r3, r0
    610c:	4619      	mov	r1, r3
    610e:	480e      	ldr	r0, [pc, #56]	; (6148 <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x58>)
    6110:	f7ff fe5c 	bl	5dcc <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    6114:	4603      	mov	r3, r0
    6116:	4621      	mov	r1, r4
    6118:	4618      	mov	r0, r3
    611a:	f7fb fe67 	bl	1dec <std::function<void ()>::operator=(std::function<void ()> const&)>
    if (irq >= 0)
    611e:	68fb      	ldr	r3, [r7, #12]
    6120:	2b00      	cmp	r3, #0
    6122:	db02      	blt.n	612a <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x3a>
      NvicEnableIRQ(irq);
    6124:	68f8      	ldr	r0, [r7, #12]
    6126:	f000 f86f 	bl	6208 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)>
    if (register_info.priority > -1)
    612a:	683b      	ldr	r3, [r7, #0]
    612c:	695b      	ldr	r3, [r3, #20]
    612e:	2b00      	cmp	r3, #0
    6130:	db05      	blt.n	613e <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x4e>
      NvicSetPriority(irq, register_info.priority);
    6132:	683b      	ldr	r3, [r7, #0]
    6134:	695b      	ldr	r3, [r3, #20]
    6136:	4619      	mov	r1, r3
    6138:	68f8      	ldr	r0, [r7, #12]
    613a:	f000 f87d 	bl	6238 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)>
  }
    613e:	bf00      	nop
    6140:	3714      	adds	r7, #20
    6142:	46bd      	mov	sp, r7
    6144:	bd90      	pop	{r4, r7, pc}
    6146:	bf00      	nop
    6148:	10000804 	.word	0x10000804

0000614c <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)>:
  void Disable(int interrupt_request_number) override
    614c:	b580      	push	{r7, lr}
    614e:	b082      	sub	sp, #8
    6150:	af00      	add	r7, sp, #0
    6152:	6078      	str	r0, [r7, #4]
    6154:	6039      	str	r1, [r7, #0]
    if (interrupt_request_number >= 0)
    6156:	683b      	ldr	r3, [r7, #0]
    6158:	2b00      	cmp	r3, #0
    615a:	db02      	blt.n	6162 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x16>
      NvicDisableIRQ(interrupt_request_number);
    615c:	6838      	ldr	r0, [r7, #0]
    615e:	f000 f897 	bl	6290 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>
    table[IRQToIndex(interrupt_request_number)] = UnregisteredHandler;
    6162:	6838      	ldr	r0, [r7, #0]
    6164:	f000 f843 	bl	61ee <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>
    6168:	4603      	mov	r3, r0
    616a:	4619      	mov	r1, r3
    616c:	4805      	ldr	r0, [pc, #20]	; (6184 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x38>)
    616e:	f7ff fe2d 	bl	5dcc <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    6172:	4603      	mov	r3, r0
    6174:	4904      	ldr	r1, [pc, #16]	; (6188 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x3c>)
    6176:	4618      	mov	r0, r3
    6178:	f000 f8c4 	bl	6304 <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>
  }
    617c:	bf00      	nop
    617e:	3708      	adds	r7, #8
    6180:	46bd      	mov	sp, r7
    6182:	bd80      	pop	{r7, pc}
    6184:	10000804 	.word	0x10000804
    6188:	000062c5 	.word	0x000062c5

0000618c <std::array<std::function<void ()>, 59u>::begin()>:
      begin() noexcept
    618c:	b580      	push	{r7, lr}
    618e:	b082      	sub	sp, #8
    6190:	af00      	add	r7, sp, #0
    6192:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
    6194:	6878      	ldr	r0, [r7, #4]
    6196:	f000 f8d4 	bl	6342 <std::array<std::function<void ()>, 59u>::data()>
    619a:	4603      	mov	r3, r0
    619c:	4618      	mov	r0, r3
    619e:	3708      	adds	r7, #8
    61a0:	46bd      	mov	sp, r7
    61a2:	bd80      	pop	{r7, pc}

000061a4 <std::array<std::function<void ()>, 59u>::end()>:
      end() noexcept
    61a4:	b580      	push	{r7, lr}
    61a6:	b082      	sub	sp, #8
    61a8:	af00      	add	r7, sp, #0
    61aa:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
    61ac:	6878      	ldr	r0, [r7, #4]
    61ae:	f000 f8c8 	bl	6342 <std::array<std::function<void ()>, 59u>::data()>
    61b2:	4603      	mov	r3, r0
    61b4:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
    61b8:	4618      	mov	r0, r3
    61ba:	3708      	adds	r7, #8
    61bc:	46bd      	mov	sp, r7
    61be:	bd80      	pop	{r7, pc}

000061c0 <void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    61c0:	b590      	push	{r4, r7, lr}
    61c2:	b085      	sub	sp, #20
    61c4:	af00      	add	r7, sp, #0
    61c6:	60f8      	str	r0, [r7, #12]
    61c8:	60b9      	str	r1, [r7, #8]
    61ca:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
    61cc:	68f8      	ldr	r0, [r7, #12]
    61ce:	f000 f8c5 	bl	635c <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>
    61d2:	4604      	mov	r4, r0
    61d4:	68b8      	ldr	r0, [r7, #8]
    61d6:	f000 f8c1 	bl	635c <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>
    61da:	4603      	mov	r3, r0
    61dc:	687a      	ldr	r2, [r7, #4]
    61de:	4619      	mov	r1, r3
    61e0:	4620      	mov	r0, r4
    61e2:	f000 f8c6 	bl	6372 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>
		    __value);
    }
    61e6:	bf00      	nop
    61e8:	3714      	adds	r7, #20
    61ea:	46bd      	mov	sp, r7
    61ec:	bd90      	pop	{r4, r7, pc}

000061ee <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>:
  static int IRQToIndex(int irq)
    61ee:	b480      	push	{r7}
    61f0:	b083      	sub	sp, #12
    61f2:	af00      	add	r7, sp, #0
    61f4:	6078      	str	r0, [r7, #4]
    return irq + kArmExceptionOffset;
    61f6:	687b      	ldr	r3, [r7, #4]
    61f8:	3310      	adds	r3, #16
  }
    61fa:	4618      	mov	r0, r3
    61fc:	370c      	adds	r7, #12
    61fe:	46bd      	mov	sp, r7
    6200:	f85d 7b04 	ldr.w	r7, [sp], #4
    6204:	4770      	bx	lr
    6206:	Address 0x0000000000006206 is out of bounds.


00006208 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)>:
  /// Enable External Interrupt
  /// Enables a device-specific interrupt in the NVIC interrupt controller.
  ///
  /// @param irq - External interrupt number. Value cannot be negative.
  static void NvicEnableIRQ(int irq)
    6208:	b480      	push	{r7}
    620a:	b083      	sub	sp, #12
    620c:	af00      	add	r7, sp, #0
    620e:	6078      	str	r0, [r7, #4]
  {
    nvic->ISER[(irq >> 5)] = (1 << (irq & 0x1F));
    6210:	687b      	ldr	r3, [r7, #4]
    6212:	f003 031f 	and.w	r3, r3, #31
    6216:	2201      	movs	r2, #1
    6218:	fa02 f103 	lsl.w	r1, r2, r3
    621c:	4b05      	ldr	r3, [pc, #20]	; (6234 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)+0x2c>)
    621e:	681b      	ldr	r3, [r3, #0]
    6220:	687a      	ldr	r2, [r7, #4]
    6222:	1152      	asrs	r2, r2, #5
    6224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
    6228:	bf00      	nop
    622a:	370c      	adds	r7, #12
    622c:	46bd      	mov	sp, r7
    622e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6232:	4770      	bx	lr
    6234:	1000007c 	.word	0x1000007c

00006238 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)>:
  /// Set Interrupt Priority
  /// Sets the priority of an interrupt.
  /// @note    The priority cannot be set for every core interrupt.
  /// @param irq -  Interrupt number.
  /// @param priority -  Priority to set.
  static void NvicSetPriority(int irq, uint32_t priority)
    6238:	b480      	push	{r7}
    623a:	b085      	sub	sp, #20
    623c:	af00      	add	r7, sp, #0
    623e:	6078      	str	r0, [r7, #4]
    6240:	6039      	str	r1, [r7, #0]
  {
    uint32_t priority_mask = priority << (8U - kNvicPriorityBits);
    6242:	683b      	ldr	r3, [r7, #0]
    6244:	00db      	lsls	r3, r3, #3
    6246:	60fb      	str	r3, [r7, #12]
    if (irq < 0)
    6248:	687b      	ldr	r3, [r7, #4]
    624a:	2b00      	cmp	r3, #0
    624c:	da0b      	bge.n	6266 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x2e>
    {
      scb->SHP[(irq & 0xFUL) - 4UL] = static_cast<uint8_t>(priority_mask);
    624e:	4b0e      	ldr	r3, [pc, #56]	; (6288 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x50>)
    6250:	681a      	ldr	r2, [r3, #0]
    6252:	687b      	ldr	r3, [r7, #4]
    6254:	f003 030f 	and.w	r3, r3, #15
    6258:	3b04      	subs	r3, #4
    625a:	68f9      	ldr	r1, [r7, #12]
    625c:	b2c9      	uxtb	r1, r1
    625e:	4413      	add	r3, r2
    6260:	460a      	mov	r2, r1
    6262:	761a      	strb	r2, [r3, #24]
    }
    else
    {
      nvic->IP[irq] = static_cast<uint8_t>(priority_mask);
    }
  }
    6264:	e009      	b.n	627a <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x42>
      nvic->IP[irq] = static_cast<uint8_t>(priority_mask);
    6266:	4b09      	ldr	r3, [pc, #36]	; (628c <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x54>)
    6268:	681a      	ldr	r2, [r3, #0]
    626a:	68fb      	ldr	r3, [r7, #12]
    626c:	b2d9      	uxtb	r1, r3
    626e:	687b      	ldr	r3, [r7, #4]
    6270:	4413      	add	r3, r2
    6272:	f503 7340 	add.w	r3, r3, #768	; 0x300
    6276:	460a      	mov	r2, r1
    6278:	701a      	strb	r2, [r3, #0]
  }
    627a:	bf00      	nop
    627c:	3714      	adds	r7, #20
    627e:	46bd      	mov	sp, r7
    6280:	f85d 7b04 	ldr.w	r7, [sp], #4
    6284:	4770      	bx	lr
    6286:	bf00      	nop
    6288:	10000078 	.word	0x10000078
    628c:	1000007c 	.word	0x1000007c

00006290 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>:
  static void NvicDisableIRQ(int irq)
    6290:	b480      	push	{r7}
    6292:	b083      	sub	sp, #12
    6294:	af00      	add	r7, sp, #0
    6296:	6078      	str	r0, [r7, #4]
    nvic->ICER[(irq >> 5)] = (1 << (irq & 0x1F));
    6298:	687b      	ldr	r3, [r7, #4]
    629a:	f003 031f 	and.w	r3, r3, #31
    629e:	2201      	movs	r2, #1
    62a0:	fa02 f103 	lsl.w	r1, r2, r3
    62a4:	4b06      	ldr	r3, [pc, #24]	; (62c0 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)+0x30>)
    62a6:	681b      	ldr	r3, [r3, #0]
    62a8:	687a      	ldr	r2, [r7, #4]
    62aa:	1152      	asrs	r2, r2, #5
    62ac:	3220      	adds	r2, #32
    62ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
    62b2:	bf00      	nop
    62b4:	370c      	adds	r7, #12
    62b6:	46bd      	mov	sp, r7
    62b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    62bc:	4770      	bx	lr
    62be:	bf00      	nop
    62c0:	1000007c 	.word	0x1000007c

000062c4 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()>:

  /// Program will call this if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void UnregisteredHandler()
    62c4:	b580      	push	{r7, lr}
    62c6:	b082      	sub	sp, #8
    62c8:	af02      	add	r7, sp, #8
  {
    LOG_DEBUG("No interrupt handler found. Disabling interrupt request %d!",
    62ca:	4b0a      	ldr	r3, [pc, #40]	; (62f4 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    62cc:	681b      	ldr	r3, [r3, #0]
    62ce:	9300      	str	r3, [sp, #0]
    62d0:	2385      	movs	r3, #133	; 0x85
    62d2:	4a09      	ldr	r2, [pc, #36]	; (62f8 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x34>)
    62d4:	4909      	ldr	r1, [pc, #36]	; (62fc <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x38>)
    62d6:	480a      	ldr	r0, [pc, #40]	; (6300 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x3c>)
    62d8:	f7fd ff26 	bl	4128 <printf>
              current_vector);
    if (current_vector >= 0)
    62dc:	4b05      	ldr	r3, [pc, #20]	; (62f4 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    62de:	681b      	ldr	r3, [r3, #0]
    62e0:	2b00      	cmp	r3, #0
    62e2:	db04      	blt.n	62ee <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x2a>
    {
      NvicDisableIRQ(current_vector);
    62e4:	4b03      	ldr	r3, [pc, #12]	; (62f4 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    62e6:	681b      	ldr	r3, [r3, #0]
    62e8:	4618      	mov	r0, r3
    62ea:	f7ff ffd1 	bl	6290 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>
    }
  }
    62ee:	bf00      	nop
    62f0:	46bd      	mov	sp, r7
    62f2:	bd80      	pop	{r7, pc}
    62f4:	10000080 	.word	0x10000080
    62f8:	00008db0 	.word	0x00008db0
    62fc:	00009038 	.word	0x00009038
    6300:	00008e74 	.word	0x00008e74

00006304 <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>:
	operator=(_Functor&& __f)
    6304:	b580      	push	{r7, lr}
    6306:	b086      	sub	sp, #24
    6308:	af00      	add	r7, sp, #0
    630a:	6078      	str	r0, [r7, #4]
    630c:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
    630e:	6838      	ldr	r0, [r7, #0]
    6310:	f000 f845 	bl	639e <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
    6314:	4602      	mov	r2, r0
    6316:	f107 0308 	add.w	r3, r7, #8
    631a:	4611      	mov	r1, r2
    631c:	4618      	mov	r0, r3
    631e:	f7fb fd3b 	bl	1d98 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
    6322:	f107 0308 	add.w	r3, r7, #8
    6326:	6879      	ldr	r1, [r7, #4]
    6328:	4618      	mov	r0, r3
    632a:	f7fb ff89 	bl	2240 <std::function<void ()>::swap(std::function<void ()>&)>
    632e:	f107 0308 	add.w	r3, r7, #8
    6332:	4618      	mov	r0, r3
    6334:	f7fa fdb7 	bl	ea6 <std::function<void ()>::~function()>
	  return *this;
    6338:	687b      	ldr	r3, [r7, #4]
	}
    633a:	4618      	mov	r0, r3
    633c:	3718      	adds	r7, #24
    633e:	46bd      	mov	sp, r7
    6340:	bd80      	pop	{r7, pc}

00006342 <std::array<std::function<void ()>, 59u>::data()>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
    6342:	b580      	push	{r7, lr}
    6344:	b082      	sub	sp, #8
    6346:	af00      	add	r7, sp, #0
    6348:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
    634a:	687b      	ldr	r3, [r7, #4]
    634c:	4618      	mov	r0, r3
    634e:	f000 f831 	bl	63b4 <std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])>
    6352:	4603      	mov	r3, r0
    6354:	4618      	mov	r0, r3
    6356:	3708      	adds	r7, #8
    6358:	46bd      	mov	sp, r7
    635a:	bd80      	pop	{r7, pc}

0000635c <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>:
    __niter_base(_Iterator __it)
    635c:	b480      	push	{r7}
    635e:	b083      	sub	sp, #12
    6360:	af00      	add	r7, sp, #0
    6362:	6078      	str	r0, [r7, #4]
    { return __it; }
    6364:	687b      	ldr	r3, [r7, #4]
    6366:	4618      	mov	r0, r3
    6368:	370c      	adds	r7, #12
    636a:	46bd      	mov	sp, r7
    636c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6370:	4770      	bx	lr

00006372 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
    6372:	b580      	push	{r7, lr}
    6374:	b084      	sub	sp, #16
    6376:	af00      	add	r7, sp, #0
    6378:	60f8      	str	r0, [r7, #12]
    637a:	60b9      	str	r1, [r7, #8]
    637c:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
    637e:	68fa      	ldr	r2, [r7, #12]
    6380:	68bb      	ldr	r3, [r7, #8]
    6382:	429a      	cmp	r2, r3
    6384:	d007      	beq.n	6396 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)+0x24>
	*__first = __value;
    6386:	6879      	ldr	r1, [r7, #4]
    6388:	68f8      	ldr	r0, [r7, #12]
    638a:	f7fb fd2f 	bl	1dec <std::function<void ()>::operator=(std::function<void ()> const&)>
      for (; __first != __last; ++__first)
    638e:	68fb      	ldr	r3, [r7, #12]
    6390:	3310      	adds	r3, #16
    6392:	60fb      	str	r3, [r7, #12]
    6394:	e7f3      	b.n	637e <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)+0xc>
    }
    6396:	bf00      	nop
    6398:	3710      	adds	r7, #16
    639a:	46bd      	mov	sp, r7
    639c:	bd80      	pop	{r7, pc}

0000639e <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    639e:	b480      	push	{r7}
    63a0:	b083      	sub	sp, #12
    63a2:	af00      	add	r7, sp, #0
    63a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
    63a6:	687b      	ldr	r3, [r7, #4]
    63a8:	4618      	mov	r0, r3
    63aa:	370c      	adds	r7, #12
    63ac:	46bd      	mov	sp, r7
    63ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    63b2:	4770      	bx	lr

000063b4 <std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])>:
      _S_ptr(const _Type& __t) noexcept
    63b4:	b480      	push	{r7}
    63b6:	b083      	sub	sp, #12
    63b8:	af00      	add	r7, sp, #0
    63ba:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
    63bc:	687b      	ldr	r3, [r7, #4]
    63be:	4618      	mov	r0, r3
    63c0:	370c      	adds	r7, #12
    63c2:	46bd      	mov	sp, r7
    63c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    63c8:	4770      	bx	lr

000063ca <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    63ca:	b580      	push	{r7, lr}
    63cc:	af00      	add	r7, sp, #0
    63ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    63d2:	2001      	movs	r0, #1
    63d4:	f7ff fdbe 	bl	5f54 <__static_initialization_and_destruction_0(int, int)>
    63d8:	bd80      	pop	{r7, pc}
    63da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    63de:	Address 0x00000000000063de is out of bounds.


000063e0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    63e0:	4b07      	ldr	r3, [pc, #28]	; (6400 <pxCurrentTCBConst2>)
    63e2:	6819      	ldr	r1, [r3, #0]
    63e4:	6808      	ldr	r0, [r1, #0]
    63e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63ea:	f380 8809 	msr	PSP, r0
    63ee:	f3bf 8f6f 	isb	sy
    63f2:	f04f 0000 	mov.w	r0, #0
    63f6:	f380 8811 	msr	BASEPRI, r0
    63fa:	4770      	bx	lr
    63fc:	f3af 8000 	nop.w

00006400 <pxCurrentTCBConst2>:
    6400:	1000075c 	.word	0x1000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    6404:	bf00      	nop
    6406:	bf00      	nop
    6408:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    640c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00006410 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    6410:	f3ef 8009 	mrs	r0, PSP
    6414:	f3bf 8f6f 	isb	sy
    6418:	4b15      	ldr	r3, [pc, #84]	; (6470 <pxCurrentTCBConst>)
    641a:	681a      	ldr	r2, [r3, #0]
    641c:	f01e 0f10 	tst.w	lr, #16
    6420:	bf08      	it	eq
    6422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    6426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    642a:	6010      	str	r0, [r2, #0]
    642c:	e92d 0009 	stmdb	sp!, {r0, r3}
    6430:	f04f 0028 	mov.w	r0, #40	; 0x28
    6434:	f380 8811 	msr	BASEPRI, r0
    6438:	f3bf 8f4f 	dsb	sy
    643c:	f3bf 8f6f 	isb	sy
    6440:	f7fc fc9c 	bl	2d7c <vTaskSwitchContext>
    6444:	f04f 0000 	mov.w	r0, #0
    6448:	f380 8811 	msr	BASEPRI, r0
    644c:	bc09      	pop	{r0, r3}
    644e:	6819      	ldr	r1, [r3, #0]
    6450:	6808      	ldr	r0, [r1, #0]
    6452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6456:	f01e 0f10 	tst.w	lr, #16
    645a:	bf08      	it	eq
    645c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    6460:	f380 8809 	msr	PSP, r0
    6464:	f3bf 8f6f 	isb	sy
    6468:	4770      	bx	lr
    646a:	bf00      	nop
    646c:	f3af 8000 	nop.w

00006470 <pxCurrentTCBConst>:
    6470:	1000075c 	.word	0x1000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    6474:	bf00      	nop
    6476:	bf00      	nop

00006478 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    6478:	b480      	push	{r7}
    647a:	b083      	sub	sp, #12
    647c:	af00      	add	r7, sp, #0
    647e:	6078      	str	r0, [r7, #4]
    6480:	6039      	str	r1, [r7, #0]
  return 1;
    6482:	2301      	movs	r3, #1
}
    6484:	4618      	mov	r0, r3
    6486:	370c      	adds	r7, #12
    6488:	46bd      	mov	sp, r7
    648a:	f85d 7b04 	ldr.w	r7, [sp], #4
    648e:	4770      	bx	lr

00006490 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    6490:	b480      	push	{r7}
    6492:	b083      	sub	sp, #12
    6494:	af00      	add	r7, sp, #0
    6496:	6078      	str	r0, [r7, #4]
    6498:	6039      	str	r1, [r7, #0]
  return 0;
    649a:	2300      	movs	r3, #0
}
    649c:	4618      	mov	r0, r3
    649e:	370c      	adds	r7, #12
    64a0:	46bd      	mov	sp, r7
    64a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    64a6:	4770      	bx	lr

000064a8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    64a8:	b480      	push	{r7}
    64aa:	b083      	sub	sp, #12
    64ac:	af00      	add	r7, sp, #0
    64ae:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    64b0:	4a04      	ldr	r2, [pc, #16]	; (64c4 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    64b2:	687b      	ldr	r3, [r7, #4]
    64b4:	6013      	str	r3, [r2, #0]
}
    64b6:	bf00      	nop
    64b8:	370c      	adds	r7, #12
    64ba:	46bd      	mov	sp, r7
    64bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    64c0:	4770      	bx	lr
    64c2:	bf00      	nop
    64c4:	10000004 	.word	0x10000004

000064c8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    64c8:	b480      	push	{r7}
    64ca:	b083      	sub	sp, #12
    64cc:	af00      	add	r7, sp, #0
    64ce:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    64d0:	4a04      	ldr	r2, [pc, #16]	; (64e4 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    64d2:	687b      	ldr	r3, [r7, #4]
    64d4:	6013      	str	r3, [r2, #0]
}
    64d6:	bf00      	nop
    64d8:	370c      	adds	r7, #12
    64da:	46bd      	mov	sp, r7
    64dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    64e0:	4770      	bx	lr
    64e2:	bf00      	nop
    64e4:	10000008 	.word	0x10000008

000064e8 <__aeabi_atexit>:
    64e8:	460b      	mov	r3, r1
    64ea:	4601      	mov	r1, r0
    64ec:	4618      	mov	r0, r3
    64ee:	f001 ba9d 	b.w	7a2c <__cxa_atexit>

000064f2 <__cxa_pure_virtual>:
    64f2:	b508      	push	{r3, lr}
    64f4:	f000 f810 	bl	6518 <std::terminate()>

000064f8 <std::__throw_bad_function_call()>:
    64f8:	b508      	push	{r3, lr}
    64fa:	f001 fa8f 	bl	7a1c <abort>

000064fe <__cxxabiv1::__terminate(void (*)())>:
    64fe:	b508      	push	{r3, lr}
    6500:	4780      	blx	r0
    6502:	f001 fa8b 	bl	7a1c <abort>
    6506:	Address 0x0000000000006506 is out of bounds.


00006508 <std::get_terminate()>:
    6508:	4b02      	ldr	r3, [pc, #8]	; (6514 <std::get_terminate()+0xc>)
    650a:	6818      	ldr	r0, [r3, #0]
    650c:	f3bf 8f5b 	dmb	ish
    6510:	4770      	bx	lr
    6512:	bf00      	nop
    6514:	10000088 	.word	0x10000088

00006518 <std::terminate()>:
    6518:	b508      	push	{r3, lr}
    651a:	f7ff fff5 	bl	6508 <std::get_terminate()>
    651e:	f7ff ffee 	bl	64fe <__cxxabiv1::__terminate(void (*)())>
    6522:	Address 0x0000000000006522 is out of bounds.


00006524 <__aeabi_d2f>:
    6524:	ea4f 0241 	mov.w	r2, r1, lsl #1
    6528:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    652c:	bf24      	itt	cs
    652e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    6532:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    6536:	d90d      	bls.n	6554 <__aeabi_d2f+0x30>
    6538:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    653c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    6540:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    6544:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6548:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    654c:	bf08      	it	eq
    654e:	f020 0001 	biceq.w	r0, r0, #1
    6552:	4770      	bx	lr
    6554:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    6558:	d121      	bne.n	659e <__aeabi_d2f+0x7a>
    655a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    655e:	bfbc      	itt	lt
    6560:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    6564:	4770      	bxlt	lr
    6566:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    656a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    656e:	f1c2 0218 	rsb	r2, r2, #24
    6572:	f1c2 0c20 	rsb	ip, r2, #32
    6576:	fa10 f30c 	lsls.w	r3, r0, ip
    657a:	fa20 f002 	lsr.w	r0, r0, r2
    657e:	bf18      	it	ne
    6580:	f040 0001 	orrne.w	r0, r0, #1
    6584:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    6588:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    658c:	fa03 fc0c 	lsl.w	ip, r3, ip
    6590:	ea40 000c 	orr.w	r0, r0, ip
    6594:	fa23 f302 	lsr.w	r3, r3, r2
    6598:	ea4f 0343 	mov.w	r3, r3, lsl #1
    659c:	e7cc      	b.n	6538 <__aeabi_d2f+0x14>
    659e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    65a2:	d107      	bne.n	65b4 <__aeabi_d2f+0x90>
    65a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    65a8:	bf1e      	ittt	ne
    65aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    65ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    65b2:	4770      	bxne	lr
    65b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    65b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    65bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    65c0:	4770      	bx	lr
    65c2:	bf00      	nop

000065c4 <__aeabi_frsub>:
    65c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    65c8:	e002      	b.n	65d0 <__addsf3>
    65ca:	bf00      	nop

000065cc <__aeabi_fsub>:
    65cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000065d0 <__addsf3>:
    65d0:	0042      	lsls	r2, r0, #1
    65d2:	bf1f      	itttt	ne
    65d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    65d8:	ea92 0f03 	teqne	r2, r3
    65dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    65e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    65e4:	d06a      	beq.n	66bc <__addsf3+0xec>
    65e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    65ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    65ee:	bfc1      	itttt	gt
    65f0:	18d2      	addgt	r2, r2, r3
    65f2:	4041      	eorgt	r1, r0
    65f4:	4048      	eorgt	r0, r1
    65f6:	4041      	eorgt	r1, r0
    65f8:	bfb8      	it	lt
    65fa:	425b      	neglt	r3, r3
    65fc:	2b19      	cmp	r3, #25
    65fe:	bf88      	it	hi
    6600:	4770      	bxhi	lr
    6602:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    6606:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    660a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    660e:	bf18      	it	ne
    6610:	4240      	negne	r0, r0
    6612:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6616:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    661a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    661e:	bf18      	it	ne
    6620:	4249      	negne	r1, r1
    6622:	ea92 0f03 	teq	r2, r3
    6626:	d03f      	beq.n	66a8 <__addsf3+0xd8>
    6628:	f1a2 0201 	sub.w	r2, r2, #1
    662c:	fa41 fc03 	asr.w	ip, r1, r3
    6630:	eb10 000c 	adds.w	r0, r0, ip
    6634:	f1c3 0320 	rsb	r3, r3, #32
    6638:	fa01 f103 	lsl.w	r1, r1, r3
    663c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6640:	d502      	bpl.n	6648 <__addsf3+0x78>
    6642:	4249      	negs	r1, r1
    6644:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    6648:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    664c:	d313      	bcc.n	6676 <__addsf3+0xa6>
    664e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    6652:	d306      	bcc.n	6662 <__addsf3+0x92>
    6654:	0840      	lsrs	r0, r0, #1
    6656:	ea4f 0131 	mov.w	r1, r1, rrx
    665a:	f102 0201 	add.w	r2, r2, #1
    665e:	2afe      	cmp	r2, #254	; 0xfe
    6660:	d251      	bcs.n	6706 <__addsf3+0x136>
    6662:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    6666:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    666a:	bf08      	it	eq
    666c:	f020 0001 	biceq.w	r0, r0, #1
    6670:	ea40 0003 	orr.w	r0, r0, r3
    6674:	4770      	bx	lr
    6676:	0049      	lsls	r1, r1, #1
    6678:	eb40 0000 	adc.w	r0, r0, r0
    667c:	3a01      	subs	r2, #1
    667e:	bf28      	it	cs
    6680:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    6684:	d2ed      	bcs.n	6662 <__addsf3+0x92>
    6686:	fab0 fc80 	clz	ip, r0
    668a:	f1ac 0c08 	sub.w	ip, ip, #8
    668e:	ebb2 020c 	subs.w	r2, r2, ip
    6692:	fa00 f00c 	lsl.w	r0, r0, ip
    6696:	bfaa      	itet	ge
    6698:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    669c:	4252      	neglt	r2, r2
    669e:	4318      	orrge	r0, r3
    66a0:	bfbc      	itt	lt
    66a2:	40d0      	lsrlt	r0, r2
    66a4:	4318      	orrlt	r0, r3
    66a6:	4770      	bx	lr
    66a8:	f092 0f00 	teq	r2, #0
    66ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    66b0:	bf06      	itte	eq
    66b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    66b6:	3201      	addeq	r2, #1
    66b8:	3b01      	subne	r3, #1
    66ba:	e7b5      	b.n	6628 <__addsf3+0x58>
    66bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    66c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    66c4:	bf18      	it	ne
    66c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    66ca:	d021      	beq.n	6710 <__addsf3+0x140>
    66cc:	ea92 0f03 	teq	r2, r3
    66d0:	d004      	beq.n	66dc <__addsf3+0x10c>
    66d2:	f092 0f00 	teq	r2, #0
    66d6:	bf08      	it	eq
    66d8:	4608      	moveq	r0, r1
    66da:	4770      	bx	lr
    66dc:	ea90 0f01 	teq	r0, r1
    66e0:	bf1c      	itt	ne
    66e2:	2000      	movne	r0, #0
    66e4:	4770      	bxne	lr
    66e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    66ea:	d104      	bne.n	66f6 <__addsf3+0x126>
    66ec:	0040      	lsls	r0, r0, #1
    66ee:	bf28      	it	cs
    66f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    66f4:	4770      	bx	lr
    66f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    66fa:	bf3c      	itt	cc
    66fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    6700:	4770      	bxcc	lr
    6702:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6706:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    670a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    670e:	4770      	bx	lr
    6710:	ea7f 6222 	mvns.w	r2, r2, asr #24
    6714:	bf16      	itet	ne
    6716:	4608      	movne	r0, r1
    6718:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    671c:	4601      	movne	r1, r0
    671e:	0242      	lsls	r2, r0, #9
    6720:	bf06      	itte	eq
    6722:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    6726:	ea90 0f01 	teqeq	r0, r1
    672a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    672e:	4770      	bx	lr

00006730 <__aeabi_ui2f>:
    6730:	f04f 0300 	mov.w	r3, #0
    6734:	e004      	b.n	6740 <__aeabi_i2f+0x8>
    6736:	bf00      	nop

00006738 <__aeabi_i2f>:
    6738:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    673c:	bf48      	it	mi
    673e:	4240      	negmi	r0, r0
    6740:	ea5f 0c00 	movs.w	ip, r0
    6744:	bf08      	it	eq
    6746:	4770      	bxeq	lr
    6748:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    674c:	4601      	mov	r1, r0
    674e:	f04f 0000 	mov.w	r0, #0
    6752:	e01c      	b.n	678e <__aeabi_l2f+0x2a>

00006754 <__aeabi_ul2f>:
    6754:	ea50 0201 	orrs.w	r2, r0, r1
    6758:	bf08      	it	eq
    675a:	4770      	bxeq	lr
    675c:	f04f 0300 	mov.w	r3, #0
    6760:	e00a      	b.n	6778 <__aeabi_l2f+0x14>
    6762:	bf00      	nop

00006764 <__aeabi_l2f>:
    6764:	ea50 0201 	orrs.w	r2, r0, r1
    6768:	bf08      	it	eq
    676a:	4770      	bxeq	lr
    676c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    6770:	d502      	bpl.n	6778 <__aeabi_l2f+0x14>
    6772:	4240      	negs	r0, r0
    6774:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6778:	ea5f 0c01 	movs.w	ip, r1
    677c:	bf02      	ittt	eq
    677e:	4684      	moveq	ip, r0
    6780:	4601      	moveq	r1, r0
    6782:	2000      	moveq	r0, #0
    6784:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    6788:	bf08      	it	eq
    678a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    678e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    6792:	fabc f28c 	clz	r2, ip
    6796:	3a08      	subs	r2, #8
    6798:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    679c:	db10      	blt.n	67c0 <__aeabi_l2f+0x5c>
    679e:	fa01 fc02 	lsl.w	ip, r1, r2
    67a2:	4463      	add	r3, ip
    67a4:	fa00 fc02 	lsl.w	ip, r0, r2
    67a8:	f1c2 0220 	rsb	r2, r2, #32
    67ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    67b0:	fa20 f202 	lsr.w	r2, r0, r2
    67b4:	eb43 0002 	adc.w	r0, r3, r2
    67b8:	bf08      	it	eq
    67ba:	f020 0001 	biceq.w	r0, r0, #1
    67be:	4770      	bx	lr
    67c0:	f102 0220 	add.w	r2, r2, #32
    67c4:	fa01 fc02 	lsl.w	ip, r1, r2
    67c8:	f1c2 0220 	rsb	r2, r2, #32
    67cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    67d0:	fa21 f202 	lsr.w	r2, r1, r2
    67d4:	eb43 0002 	adc.w	r0, r3, r2
    67d8:	bf08      	it	eq
    67da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    67de:	4770      	bx	lr

000067e0 <__aeabi_ldivmod>:
    67e0:	b97b      	cbnz	r3, 6802 <__aeabi_ldivmod+0x22>
    67e2:	b972      	cbnz	r2, 6802 <__aeabi_ldivmod+0x22>
    67e4:	2900      	cmp	r1, #0
    67e6:	bfbe      	ittt	lt
    67e8:	2000      	movlt	r0, #0
    67ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    67ee:	e006      	blt.n	67fe <__aeabi_ldivmod+0x1e>
    67f0:	bf08      	it	eq
    67f2:	2800      	cmpeq	r0, #0
    67f4:	bf1c      	itt	ne
    67f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    67fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    67fe:	f001 b90b 	b.w	7a18 <__aeabi_idiv0>
    6802:	f1ad 0c08 	sub.w	ip, sp, #8
    6806:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    680a:	2900      	cmp	r1, #0
    680c:	db09      	blt.n	6822 <__aeabi_ldivmod+0x42>
    680e:	2b00      	cmp	r3, #0
    6810:	db1a      	blt.n	6848 <__aeabi_ldivmod+0x68>
    6812:	f000 f84d 	bl	68b0 <__udivmoddi4>
    6816:	f8dd e004 	ldr.w	lr, [sp, #4]
    681a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    681e:	b004      	add	sp, #16
    6820:	4770      	bx	lr
    6822:	4240      	negs	r0, r0
    6824:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6828:	2b00      	cmp	r3, #0
    682a:	db1b      	blt.n	6864 <__aeabi_ldivmod+0x84>
    682c:	f000 f840 	bl	68b0 <__udivmoddi4>
    6830:	f8dd e004 	ldr.w	lr, [sp, #4]
    6834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6838:	b004      	add	sp, #16
    683a:	4240      	negs	r0, r0
    683c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6840:	4252      	negs	r2, r2
    6842:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6846:	4770      	bx	lr
    6848:	4252      	negs	r2, r2
    684a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    684e:	f000 f82f 	bl	68b0 <__udivmoddi4>
    6852:	f8dd e004 	ldr.w	lr, [sp, #4]
    6856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    685a:	b004      	add	sp, #16
    685c:	4240      	negs	r0, r0
    685e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6862:	4770      	bx	lr
    6864:	4252      	negs	r2, r2
    6866:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    686a:	f000 f821 	bl	68b0 <__udivmoddi4>
    686e:	f8dd e004 	ldr.w	lr, [sp, #4]
    6872:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6876:	b004      	add	sp, #16
    6878:	4252      	negs	r2, r2
    687a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    687e:	4770      	bx	lr

00006880 <__aeabi_uldivmod>:
    6880:	b953      	cbnz	r3, 6898 <__aeabi_uldivmod+0x18>
    6882:	b94a      	cbnz	r2, 6898 <__aeabi_uldivmod+0x18>
    6884:	2900      	cmp	r1, #0
    6886:	bf08      	it	eq
    6888:	2800      	cmpeq	r0, #0
    688a:	bf1c      	itt	ne
    688c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    6890:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6894:	f001 b8c0 	b.w	7a18 <__aeabi_idiv0>
    6898:	f1ad 0c08 	sub.w	ip, sp, #8
    689c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    68a0:	f000 f806 	bl	68b0 <__udivmoddi4>
    68a4:	f8dd e004 	ldr.w	lr, [sp, #4]
    68a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    68ac:	b004      	add	sp, #16
    68ae:	4770      	bx	lr

000068b0 <__udivmoddi4>:
    68b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68b4:	9d08      	ldr	r5, [sp, #32]
    68b6:	4604      	mov	r4, r0
    68b8:	468c      	mov	ip, r1
    68ba:	2b00      	cmp	r3, #0
    68bc:	f040 8083 	bne.w	69c6 <__udivmoddi4+0x116>
    68c0:	428a      	cmp	r2, r1
    68c2:	4617      	mov	r7, r2
    68c4:	d947      	bls.n	6956 <__udivmoddi4+0xa6>
    68c6:	fab2 f282 	clz	r2, r2
    68ca:	b142      	cbz	r2, 68de <__udivmoddi4+0x2e>
    68cc:	f1c2 0020 	rsb	r0, r2, #32
    68d0:	fa24 f000 	lsr.w	r0, r4, r0
    68d4:	4091      	lsls	r1, r2
    68d6:	4097      	lsls	r7, r2
    68d8:	ea40 0c01 	orr.w	ip, r0, r1
    68dc:	4094      	lsls	r4, r2
    68de:	ea4f 4817 	mov.w	r8, r7, lsr #16
    68e2:	0c23      	lsrs	r3, r4, #16
    68e4:	fbbc f6f8 	udiv	r6, ip, r8
    68e8:	fa1f fe87 	uxth.w	lr, r7
    68ec:	fb08 c116 	mls	r1, r8, r6, ip
    68f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    68f4:	fb06 f10e 	mul.w	r1, r6, lr
    68f8:	4299      	cmp	r1, r3
    68fa:	d909      	bls.n	6910 <__udivmoddi4+0x60>
    68fc:	18fb      	adds	r3, r7, r3
    68fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
    6902:	f080 8119 	bcs.w	6b38 <__udivmoddi4+0x288>
    6906:	4299      	cmp	r1, r3
    6908:	f240 8116 	bls.w	6b38 <__udivmoddi4+0x288>
    690c:	3e02      	subs	r6, #2
    690e:	443b      	add	r3, r7
    6910:	1a5b      	subs	r3, r3, r1
    6912:	b2a4      	uxth	r4, r4
    6914:	fbb3 f0f8 	udiv	r0, r3, r8
    6918:	fb08 3310 	mls	r3, r8, r0, r3
    691c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    6920:	fb00 fe0e 	mul.w	lr, r0, lr
    6924:	45a6      	cmp	lr, r4
    6926:	d909      	bls.n	693c <__udivmoddi4+0x8c>
    6928:	193c      	adds	r4, r7, r4
    692a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    692e:	f080 8105 	bcs.w	6b3c <__udivmoddi4+0x28c>
    6932:	45a6      	cmp	lr, r4
    6934:	f240 8102 	bls.w	6b3c <__udivmoddi4+0x28c>
    6938:	3802      	subs	r0, #2
    693a:	443c      	add	r4, r7
    693c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    6940:	eba4 040e 	sub.w	r4, r4, lr
    6944:	2600      	movs	r6, #0
    6946:	b11d      	cbz	r5, 6950 <__udivmoddi4+0xa0>
    6948:	40d4      	lsrs	r4, r2
    694a:	2300      	movs	r3, #0
    694c:	e9c5 4300 	strd	r4, r3, [r5]
    6950:	4631      	mov	r1, r6
    6952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6956:	b902      	cbnz	r2, 695a <__udivmoddi4+0xaa>
    6958:	deff      	udf	#255	; 0xff
    695a:	fab2 f282 	clz	r2, r2
    695e:	2a00      	cmp	r2, #0
    6960:	d150      	bne.n	6a04 <__udivmoddi4+0x154>
    6962:	1bcb      	subs	r3, r1, r7
    6964:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    6968:	fa1f f887 	uxth.w	r8, r7
    696c:	2601      	movs	r6, #1
    696e:	fbb3 fcfe 	udiv	ip, r3, lr
    6972:	0c21      	lsrs	r1, r4, #16
    6974:	fb0e 331c 	mls	r3, lr, ip, r3
    6978:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    697c:	fb08 f30c 	mul.w	r3, r8, ip
    6980:	428b      	cmp	r3, r1
    6982:	d907      	bls.n	6994 <__udivmoddi4+0xe4>
    6984:	1879      	adds	r1, r7, r1
    6986:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    698a:	d202      	bcs.n	6992 <__udivmoddi4+0xe2>
    698c:	428b      	cmp	r3, r1
    698e:	f200 80e9 	bhi.w	6b64 <__udivmoddi4+0x2b4>
    6992:	4684      	mov	ip, r0
    6994:	1ac9      	subs	r1, r1, r3
    6996:	b2a3      	uxth	r3, r4
    6998:	fbb1 f0fe 	udiv	r0, r1, lr
    699c:	fb0e 1110 	mls	r1, lr, r0, r1
    69a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    69a4:	fb08 f800 	mul.w	r8, r8, r0
    69a8:	45a0      	cmp	r8, r4
    69aa:	d907      	bls.n	69bc <__udivmoddi4+0x10c>
    69ac:	193c      	adds	r4, r7, r4
    69ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    69b2:	d202      	bcs.n	69ba <__udivmoddi4+0x10a>
    69b4:	45a0      	cmp	r8, r4
    69b6:	f200 80d9 	bhi.w	6b6c <__udivmoddi4+0x2bc>
    69ba:	4618      	mov	r0, r3
    69bc:	eba4 0408 	sub.w	r4, r4, r8
    69c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    69c4:	e7bf      	b.n	6946 <__udivmoddi4+0x96>
    69c6:	428b      	cmp	r3, r1
    69c8:	d909      	bls.n	69de <__udivmoddi4+0x12e>
    69ca:	2d00      	cmp	r5, #0
    69cc:	f000 80b1 	beq.w	6b32 <__udivmoddi4+0x282>
    69d0:	2600      	movs	r6, #0
    69d2:	e9c5 0100 	strd	r0, r1, [r5]
    69d6:	4630      	mov	r0, r6
    69d8:	4631      	mov	r1, r6
    69da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    69de:	fab3 f683 	clz	r6, r3
    69e2:	2e00      	cmp	r6, #0
    69e4:	d14a      	bne.n	6a7c <__udivmoddi4+0x1cc>
    69e6:	428b      	cmp	r3, r1
    69e8:	d302      	bcc.n	69f0 <__udivmoddi4+0x140>
    69ea:	4282      	cmp	r2, r0
    69ec:	f200 80b8 	bhi.w	6b60 <__udivmoddi4+0x2b0>
    69f0:	1a84      	subs	r4, r0, r2
    69f2:	eb61 0103 	sbc.w	r1, r1, r3
    69f6:	2001      	movs	r0, #1
    69f8:	468c      	mov	ip, r1
    69fa:	2d00      	cmp	r5, #0
    69fc:	d0a8      	beq.n	6950 <__udivmoddi4+0xa0>
    69fe:	e9c5 4c00 	strd	r4, ip, [r5]
    6a02:	e7a5      	b.n	6950 <__udivmoddi4+0xa0>
    6a04:	f1c2 0320 	rsb	r3, r2, #32
    6a08:	fa20 f603 	lsr.w	r6, r0, r3
    6a0c:	4097      	lsls	r7, r2
    6a0e:	fa01 f002 	lsl.w	r0, r1, r2
    6a12:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    6a16:	40d9      	lsrs	r1, r3
    6a18:	4330      	orrs	r0, r6
    6a1a:	0c03      	lsrs	r3, r0, #16
    6a1c:	fbb1 f6fe 	udiv	r6, r1, lr
    6a20:	fa1f f887 	uxth.w	r8, r7
    6a24:	fb0e 1116 	mls	r1, lr, r6, r1
    6a28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6a2c:	fb06 f108 	mul.w	r1, r6, r8
    6a30:	4299      	cmp	r1, r3
    6a32:	fa04 f402 	lsl.w	r4, r4, r2
    6a36:	d909      	bls.n	6a4c <__udivmoddi4+0x19c>
    6a38:	18fb      	adds	r3, r7, r3
    6a3a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
    6a3e:	f080 808d 	bcs.w	6b5c <__udivmoddi4+0x2ac>
    6a42:	4299      	cmp	r1, r3
    6a44:	f240 808a 	bls.w	6b5c <__udivmoddi4+0x2ac>
    6a48:	3e02      	subs	r6, #2
    6a4a:	443b      	add	r3, r7
    6a4c:	1a5b      	subs	r3, r3, r1
    6a4e:	b281      	uxth	r1, r0
    6a50:	fbb3 f0fe 	udiv	r0, r3, lr
    6a54:	fb0e 3310 	mls	r3, lr, r0, r3
    6a58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6a5c:	fb00 f308 	mul.w	r3, r0, r8
    6a60:	428b      	cmp	r3, r1
    6a62:	d907      	bls.n	6a74 <__udivmoddi4+0x1c4>
    6a64:	1879      	adds	r1, r7, r1
    6a66:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    6a6a:	d273      	bcs.n	6b54 <__udivmoddi4+0x2a4>
    6a6c:	428b      	cmp	r3, r1
    6a6e:	d971      	bls.n	6b54 <__udivmoddi4+0x2a4>
    6a70:	3802      	subs	r0, #2
    6a72:	4439      	add	r1, r7
    6a74:	1acb      	subs	r3, r1, r3
    6a76:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
    6a7a:	e778      	b.n	696e <__udivmoddi4+0xbe>
    6a7c:	f1c6 0c20 	rsb	ip, r6, #32
    6a80:	fa03 f406 	lsl.w	r4, r3, r6
    6a84:	fa22 f30c 	lsr.w	r3, r2, ip
    6a88:	431c      	orrs	r4, r3
    6a8a:	fa20 f70c 	lsr.w	r7, r0, ip
    6a8e:	fa01 f306 	lsl.w	r3, r1, r6
    6a92:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    6a96:	fa21 f10c 	lsr.w	r1, r1, ip
    6a9a:	431f      	orrs	r7, r3
    6a9c:	0c3b      	lsrs	r3, r7, #16
    6a9e:	fbb1 f9fe 	udiv	r9, r1, lr
    6aa2:	fa1f f884 	uxth.w	r8, r4
    6aa6:	fb0e 1119 	mls	r1, lr, r9, r1
    6aaa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    6aae:	fb09 fa08 	mul.w	sl, r9, r8
    6ab2:	458a      	cmp	sl, r1
    6ab4:	fa02 f206 	lsl.w	r2, r2, r6
    6ab8:	fa00 f306 	lsl.w	r3, r0, r6
    6abc:	d908      	bls.n	6ad0 <__udivmoddi4+0x220>
    6abe:	1861      	adds	r1, r4, r1
    6ac0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    6ac4:	d248      	bcs.n	6b58 <__udivmoddi4+0x2a8>
    6ac6:	458a      	cmp	sl, r1
    6ac8:	d946      	bls.n	6b58 <__udivmoddi4+0x2a8>
    6aca:	f1a9 0902 	sub.w	r9, r9, #2
    6ace:	4421      	add	r1, r4
    6ad0:	eba1 010a 	sub.w	r1, r1, sl
    6ad4:	b2bf      	uxth	r7, r7
    6ad6:	fbb1 f0fe 	udiv	r0, r1, lr
    6ada:	fb0e 1110 	mls	r1, lr, r0, r1
    6ade:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
    6ae2:	fb00 f808 	mul.w	r8, r0, r8
    6ae6:	45b8      	cmp	r8, r7
    6ae8:	d907      	bls.n	6afa <__udivmoddi4+0x24a>
    6aea:	19e7      	adds	r7, r4, r7
    6aec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    6af0:	d22e      	bcs.n	6b50 <__udivmoddi4+0x2a0>
    6af2:	45b8      	cmp	r8, r7
    6af4:	d92c      	bls.n	6b50 <__udivmoddi4+0x2a0>
    6af6:	3802      	subs	r0, #2
    6af8:	4427      	add	r7, r4
    6afa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    6afe:	eba7 0708 	sub.w	r7, r7, r8
    6b02:	fba0 8902 	umull	r8, r9, r0, r2
    6b06:	454f      	cmp	r7, r9
    6b08:	46c6      	mov	lr, r8
    6b0a:	4649      	mov	r1, r9
    6b0c:	d31a      	bcc.n	6b44 <__udivmoddi4+0x294>
    6b0e:	d017      	beq.n	6b40 <__udivmoddi4+0x290>
    6b10:	b15d      	cbz	r5, 6b2a <__udivmoddi4+0x27a>
    6b12:	ebb3 020e 	subs.w	r2, r3, lr
    6b16:	eb67 0701 	sbc.w	r7, r7, r1
    6b1a:	fa07 fc0c 	lsl.w	ip, r7, ip
    6b1e:	40f2      	lsrs	r2, r6
    6b20:	ea4c 0202 	orr.w	r2, ip, r2
    6b24:	40f7      	lsrs	r7, r6
    6b26:	e9c5 2700 	strd	r2, r7, [r5]
    6b2a:	2600      	movs	r6, #0
    6b2c:	4631      	mov	r1, r6
    6b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b32:	462e      	mov	r6, r5
    6b34:	4628      	mov	r0, r5
    6b36:	e70b      	b.n	6950 <__udivmoddi4+0xa0>
    6b38:	4606      	mov	r6, r0
    6b3a:	e6e9      	b.n	6910 <__udivmoddi4+0x60>
    6b3c:	4618      	mov	r0, r3
    6b3e:	e6fd      	b.n	693c <__udivmoddi4+0x8c>
    6b40:	4543      	cmp	r3, r8
    6b42:	d2e5      	bcs.n	6b10 <__udivmoddi4+0x260>
    6b44:	ebb8 0e02 	subs.w	lr, r8, r2
    6b48:	eb69 0104 	sbc.w	r1, r9, r4
    6b4c:	3801      	subs	r0, #1
    6b4e:	e7df      	b.n	6b10 <__udivmoddi4+0x260>
    6b50:	4608      	mov	r0, r1
    6b52:	e7d2      	b.n	6afa <__udivmoddi4+0x24a>
    6b54:	4660      	mov	r0, ip
    6b56:	e78d      	b.n	6a74 <__udivmoddi4+0x1c4>
    6b58:	4681      	mov	r9, r0
    6b5a:	e7b9      	b.n	6ad0 <__udivmoddi4+0x220>
    6b5c:	4666      	mov	r6, ip
    6b5e:	e775      	b.n	6a4c <__udivmoddi4+0x19c>
    6b60:	4630      	mov	r0, r6
    6b62:	e74a      	b.n	69fa <__udivmoddi4+0x14a>
    6b64:	f1ac 0c02 	sub.w	ip, ip, #2
    6b68:	4439      	add	r1, r7
    6b6a:	e713      	b.n	6994 <__udivmoddi4+0xe4>
    6b6c:	3802      	subs	r0, #2
    6b6e:	443c      	add	r4, r7
    6b70:	e724      	b.n	69bc <__udivmoddi4+0x10c>
    6b72:	bf00      	nop

00006b74 <selfrel_offset31>:
    6b74:	6803      	ldr	r3, [r0, #0]
    6b76:	005a      	lsls	r2, r3, #1
    6b78:	bf4c      	ite	mi
    6b7a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    6b7e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    6b82:	4418      	add	r0, r3
    6b84:	4770      	bx	lr
    6b86:	bf00      	nop

00006b88 <search_EIT_table>:
    6b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b8c:	b329      	cbz	r1, 6bda <search_EIT_table+0x52>
    6b8e:	1e4f      	subs	r7, r1, #1
    6b90:	4604      	mov	r4, r0
    6b92:	4615      	mov	r5, r2
    6b94:	463e      	mov	r6, r7
    6b96:	f04f 0800 	mov.w	r8, #0
    6b9a:	eb08 0106 	add.w	r1, r8, r6
    6b9e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    6ba2:	1049      	asrs	r1, r1, #1
    6ba4:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
    6ba8:	4648      	mov	r0, r9
    6baa:	f7ff ffe3 	bl	6b74 <selfrel_offset31>
    6bae:	4603      	mov	r3, r0
    6bb0:	00c8      	lsls	r0, r1, #3
    6bb2:	3008      	adds	r0, #8
    6bb4:	428f      	cmp	r7, r1
    6bb6:	4420      	add	r0, r4
    6bb8:	d009      	beq.n	6bce <search_EIT_table+0x46>
    6bba:	42ab      	cmp	r3, r5
    6bbc:	d809      	bhi.n	6bd2 <search_EIT_table+0x4a>
    6bbe:	f7ff ffd9 	bl	6b74 <selfrel_offset31>
    6bc2:	3801      	subs	r0, #1
    6bc4:	42a8      	cmp	r0, r5
    6bc6:	d20a      	bcs.n	6bde <search_EIT_table+0x56>
    6bc8:	f101 0801 	add.w	r8, r1, #1
    6bcc:	e7e5      	b.n	6b9a <search_EIT_table+0x12>
    6bce:	42ab      	cmp	r3, r5
    6bd0:	d905      	bls.n	6bde <search_EIT_table+0x56>
    6bd2:	4588      	cmp	r8, r1
    6bd4:	d001      	beq.n	6bda <search_EIT_table+0x52>
    6bd6:	1e4e      	subs	r6, r1, #1
    6bd8:	e7df      	b.n	6b9a <search_EIT_table+0x12>
    6bda:	f04f 0900 	mov.w	r9, #0
    6bde:	4648      	mov	r0, r9
    6be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006be4 <__gnu_unwind_get_pr_addr>:
    6be4:	2801      	cmp	r0, #1
    6be6:	d007      	beq.n	6bf8 <__gnu_unwind_get_pr_addr+0x14>
    6be8:	2802      	cmp	r0, #2
    6bea:	d007      	beq.n	6bfc <__gnu_unwind_get_pr_addr+0x18>
    6bec:	4b04      	ldr	r3, [pc, #16]	; (6c00 <__gnu_unwind_get_pr_addr+0x1c>)
    6bee:	2800      	cmp	r0, #0
    6bf0:	bf0c      	ite	eq
    6bf2:	4618      	moveq	r0, r3
    6bf4:	2000      	movne	r0, #0
    6bf6:	4770      	bx	lr
    6bf8:	4802      	ldr	r0, [pc, #8]	; (6c04 <__gnu_unwind_get_pr_addr+0x20>)
    6bfa:	4770      	bx	lr
    6bfc:	4802      	ldr	r0, [pc, #8]	; (6c08 <__gnu_unwind_get_pr_addr+0x24>)
    6bfe:	4770      	bx	lr
    6c00:	000072a9 	.word	0x000072a9
    6c04:	000072ad 	.word	0x000072ad
    6c08:	000072b1 	.word	0x000072b1

00006c0c <get_eit_entry>:
    6c0c:	b530      	push	{r4, r5, lr}
    6c0e:	4b23      	ldr	r3, [pc, #140]	; (6c9c <get_eit_entry+0x90>)
    6c10:	b083      	sub	sp, #12
    6c12:	4604      	mov	r4, r0
    6c14:	1e8d      	subs	r5, r1, #2
    6c16:	b33b      	cbz	r3, 6c68 <get_eit_entry+0x5c>
    6c18:	a901      	add	r1, sp, #4
    6c1a:	4628      	mov	r0, r5
    6c1c:	f3af 8000 	nop.w
    6c20:	b1e8      	cbz	r0, 6c5e <get_eit_entry+0x52>
    6c22:	9901      	ldr	r1, [sp, #4]
    6c24:	462a      	mov	r2, r5
    6c26:	f7ff ffaf 	bl	6b88 <search_EIT_table>
    6c2a:	4601      	mov	r1, r0
    6c2c:	b1b8      	cbz	r0, 6c5e <get_eit_entry+0x52>
    6c2e:	f7ff ffa1 	bl	6b74 <selfrel_offset31>
    6c32:	684b      	ldr	r3, [r1, #4]
    6c34:	64a0      	str	r0, [r4, #72]	; 0x48
    6c36:	2b01      	cmp	r3, #1
    6c38:	d02b      	beq.n	6c92 <get_eit_entry+0x86>
    6c3a:	2b00      	cmp	r3, #0
    6c3c:	f101 0004 	add.w	r0, r1, #4
    6c40:	db23      	blt.n	6c8a <get_eit_entry+0x7e>
    6c42:	f7ff ff97 	bl	6b74 <selfrel_offset31>
    6c46:	2300      	movs	r3, #0
    6c48:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    6c4c:	6803      	ldr	r3, [r0, #0]
    6c4e:	2b00      	cmp	r3, #0
    6c50:	db10      	blt.n	6c74 <get_eit_entry+0x68>
    6c52:	f7ff ff8f 	bl	6b74 <selfrel_offset31>
    6c56:	6120      	str	r0, [r4, #16]
    6c58:	2000      	movs	r0, #0
    6c5a:	b003      	add	sp, #12
    6c5c:	bd30      	pop	{r4, r5, pc}
    6c5e:	2300      	movs	r3, #0
    6c60:	2009      	movs	r0, #9
    6c62:	6123      	str	r3, [r4, #16]
    6c64:	b003      	add	sp, #12
    6c66:	bd30      	pop	{r4, r5, pc}
    6c68:	490d      	ldr	r1, [pc, #52]	; (6ca0 <get_eit_entry+0x94>)
    6c6a:	480e      	ldr	r0, [pc, #56]	; (6ca4 <get_eit_entry+0x98>)
    6c6c:	1a09      	subs	r1, r1, r0
    6c6e:	10c9      	asrs	r1, r1, #3
    6c70:	9101      	str	r1, [sp, #4]
    6c72:	e7d7      	b.n	6c24 <get_eit_entry+0x18>
    6c74:	f3c3 6003 	ubfx	r0, r3, #24, #4
    6c78:	f7ff ffb4 	bl	6be4 <__gnu_unwind_get_pr_addr>
    6c7c:	2800      	cmp	r0, #0
    6c7e:	6120      	str	r0, [r4, #16]
    6c80:	bf14      	ite	ne
    6c82:	2000      	movne	r0, #0
    6c84:	2009      	moveq	r0, #9
    6c86:	b003      	add	sp, #12
    6c88:	bd30      	pop	{r4, r5, pc}
    6c8a:	2301      	movs	r3, #1
    6c8c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    6c90:	e7dc      	b.n	6c4c <get_eit_entry+0x40>
    6c92:	2300      	movs	r3, #0
    6c94:	6123      	str	r3, [r4, #16]
    6c96:	2005      	movs	r0, #5
    6c98:	e7df      	b.n	6c5a <get_eit_entry+0x4e>
    6c9a:	bf00      	nop
    6c9c:	00000000 	.word	0x00000000
    6ca0:	00009178 	.word	0x00009178
    6ca4:	000090c0 	.word	0x000090c0

00006ca8 <restore_non_core_regs>:
    6ca8:	6803      	ldr	r3, [r0, #0]
    6caa:	07da      	lsls	r2, r3, #31
    6cac:	b510      	push	{r4, lr}
    6cae:	4604      	mov	r4, r0
    6cb0:	d406      	bmi.n	6cc0 <restore_non_core_regs+0x18>
    6cb2:	079b      	lsls	r3, r3, #30
    6cb4:	f100 0048 	add.w	r0, r0, #72	; 0x48
    6cb8:	d509      	bpl.n	6cce <restore_non_core_regs+0x26>
    6cba:	f000 fc4b 	bl	7554 <__gnu_Unwind_Restore_VFP_D>
    6cbe:	6823      	ldr	r3, [r4, #0]
    6cc0:	0759      	lsls	r1, r3, #29
    6cc2:	d509      	bpl.n	6cd8 <restore_non_core_regs+0x30>
    6cc4:	071a      	lsls	r2, r3, #28
    6cc6:	d50e      	bpl.n	6ce6 <restore_non_core_regs+0x3e>
    6cc8:	06db      	lsls	r3, r3, #27
    6cca:	d513      	bpl.n	6cf4 <restore_non_core_regs+0x4c>
    6ccc:	bd10      	pop	{r4, pc}
    6cce:	f000 fc39 	bl	7544 <__gnu_Unwind_Restore_VFP>
    6cd2:	6823      	ldr	r3, [r4, #0]
    6cd4:	0759      	lsls	r1, r3, #29
    6cd6:	d4f5      	bmi.n	6cc4 <restore_non_core_regs+0x1c>
    6cd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    6cdc:	f000 fc42 	bl	7564 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    6ce0:	6823      	ldr	r3, [r4, #0]
    6ce2:	071a      	lsls	r2, r3, #28
    6ce4:	d4f0      	bmi.n	6cc8 <restore_non_core_regs+0x20>
    6ce6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    6cea:	f000 fc43 	bl	7574 <__gnu_Unwind_Restore_WMMXD>
    6cee:	6823      	ldr	r3, [r4, #0]
    6cf0:	06db      	lsls	r3, r3, #27
    6cf2:	d4eb      	bmi.n	6ccc <restore_non_core_regs+0x24>
    6cf4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    6cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6cfc:	f000 bc7e 	b.w	75fc <__gnu_Unwind_Restore_WMMXC>

00006d00 <_Unwind_decode_typeinfo_ptr.isra.0>:
    6d00:	4603      	mov	r3, r0
    6d02:	6800      	ldr	r0, [r0, #0]
    6d04:	b100      	cbz	r0, 6d08 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
    6d06:	4418      	add	r0, r3
    6d08:	4770      	bx	lr
    6d0a:	bf00      	nop

00006d0c <__gnu_unwind_24bit.isra.0>:
    6d0c:	2009      	movs	r0, #9
    6d0e:	4770      	bx	lr

00006d10 <_Unwind_DebugHook>:
    6d10:	4770      	bx	lr
    6d12:	bf00      	nop

00006d14 <unwind_phase2>:
    6d14:	b570      	push	{r4, r5, r6, lr}
    6d16:	4604      	mov	r4, r0
    6d18:	460e      	mov	r6, r1
    6d1a:	6c31      	ldr	r1, [r6, #64]	; 0x40
    6d1c:	4620      	mov	r0, r4
    6d1e:	f7ff ff75 	bl	6c0c <get_eit_entry>
    6d22:	4605      	mov	r5, r0
    6d24:	b988      	cbnz	r0, 6d4a <unwind_phase2+0x36>
    6d26:	6c33      	ldr	r3, [r6, #64]	; 0x40
    6d28:	6163      	str	r3, [r4, #20]
    6d2a:	4632      	mov	r2, r6
    6d2c:	6923      	ldr	r3, [r4, #16]
    6d2e:	4621      	mov	r1, r4
    6d30:	2001      	movs	r0, #1
    6d32:	4798      	blx	r3
    6d34:	2808      	cmp	r0, #8
    6d36:	d0f0      	beq.n	6d1a <unwind_phase2+0x6>
    6d38:	2807      	cmp	r0, #7
    6d3a:	d106      	bne.n	6d4a <unwind_phase2+0x36>
    6d3c:	4628      	mov	r0, r5
    6d3e:	6c31      	ldr	r1, [r6, #64]	; 0x40
    6d40:	f7ff ffe6 	bl	6d10 <_Unwind_DebugHook>
    6d44:	1d30      	adds	r0, r6, #4
    6d46:	f000 fbf1 	bl	752c <__restore_core_regs>
    6d4a:	f000 fe67 	bl	7a1c <abort>
    6d4e:	bf00      	nop

00006d50 <unwind_phase2_forced>:
    6d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d54:	1d0d      	adds	r5, r1, #4
    6d56:	4606      	mov	r6, r0
    6d58:	4614      	mov	r4, r2
    6d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6d5c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    6d60:	f10d 0c0c 	add.w	ip, sp, #12
    6d64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6d6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6d70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6d74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6d78:	ad02      	add	r5, sp, #8
    6d7a:	68f7      	ldr	r7, [r6, #12]
    6d7c:	f8d6 8018 	ldr.w	r8, [r6, #24]
    6d80:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    6d84:	2300      	movs	r3, #0
    6d86:	602b      	str	r3, [r5, #0]
    6d88:	e021      	b.n	6dce <unwind_phase2_forced+0x7e>
    6d8a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    6d8c:	6173      	str	r3, [r6, #20]
    6d8e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    6d92:	4629      	mov	r1, r5
    6d94:	a87a      	add	r0, sp, #488	; 0x1e8
    6d96:	f000 fe7b 	bl	7a90 <memcpy>
    6d9a:	6933      	ldr	r3, [r6, #16]
    6d9c:	aa7a      	add	r2, sp, #488	; 0x1e8
    6d9e:	4631      	mov	r1, r6
    6da0:	4650      	mov	r0, sl
    6da2:	4798      	blx	r3
    6da4:	9b88      	ldr	r3, [sp, #544]	; 0x220
    6da6:	e9cd 5800 	strd	r5, r8, [sp]
    6daa:	4621      	mov	r1, r4
    6dac:	646b      	str	r3, [r5, #68]	; 0x44
    6dae:	4681      	mov	r9, r0
    6db0:	4633      	mov	r3, r6
    6db2:	4632      	mov	r2, r6
    6db4:	2001      	movs	r0, #1
    6db6:	47b8      	blx	r7
    6db8:	4604      	mov	r4, r0
    6dba:	b9e8      	cbnz	r0, 6df8 <unwind_phase2_forced+0xa8>
    6dbc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    6dc0:	a97a      	add	r1, sp, #488	; 0x1e8
    6dc2:	4628      	mov	r0, r5
    6dc4:	f000 fe64 	bl	7a90 <memcpy>
    6dc8:	f1b9 0f08 	cmp.w	r9, #8
    6dcc:	d11b      	bne.n	6e06 <unwind_phase2_forced+0xb6>
    6dce:	6c29      	ldr	r1, [r5, #64]	; 0x40
    6dd0:	4630      	mov	r0, r6
    6dd2:	f7ff ff1b 	bl	6c0c <get_eit_entry>
    6dd6:	3409      	adds	r4, #9
    6dd8:	fa5f fa84 	uxtb.w	sl, r4
    6ddc:	4681      	mov	r9, r0
    6dde:	2800      	cmp	r0, #0
    6de0:	d0d3      	beq.n	6d8a <unwind_phase2_forced+0x3a>
    6de2:	6bab      	ldr	r3, [r5, #56]	; 0x38
    6de4:	f04a 0110 	orr.w	r1, sl, #16
    6de8:	e9cd 5800 	strd	r5, r8, [sp]
    6dec:	4632      	mov	r2, r6
    6dee:	646b      	str	r3, [r5, #68]	; 0x44
    6df0:	2001      	movs	r0, #1
    6df2:	4633      	mov	r3, r6
    6df4:	47b8      	blx	r7
    6df6:	b108      	cbz	r0, 6dfc <unwind_phase2_forced+0xac>
    6df8:	f04f 0909 	mov.w	r9, #9
    6dfc:	4648      	mov	r0, r9
    6dfe:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    6e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e06:	f1b9 0f07 	cmp.w	r9, #7
    6e0a:	d1f5      	bne.n	6df8 <unwind_phase2_forced+0xa8>
    6e0c:	4620      	mov	r0, r4
    6e0e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    6e10:	f7ff ff7e 	bl	6d10 <_Unwind_DebugHook>
    6e14:	a803      	add	r0, sp, #12
    6e16:	f000 fb89 	bl	752c <__restore_core_regs>
    6e1a:	bf00      	nop

00006e1c <_Unwind_GetCFA>:
    6e1c:	6c40      	ldr	r0, [r0, #68]	; 0x44
    6e1e:	4770      	bx	lr

00006e20 <__gnu_Unwind_RaiseException>:
    6e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e22:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    6e24:	640b      	str	r3, [r1, #64]	; 0x40
    6e26:	1d0e      	adds	r6, r1, #4
    6e28:	460f      	mov	r7, r1
    6e2a:	4605      	mov	r5, r0
    6e2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6e2e:	b0f9      	sub	sp, #484	; 0x1e4
    6e30:	ac01      	add	r4, sp, #4
    6e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6e34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6e38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6e3c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    6e40:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    6e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6e48:	9600      	str	r6, [sp, #0]
    6e4a:	e006      	b.n	6e5a <__gnu_Unwind_RaiseException+0x3a>
    6e4c:	692b      	ldr	r3, [r5, #16]
    6e4e:	466a      	mov	r2, sp
    6e50:	4629      	mov	r1, r5
    6e52:	4798      	blx	r3
    6e54:	2808      	cmp	r0, #8
    6e56:	4604      	mov	r4, r0
    6e58:	d108      	bne.n	6e6c <__gnu_Unwind_RaiseException+0x4c>
    6e5a:	9910      	ldr	r1, [sp, #64]	; 0x40
    6e5c:	4628      	mov	r0, r5
    6e5e:	f7ff fed5 	bl	6c0c <get_eit_entry>
    6e62:	2800      	cmp	r0, #0
    6e64:	d0f2      	beq.n	6e4c <__gnu_Unwind_RaiseException+0x2c>
    6e66:	2009      	movs	r0, #9
    6e68:	b079      	add	sp, #484	; 0x1e4
    6e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e6c:	4668      	mov	r0, sp
    6e6e:	f7ff ff1b 	bl	6ca8 <restore_non_core_regs>
    6e72:	2c06      	cmp	r4, #6
    6e74:	d1f7      	bne.n	6e66 <__gnu_Unwind_RaiseException+0x46>
    6e76:	4639      	mov	r1, r7
    6e78:	4628      	mov	r0, r5
    6e7a:	f7ff ff4b 	bl	6d14 <unwind_phase2>
    6e7e:	bf00      	nop

00006e80 <__gnu_Unwind_ForcedUnwind>:
    6e80:	b430      	push	{r4, r5}
    6e82:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    6e84:	60c1      	str	r1, [r0, #12]
    6e86:	6182      	str	r2, [r0, #24]
    6e88:	4619      	mov	r1, r3
    6e8a:	641d      	str	r5, [r3, #64]	; 0x40
    6e8c:	2200      	movs	r2, #0
    6e8e:	bc30      	pop	{r4, r5}
    6e90:	e75e      	b.n	6d50 <unwind_phase2_forced>
    6e92:	bf00      	nop

00006e94 <__gnu_Unwind_Resume>:
    6e94:	b570      	push	{r4, r5, r6, lr}
    6e96:	68c6      	ldr	r6, [r0, #12]
    6e98:	6943      	ldr	r3, [r0, #20]
    6e9a:	640b      	str	r3, [r1, #64]	; 0x40
    6e9c:	b9ae      	cbnz	r6, 6eca <__gnu_Unwind_Resume+0x36>
    6e9e:	6903      	ldr	r3, [r0, #16]
    6ea0:	460a      	mov	r2, r1
    6ea2:	4604      	mov	r4, r0
    6ea4:	460d      	mov	r5, r1
    6ea6:	4601      	mov	r1, r0
    6ea8:	2002      	movs	r0, #2
    6eaa:	4798      	blx	r3
    6eac:	2807      	cmp	r0, #7
    6eae:	d005      	beq.n	6ebc <__gnu_Unwind_Resume+0x28>
    6eb0:	2808      	cmp	r0, #8
    6eb2:	d10f      	bne.n	6ed4 <__gnu_Unwind_Resume+0x40>
    6eb4:	4629      	mov	r1, r5
    6eb6:	4620      	mov	r0, r4
    6eb8:	f7ff ff2c 	bl	6d14 <unwind_phase2>
    6ebc:	4630      	mov	r0, r6
    6ebe:	6c29      	ldr	r1, [r5, #64]	; 0x40
    6ec0:	f7ff ff26 	bl	6d10 <_Unwind_DebugHook>
    6ec4:	1d28      	adds	r0, r5, #4
    6ec6:	f000 fb31 	bl	752c <__restore_core_regs>
    6eca:	2201      	movs	r2, #1
    6ecc:	f7ff ff40 	bl	6d50 <unwind_phase2_forced>
    6ed0:	f000 fda4 	bl	7a1c <abort>
    6ed4:	f000 fda2 	bl	7a1c <abort>

00006ed8 <__gnu_Unwind_Resume_or_Rethrow>:
    6ed8:	68c2      	ldr	r2, [r0, #12]
    6eda:	b11a      	cbz	r2, 6ee4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    6edc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    6ede:	640a      	str	r2, [r1, #64]	; 0x40
    6ee0:	2200      	movs	r2, #0
    6ee2:	e735      	b.n	6d50 <unwind_phase2_forced>
    6ee4:	e79c      	b.n	6e20 <__gnu_Unwind_RaiseException>
    6ee6:	bf00      	nop

00006ee8 <_Unwind_Complete>:
    6ee8:	4770      	bx	lr
    6eea:	bf00      	nop

00006eec <_Unwind_DeleteException>:
    6eec:	6883      	ldr	r3, [r0, #8]
    6eee:	4601      	mov	r1, r0
    6ef0:	b10b      	cbz	r3, 6ef6 <_Unwind_DeleteException+0xa>
    6ef2:	2001      	movs	r0, #1
    6ef4:	4718      	bx	r3
    6ef6:	4770      	bx	lr

00006ef8 <_Unwind_VRS_Get>:
    6ef8:	2901      	cmp	r1, #1
    6efa:	d012      	beq.n	6f22 <_Unwind_VRS_Get+0x2a>
    6efc:	d809      	bhi.n	6f12 <_Unwind_VRS_Get+0x1a>
    6efe:	b973      	cbnz	r3, 6f1e <_Unwind_VRS_Get+0x26>
    6f00:	2a0f      	cmp	r2, #15
    6f02:	d80c      	bhi.n	6f1e <_Unwind_VRS_Get+0x26>
    6f04:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    6f08:	4618      	mov	r0, r3
    6f0a:	6853      	ldr	r3, [r2, #4]
    6f0c:	9a00      	ldr	r2, [sp, #0]
    6f0e:	6013      	str	r3, [r2, #0]
    6f10:	4770      	bx	lr
    6f12:	3903      	subs	r1, #3
    6f14:	2901      	cmp	r1, #1
    6f16:	bf94      	ite	ls
    6f18:	2001      	movls	r0, #1
    6f1a:	2002      	movhi	r0, #2
    6f1c:	4770      	bx	lr
    6f1e:	2002      	movs	r0, #2
    6f20:	4770      	bx	lr
    6f22:	4608      	mov	r0, r1
    6f24:	4770      	bx	lr
    6f26:	bf00      	nop

00006f28 <_Unwind_GetGR>:
    6f28:	b510      	push	{r4, lr}
    6f2a:	b084      	sub	sp, #16
    6f2c:	2300      	movs	r3, #0
    6f2e:	ac03      	add	r4, sp, #12
    6f30:	460a      	mov	r2, r1
    6f32:	9400      	str	r4, [sp, #0]
    6f34:	4619      	mov	r1, r3
    6f36:	f7ff ffdf 	bl	6ef8 <_Unwind_VRS_Get>
    6f3a:	9803      	ldr	r0, [sp, #12]
    6f3c:	b004      	add	sp, #16
    6f3e:	bd10      	pop	{r4, pc}

00006f40 <_Unwind_VRS_Set>:
    6f40:	2901      	cmp	r1, #1
    6f42:	d012      	beq.n	6f6a <_Unwind_VRS_Set+0x2a>
    6f44:	d809      	bhi.n	6f5a <_Unwind_VRS_Set+0x1a>
    6f46:	b973      	cbnz	r3, 6f66 <_Unwind_VRS_Set+0x26>
    6f48:	2a0f      	cmp	r2, #15
    6f4a:	d80c      	bhi.n	6f66 <_Unwind_VRS_Set+0x26>
    6f4c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6f50:	9a00      	ldr	r2, [sp, #0]
    6f52:	6812      	ldr	r2, [r2, #0]
    6f54:	6042      	str	r2, [r0, #4]
    6f56:	4618      	mov	r0, r3
    6f58:	4770      	bx	lr
    6f5a:	3903      	subs	r1, #3
    6f5c:	2901      	cmp	r1, #1
    6f5e:	bf94      	ite	ls
    6f60:	2001      	movls	r0, #1
    6f62:	2002      	movhi	r0, #2
    6f64:	4770      	bx	lr
    6f66:	2002      	movs	r0, #2
    6f68:	4770      	bx	lr
    6f6a:	4608      	mov	r0, r1
    6f6c:	4770      	bx	lr
    6f6e:	bf00      	nop

00006f70 <_Unwind_SetGR>:
    6f70:	b510      	push	{r4, lr}
    6f72:	b084      	sub	sp, #16
    6f74:	2300      	movs	r3, #0
    6f76:	ac03      	add	r4, sp, #12
    6f78:	9203      	str	r2, [sp, #12]
    6f7a:	9400      	str	r4, [sp, #0]
    6f7c:	460a      	mov	r2, r1
    6f7e:	4619      	mov	r1, r3
    6f80:	f7ff ffde 	bl	6f40 <_Unwind_VRS_Set>
    6f84:	b004      	add	sp, #16
    6f86:	bd10      	pop	{r4, pc}

00006f88 <__gnu_Unwind_Backtrace>:
    6f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f8a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    6f8c:	6413      	str	r3, [r2, #64]	; 0x40
    6f8e:	1d15      	adds	r5, r2, #4
    6f90:	468c      	mov	ip, r1
    6f92:	4606      	mov	r6, r0
    6f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6f96:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    6f9a:	ac17      	add	r4, sp, #92	; 0x5c
    6f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6fa6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6faa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    6fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6fb2:	4665      	mov	r5, ip
    6fb4:	9716      	str	r7, [sp, #88]	; 0x58
    6fb6:	e010      	b.n	6fda <__gnu_Unwind_Backtrace+0x52>
    6fb8:	f7ff ffda 	bl	6f70 <_Unwind_SetGR>
    6fbc:	4629      	mov	r1, r5
    6fbe:	a816      	add	r0, sp, #88	; 0x58
    6fc0:	47b0      	blx	r6
    6fc2:	4603      	mov	r3, r0
    6fc4:	aa16      	add	r2, sp, #88	; 0x58
    6fc6:	4669      	mov	r1, sp
    6fc8:	2008      	movs	r0, #8
    6fca:	b983      	cbnz	r3, 6fee <__gnu_Unwind_Backtrace+0x66>
    6fcc:	9b04      	ldr	r3, [sp, #16]
    6fce:	4798      	blx	r3
    6fd0:	2805      	cmp	r0, #5
    6fd2:	4604      	mov	r4, r0
    6fd4:	d00c      	beq.n	6ff0 <__gnu_Unwind_Backtrace+0x68>
    6fd6:	2809      	cmp	r0, #9
    6fd8:	d009      	beq.n	6fee <__gnu_Unwind_Backtrace+0x66>
    6fda:	9926      	ldr	r1, [sp, #152]	; 0x98
    6fdc:	4668      	mov	r0, sp
    6fde:	f7ff fe15 	bl	6c0c <get_eit_entry>
    6fe2:	4603      	mov	r3, r0
    6fe4:	466a      	mov	r2, sp
    6fe6:	210c      	movs	r1, #12
    6fe8:	a816      	add	r0, sp, #88	; 0x58
    6fea:	2b00      	cmp	r3, #0
    6fec:	d0e4      	beq.n	6fb8 <__gnu_Unwind_Backtrace+0x30>
    6fee:	2409      	movs	r4, #9
    6ff0:	a816      	add	r0, sp, #88	; 0x58
    6ff2:	f7ff fe59 	bl	6ca8 <restore_non_core_regs>
    6ff6:	4620      	mov	r0, r4
    6ff8:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    6ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ffe:	bf00      	nop

00007000 <__gnu_unwind_pr_common>:
    7000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7004:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
    7006:	b089      	sub	sp, #36	; 0x24
    7008:	460d      	mov	r5, r1
    700a:	f854 1b04 	ldr.w	r1, [r4], #4
    700e:	9406      	str	r4, [sp, #24]
    7010:	4617      	mov	r7, r2
    7012:	f000 0803 	and.w	r8, r0, #3
    7016:	461e      	mov	r6, r3
    7018:	2b00      	cmp	r3, #0
    701a:	d079      	beq.n	7110 <__gnu_unwind_pr_common+0x110>
    701c:	0c0b      	lsrs	r3, r1, #16
    701e:	b2da      	uxtb	r2, r3
    7020:	0409      	lsls	r1, r1, #16
    7022:	f88d 301d 	strb.w	r3, [sp, #29]
    7026:	2302      	movs	r3, #2
    7028:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    702c:	9105      	str	r1, [sp, #20]
    702e:	f88d 301c 	strb.w	r3, [sp, #28]
    7032:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    7034:	f1b8 0f02 	cmp.w	r8, #2
    7038:	bf08      	it	eq
    703a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    703c:	f013 0301 	ands.w	r3, r3, #1
    7040:	d00c      	beq.n	705c <__gnu_unwind_pr_common+0x5c>
    7042:	4638      	mov	r0, r7
    7044:	a905      	add	r1, sp, #20
    7046:	f000 fb73 	bl	7730 <__gnu_unwind_execute>
    704a:	b918      	cbnz	r0, 7054 <__gnu_unwind_pr_common+0x54>
    704c:	2008      	movs	r0, #8
    704e:	b009      	add	sp, #36	; 0x24
    7050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7054:	2009      	movs	r0, #9
    7056:	b009      	add	sp, #36	; 0x24
    7058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    705c:	f8d4 a000 	ldr.w	sl, [r4]
    7060:	f1ba 0f00 	cmp.w	sl, #0
    7064:	d0ed      	beq.n	7042 <__gnu_unwind_pr_common+0x42>
    7066:	9301      	str	r3, [sp, #4]
    7068:	f000 0308 	and.w	r3, r0, #8
    706c:	9302      	str	r3, [sp, #8]
    706e:	2e02      	cmp	r6, #2
    7070:	d04a      	beq.n	7108 <__gnu_unwind_pr_common+0x108>
    7072:	f8b4 a000 	ldrh.w	sl, [r4]
    7076:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    707a:	3404      	adds	r4, #4
    707c:	6caa      	ldr	r2, [r5, #72]	; 0x48
    707e:	f029 0b01 	bic.w	fp, r9, #1
    7082:	210f      	movs	r1, #15
    7084:	4638      	mov	r0, r7
    7086:	4493      	add	fp, r2
    7088:	f7ff ff4e 	bl	6f28 <_Unwind_GetGR>
    708c:	4583      	cmp	fp, r0
    708e:	d839      	bhi.n	7104 <__gnu_unwind_pr_common+0x104>
    7090:	f02a 0201 	bic.w	r2, sl, #1
    7094:	445a      	add	r2, fp
    7096:	4282      	cmp	r2, r0
    7098:	bf94      	ite	ls
    709a:	2000      	movls	r0, #0
    709c:	2001      	movhi	r0, #1
    709e:	ea4f 0349 	mov.w	r3, r9, lsl #1
    70a2:	f003 0302 	and.w	r3, r3, #2
    70a6:	f00a 0a01 	and.w	sl, sl, #1
    70aa:	ea43 030a 	orr.w	r3, r3, sl
    70ae:	2b01      	cmp	r3, #1
    70b0:	d049      	beq.n	7146 <__gnu_unwind_pr_common+0x146>
    70b2:	2b02      	cmp	r3, #2
    70b4:	d032      	beq.n	711c <__gnu_unwind_pr_common+0x11c>
    70b6:	2b00      	cmp	r3, #0
    70b8:	d1cc      	bne.n	7054 <__gnu_unwind_pr_common+0x54>
    70ba:	f1b8 0f00 	cmp.w	r8, #0
    70be:	d002      	beq.n	70c6 <__gnu_unwind_pr_common+0xc6>
    70c0:	2800      	cmp	r0, #0
    70c2:	f040 80cd 	bne.w	7260 <__gnu_unwind_pr_common+0x260>
    70c6:	3404      	adds	r4, #4
    70c8:	f8d4 a000 	ldr.w	sl, [r4]
    70cc:	f1ba 0f00 	cmp.w	sl, #0
    70d0:	d1cd      	bne.n	706e <__gnu_unwind_pr_common+0x6e>
    70d2:	a905      	add	r1, sp, #20
    70d4:	4638      	mov	r0, r7
    70d6:	f000 fb2b 	bl	7730 <__gnu_unwind_execute>
    70da:	2800      	cmp	r0, #0
    70dc:	d1ba      	bne.n	7054 <__gnu_unwind_pr_common+0x54>
    70de:	9b01      	ldr	r3, [sp, #4]
    70e0:	2b00      	cmp	r3, #0
    70e2:	d0b3      	beq.n	704c <__gnu_unwind_pr_common+0x4c>
    70e4:	210f      	movs	r1, #15
    70e6:	4638      	mov	r0, r7
    70e8:	f7ff ff1e 	bl	6f28 <_Unwind_GetGR>
    70ec:	210e      	movs	r1, #14
    70ee:	4602      	mov	r2, r0
    70f0:	4638      	mov	r0, r7
    70f2:	f7ff ff3d 	bl	6f70 <_Unwind_SetGR>
    70f6:	4638      	mov	r0, r7
    70f8:	4a6a      	ldr	r2, [pc, #424]	; (72a4 <__gnu_unwind_pr_common+0x2a4>)
    70fa:	210f      	movs	r1, #15
    70fc:	f7ff ff38 	bl	6f70 <_Unwind_SetGR>
    7100:	2007      	movs	r0, #7
    7102:	e7a8      	b.n	7056 <__gnu_unwind_pr_common+0x56>
    7104:	2000      	movs	r0, #0
    7106:	e7ca      	b.n	709e <__gnu_unwind_pr_common+0x9e>
    7108:	f8d4 9004 	ldr.w	r9, [r4, #4]
    710c:	3408      	adds	r4, #8
    710e:	e7b5      	b.n	707c <__gnu_unwind_pr_common+0x7c>
    7110:	0209      	lsls	r1, r1, #8
    7112:	2303      	movs	r3, #3
    7114:	9105      	str	r1, [sp, #20]
    7116:	f8ad 301c 	strh.w	r3, [sp, #28]
    711a:	e78a      	b.n	7032 <__gnu_unwind_pr_common+0x32>
    711c:	6823      	ldr	r3, [r4, #0]
    711e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
    7122:	f1b8 0f00 	cmp.w	r8, #0
    7126:	d145      	bne.n	71b4 <__gnu_unwind_pr_common+0x1b4>
    7128:	b128      	cbz	r0, 7136 <__gnu_unwind_pr_common+0x136>
    712a:	9a02      	ldr	r2, [sp, #8]
    712c:	2a00      	cmp	r2, #0
    712e:	d05c      	beq.n	71ea <__gnu_unwind_pr_common+0x1ea>
    7130:	f1bb 0f00 	cmp.w	fp, #0
    7134:	d074      	beq.n	7220 <__gnu_unwind_pr_common+0x220>
    7136:	2b00      	cmp	r3, #0
    7138:	da00      	bge.n	713c <__gnu_unwind_pr_common+0x13c>
    713a:	3404      	adds	r4, #4
    713c:	f10b 0b01 	add.w	fp, fp, #1
    7140:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    7144:	e7c0      	b.n	70c8 <__gnu_unwind_pr_common+0xc8>
    7146:	f1b8 0f00 	cmp.w	r8, #0
    714a:	d119      	bne.n	7180 <__gnu_unwind_pr_common+0x180>
    714c:	b1b0      	cbz	r0, 717c <__gnu_unwind_pr_common+0x17c>
    714e:	e9d4 2300 	ldrd	r2, r3, [r4]
    7152:	1c99      	adds	r1, r3, #2
    7154:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    7158:	f43f af7c 	beq.w	7054 <__gnu_unwind_pr_common+0x54>
    715c:	f105 0158 	add.w	r1, r5, #88	; 0x58
    7160:	3301      	adds	r3, #1
    7162:	9104      	str	r1, [sp, #16]
    7164:	f000 8090 	beq.w	7288 <__gnu_unwind_pr_common+0x288>
    7168:	1d20      	adds	r0, r4, #4
    716a:	f7ff fdc9 	bl	6d00 <_Unwind_decode_typeinfo_ptr.isra.0>
    716e:	ab04      	add	r3, sp, #16
    7170:	4601      	mov	r1, r0
    7172:	4628      	mov	r0, r5
    7174:	f3af 8000 	nop.w
    7178:	2800      	cmp	r0, #0
    717a:	d15b      	bne.n	7234 <__gnu_unwind_pr_common+0x234>
    717c:	3408      	adds	r4, #8
    717e:	e7a3      	b.n	70c8 <__gnu_unwind_pr_common+0xc8>
    7180:	210d      	movs	r1, #13
    7182:	4638      	mov	r0, r7
    7184:	f8d5 9020 	ldr.w	r9, [r5, #32]
    7188:	f7ff fece 	bl	6f28 <_Unwind_GetGR>
    718c:	4581      	cmp	r9, r0
    718e:	d1f5      	bne.n	717c <__gnu_unwind_pr_common+0x17c>
    7190:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7192:	429c      	cmp	r4, r3
    7194:	d1f2      	bne.n	717c <__gnu_unwind_pr_common+0x17c>
    7196:	4620      	mov	r0, r4
    7198:	f7ff fcec 	bl	6b74 <selfrel_offset31>
    719c:	210f      	movs	r1, #15
    719e:	4602      	mov	r2, r0
    71a0:	4638      	mov	r0, r7
    71a2:	f7ff fee5 	bl	6f70 <_Unwind_SetGR>
    71a6:	4638      	mov	r0, r7
    71a8:	462a      	mov	r2, r5
    71aa:	2100      	movs	r1, #0
    71ac:	f7ff fee0 	bl	6f70 <_Unwind_SetGR>
    71b0:	2007      	movs	r0, #7
    71b2:	e750      	b.n	7056 <__gnu_unwind_pr_common+0x56>
    71b4:	210d      	movs	r1, #13
    71b6:	4638      	mov	r0, r7
    71b8:	f8d5 9020 	ldr.w	r9, [r5, #32]
    71bc:	f7ff feb4 	bl	6f28 <_Unwind_GetGR>
    71c0:	4581      	cmp	r9, r0
    71c2:	d001      	beq.n	71c8 <__gnu_unwind_pr_common+0x1c8>
    71c4:	6823      	ldr	r3, [r4, #0]
    71c6:	e7b6      	b.n	7136 <__gnu_unwind_pr_common+0x136>
    71c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    71ca:	429c      	cmp	r4, r3
    71cc:	d1fa      	bne.n	71c4 <__gnu_unwind_pr_common+0x1c4>
    71ce:	2204      	movs	r2, #4
    71d0:	2100      	movs	r1, #0
    71d2:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
    71d6:	18a3      	adds	r3, r4, r2
    71d8:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
    71dc:	636b      	str	r3, [r5, #52]	; 0x34
    71de:	6823      	ldr	r3, [r4, #0]
    71e0:	428b      	cmp	r3, r1
    71e2:	db59      	blt.n	7298 <__gnu_unwind_pr_common+0x298>
    71e4:	2301      	movs	r3, #1
    71e6:	9301      	str	r3, [sp, #4]
    71e8:	e7a8      	b.n	713c <__gnu_unwind_pr_common+0x13c>
    71ea:	f105 0358 	add.w	r3, r5, #88	; 0x58
    71ee:	f8cd 800c 	str.w	r8, [sp, #12]
    71f2:	f104 0a04 	add.w	sl, r4, #4
    71f6:	46b0      	mov	r8, r6
    71f8:	4691      	mov	r9, r2
    71fa:	461e      	mov	r6, r3
    71fc:	e00d      	b.n	721a <__gnu_unwind_pr_common+0x21a>
    71fe:	9604      	str	r6, [sp, #16]
    7200:	f7ff fd7e 	bl	6d00 <_Unwind_decode_typeinfo_ptr.isra.0>
    7204:	ab04      	add	r3, sp, #16
    7206:	4601      	mov	r1, r0
    7208:	2200      	movs	r2, #0
    720a:	4628      	mov	r0, r5
    720c:	f3af 8000 	nop.w
    7210:	f109 0901 	add.w	r9, r9, #1
    7214:	f10a 0a04 	add.w	sl, sl, #4
    7218:	b9e8      	cbnz	r0, 7256 <__gnu_unwind_pr_common+0x256>
    721a:	45d9      	cmp	r9, fp
    721c:	4650      	mov	r0, sl
    721e:	d1ee      	bne.n	71fe <__gnu_unwind_pr_common+0x1fe>
    7220:	4638      	mov	r0, r7
    7222:	210d      	movs	r1, #13
    7224:	f7ff fe80 	bl	6f28 <_Unwind_GetGR>
    7228:	9b04      	ldr	r3, [sp, #16]
    722a:	6228      	str	r0, [r5, #32]
    722c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    7230:	2006      	movs	r0, #6
    7232:	e710      	b.n	7056 <__gnu_unwind_pr_common+0x56>
    7234:	4681      	mov	r9, r0
    7236:	210d      	movs	r1, #13
    7238:	4638      	mov	r0, r7
    723a:	f7ff fe75 	bl	6f28 <_Unwind_GetGR>
    723e:	f1b9 0f02 	cmp.w	r9, #2
    7242:	6228      	str	r0, [r5, #32]
    7244:	d125      	bne.n	7292 <__gnu_unwind_pr_common+0x292>
    7246:	462b      	mov	r3, r5
    7248:	9a04      	ldr	r2, [sp, #16]
    724a:	f843 2f2c 	str.w	r2, [r3, #44]!
    724e:	626b      	str	r3, [r5, #36]	; 0x24
    7250:	62ac      	str	r4, [r5, #40]	; 0x28
    7252:	2006      	movs	r0, #6
    7254:	e6ff      	b.n	7056 <__gnu_unwind_pr_common+0x56>
    7256:	4646      	mov	r6, r8
    7258:	6823      	ldr	r3, [r4, #0]
    725a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    725e:	e76a      	b.n	7136 <__gnu_unwind_pr_common+0x136>
    7260:	4620      	mov	r0, r4
    7262:	f7ff fc87 	bl	6b74 <selfrel_offset31>
    7266:	3404      	adds	r4, #4
    7268:	4602      	mov	r2, r0
    726a:	63ac      	str	r4, [r5, #56]	; 0x38
    726c:	4628      	mov	r0, r5
    726e:	4614      	mov	r4, r2
    7270:	f3af 8000 	nop.w
    7274:	2800      	cmp	r0, #0
    7276:	f43f aeed 	beq.w	7054 <__gnu_unwind_pr_common+0x54>
    727a:	4638      	mov	r0, r7
    727c:	4622      	mov	r2, r4
    727e:	210f      	movs	r1, #15
    7280:	f7ff fe76 	bl	6f70 <_Unwind_SetGR>
    7284:	2007      	movs	r0, #7
    7286:	e6e6      	b.n	7056 <__gnu_unwind_pr_common+0x56>
    7288:	4638      	mov	r0, r7
    728a:	210d      	movs	r1, #13
    728c:	f7ff fe4c 	bl	6f28 <_Unwind_GetGR>
    7290:	6228      	str	r0, [r5, #32]
    7292:	9b04      	ldr	r3, [sp, #16]
    7294:	626b      	str	r3, [r5, #36]	; 0x24
    7296:	e7db      	b.n	7250 <__gnu_unwind_pr_common+0x250>
    7298:	f10b 0001 	add.w	r0, fp, #1
    729c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    72a0:	e77a      	b.n	7198 <__gnu_unwind_pr_common+0x198>
    72a2:	bf00      	nop
    72a4:	00000000 	.word	0x00000000

000072a8 <__aeabi_unwind_cpp_pr0>:
    72a8:	2300      	movs	r3, #0
    72aa:	e6a9      	b.n	7000 <__gnu_unwind_pr_common>

000072ac <__aeabi_unwind_cpp_pr1>:
    72ac:	2301      	movs	r3, #1
    72ae:	e6a7      	b.n	7000 <__gnu_unwind_pr_common>

000072b0 <__aeabi_unwind_cpp_pr2>:
    72b0:	2302      	movs	r3, #2
    72b2:	e6a5      	b.n	7000 <__gnu_unwind_pr_common>

000072b4 <_Unwind_VRS_Pop>:
    72b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    72b8:	4606      	mov	r6, r0
    72ba:	b0c3      	sub	sp, #268	; 0x10c
    72bc:	4615      	mov	r5, r2
    72be:	461c      	mov	r4, r3
    72c0:	2904      	cmp	r1, #4
    72c2:	f200 80b9 	bhi.w	7438 <_Unwind_VRS_Pop+0x184>
    72c6:	e8df f001 	tbb	[pc, r1]
    72ca:	539a      	.short	0x539a
    72cc:	29b7      	.short	0x29b7
    72ce:	03          	.byte	0x03
    72cf:	00          	.byte	0x00
    72d0:	2c00      	cmp	r4, #0
    72d2:	f040 80b1 	bne.w	7438 <_Unwind_VRS_Pop+0x184>
    72d6:	2a10      	cmp	r2, #16
    72d8:	f200 80ae 	bhi.w	7438 <_Unwind_VRS_Pop+0x184>
    72dc:	6803      	ldr	r3, [r0, #0]
    72de:	06d8      	lsls	r0, r3, #27
    72e0:	f100 80f3 	bmi.w	74ca <_Unwind_VRS_Pop+0x216>
    72e4:	af20      	add	r7, sp, #128	; 0x80
    72e6:	4638      	mov	r0, r7
    72e8:	f000 f992 	bl	7610 <__gnu_Unwind_Save_WMMXC>
    72ec:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    72ee:	2300      	movs	r3, #0
    72f0:	2401      	movs	r4, #1
    72f2:	fa04 f203 	lsl.w	r2, r4, r3
    72f6:	422a      	tst	r2, r5
    72f8:	4601      	mov	r1, r0
    72fa:	d004      	beq.n	7306 <_Unwind_VRS_Pop+0x52>
    72fc:	f851 2b04 	ldr.w	r2, [r1], #4
    7300:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    7304:	4608      	mov	r0, r1
    7306:	3301      	adds	r3, #1
    7308:	2b04      	cmp	r3, #4
    730a:	d1f2      	bne.n	72f2 <_Unwind_VRS_Pop+0x3e>
    730c:	63b0      	str	r0, [r6, #56]	; 0x38
    730e:	4638      	mov	r0, r7
    7310:	f000 f974 	bl	75fc <__gnu_Unwind_Restore_WMMXC>
    7314:	2000      	movs	r0, #0
    7316:	b043      	add	sp, #268	; 0x10c
    7318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    731c:	2c03      	cmp	r4, #3
    731e:	f040 808b 	bne.w	7438 <_Unwind_VRS_Pop+0x184>
    7322:	b294      	uxth	r4, r2
    7324:	eb04 4312 	add.w	r3, r4, r2, lsr #16
    7328:	2b10      	cmp	r3, #16
    732a:	ea4f 4512 	mov.w	r5, r2, lsr #16
    732e:	f200 8083 	bhi.w	7438 <_Unwind_VRS_Pop+0x184>
    7332:	6803      	ldr	r3, [r0, #0]
    7334:	071f      	lsls	r7, r3, #28
    7336:	f100 80d0 	bmi.w	74da <_Unwind_VRS_Pop+0x226>
    733a:	af20      	add	r7, sp, #128	; 0x80
    733c:	4638      	mov	r0, r7
    733e:	f000 f93b 	bl	75b8 <__gnu_Unwind_Save_WMMXD>
    7342:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
    7346:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    7348:	b154      	cbz	r4, 7360 <_Unwind_VRS_Pop+0xac>
    734a:	460b      	mov	r3, r1
    734c:	1ae8      	subs	r0, r5, r3
    734e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    7352:	00e4      	lsls	r4, r4, #3
    7354:	581a      	ldr	r2, [r3, r0]
    7356:	f843 2b04 	str.w	r2, [r3], #4
    735a:	428b      	cmp	r3, r1
    735c:	d1fa      	bne.n	7354 <_Unwind_VRS_Pop+0xa0>
    735e:	4425      	add	r5, r4
    7360:	4638      	mov	r0, r7
    7362:	63b5      	str	r5, [r6, #56]	; 0x38
    7364:	f000 f906 	bl	7574 <__gnu_Unwind_Restore_WMMXD>
    7368:	2000      	movs	r0, #0
    736a:	b043      	add	sp, #268	; 0x10c
    736c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7370:	2c01      	cmp	r4, #1
    7372:	ea4f 4812 	mov.w	r8, r2, lsr #16
    7376:	b295      	uxth	r5, r2
    7378:	d05a      	beq.n	7430 <_Unwind_VRS_Pop+0x17c>
    737a:	2c05      	cmp	r4, #5
    737c:	d15c      	bne.n	7438 <_Unwind_VRS_Pop+0x184>
    737e:	eb08 0905 	add.w	r9, r8, r5
    7382:	f1b9 0f20 	cmp.w	r9, #32
    7386:	d857      	bhi.n	7438 <_Unwind_VRS_Pop+0x184>
    7388:	f1b8 0f0f 	cmp.w	r8, #15
    738c:	d977      	bls.n	747e <_Unwind_VRS_Pop+0x1ca>
    738e:	46a9      	mov	r9, r5
    7390:	2d00      	cmp	r5, #0
    7392:	f040 8088 	bne.w	74a6 <_Unwind_VRS_Pop+0x1f2>
    7396:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7398:	b36d      	cbz	r5, 73f6 <_Unwind_VRS_Pop+0x142>
    739a:	af20      	add	r7, sp, #128	; 0x80
    739c:	f04f 0900 	mov.w	r9, #0
    73a0:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    73a4:	3f04      	subs	r7, #4
    73a6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    73aa:	f853 1b04 	ldr.w	r1, [r3], #4
    73ae:	f847 1f04 	str.w	r1, [r7, #4]!
    73b2:	42ab      	cmp	r3, r5
    73b4:	d1f9      	bne.n	73aa <_Unwind_VRS_Pop+0xf6>
    73b6:	f1b9 0f00 	cmp.w	r9, #0
    73ba:	d00f      	beq.n	73dc <_Unwind_VRS_Pop+0x128>
    73bc:	466f      	mov	r7, sp
    73be:	4641      	mov	r1, r8
    73c0:	2910      	cmp	r1, #16
    73c2:	bf38      	it	cc
    73c4:	2110      	movcc	r1, #16
    73c6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    73ca:	3984      	subs	r1, #132	; 0x84
    73cc:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
    73d0:	f853 0b04 	ldr.w	r0, [r3], #4
    73d4:	f841 0f04 	str.w	r0, [r1, #4]!
    73d8:	42ab      	cmp	r3, r5
    73da:	d1f9      	bne.n	73d0 <_Unwind_VRS_Pop+0x11c>
    73dc:	2c01      	cmp	r4, #1
    73de:	f000 8084 	beq.w	74ea <_Unwind_VRS_Pop+0x236>
    73e2:	f1b8 0f0f 	cmp.w	r8, #15
    73e6:	63b5      	str	r5, [r6, #56]	; 0x38
    73e8:	d945      	bls.n	7476 <_Unwind_VRS_Pop+0x1c2>
    73ea:	f1b9 0f00 	cmp.w	r9, #0
    73ee:	d002      	beq.n	73f6 <_Unwind_VRS_Pop+0x142>
    73f0:	4668      	mov	r0, sp
    73f2:	f000 f8b7 	bl	7564 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    73f6:	2000      	movs	r0, #0
    73f8:	b043      	add	sp, #268	; 0x10c
    73fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    73fe:	b9dc      	cbnz	r4, 7438 <_Unwind_VRS_Pop+0x184>
    7400:	6b87      	ldr	r7, [r0, #56]	; 0x38
    7402:	4623      	mov	r3, r4
    7404:	2001      	movs	r0, #1
    7406:	b294      	uxth	r4, r2
    7408:	f106 0c04 	add.w	ip, r6, #4
    740c:	fa00 f203 	lsl.w	r2, r0, r3
    7410:	4222      	tst	r2, r4
    7412:	4639      	mov	r1, r7
    7414:	d004      	beq.n	7420 <_Unwind_VRS_Pop+0x16c>
    7416:	f851 2b04 	ldr.w	r2, [r1], #4
    741a:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
    741e:	460f      	mov	r7, r1
    7420:	3301      	adds	r3, #1
    7422:	2b10      	cmp	r3, #16
    7424:	d1f2      	bne.n	740c <_Unwind_VRS_Pop+0x158>
    7426:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
    742a:	d1e4      	bne.n	73f6 <_Unwind_VRS_Pop+0x142>
    742c:	63b7      	str	r7, [r6, #56]	; 0x38
    742e:	e004      	b.n	743a <_Unwind_VRS_Pop+0x186>
    7430:	eb08 0305 	add.w	r3, r8, r5
    7434:	2b10      	cmp	r3, #16
    7436:	d903      	bls.n	7440 <_Unwind_VRS_Pop+0x18c>
    7438:	2002      	movs	r0, #2
    743a:	b043      	add	sp, #268	; 0x10c
    743c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7440:	f1b8 0f0f 	cmp.w	r8, #15
    7444:	d8f8      	bhi.n	7438 <_Unwind_VRS_Pop+0x184>
    7446:	6833      	ldr	r3, [r6, #0]
    7448:	07da      	lsls	r2, r3, #31
    744a:	d506      	bpl.n	745a <_Unwind_VRS_Pop+0x1a6>
    744c:	4630      	mov	r0, r6
    744e:	f023 0303 	bic.w	r3, r3, #3
    7452:	f840 3b48 	str.w	r3, [r0], #72
    7456:	f000 f879 	bl	754c <__gnu_Unwind_Save_VFP>
    745a:	af20      	add	r7, sp, #128	; 0x80
    745c:	4638      	mov	r0, r7
    745e:	f000 f875 	bl	754c <__gnu_Unwind_Save_VFP>
    7462:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7464:	2d00      	cmp	r5, #0
    7466:	d199      	bne.n	739c <_Unwind_VRS_Pop+0xe8>
    7468:	461d      	mov	r5, r3
    746a:	3504      	adds	r5, #4
    746c:	63b5      	str	r5, [r6, #56]	; 0x38
    746e:	4638      	mov	r0, r7
    7470:	f000 f868 	bl	7544 <__gnu_Unwind_Restore_VFP>
    7474:	e7bf      	b.n	73f6 <_Unwind_VRS_Pop+0x142>
    7476:	a820      	add	r0, sp, #128	; 0x80
    7478:	f000 f86c 	bl	7554 <__gnu_Unwind_Restore_VFP_D>
    747c:	e7b5      	b.n	73ea <_Unwind_VRS_Pop+0x136>
    747e:	f1b9 0f10 	cmp.w	r9, #16
    7482:	d940      	bls.n	7506 <_Unwind_VRS_Pop+0x252>
    7484:	f1a9 0910 	sub.w	r9, r9, #16
    7488:	6833      	ldr	r3, [r6, #0]
    748a:	07d9      	lsls	r1, r3, #31
    748c:	d508      	bpl.n	74a0 <_Unwind_VRS_Pop+0x1ec>
    748e:	f023 0301 	bic.w	r3, r3, #1
    7492:	4630      	mov	r0, r6
    7494:	f043 0302 	orr.w	r3, r3, #2
    7498:	f840 3b48 	str.w	r3, [r0], #72
    749c:	f000 f85e 	bl	755c <__gnu_Unwind_Save_VFP_D>
    74a0:	f1b9 0f00 	cmp.w	r9, #0
    74a4:	d032      	beq.n	750c <_Unwind_VRS_Pop+0x258>
    74a6:	6833      	ldr	r3, [r6, #0]
    74a8:	075a      	lsls	r2, r3, #29
    74aa:	d420      	bmi.n	74ee <_Unwind_VRS_Pop+0x23a>
    74ac:	f1b8 0f0f 	cmp.w	r8, #15
    74b0:	d925      	bls.n	74fe <_Unwind_VRS_Pop+0x24a>
    74b2:	466f      	mov	r7, sp
    74b4:	4638      	mov	r0, r7
    74b6:	f1c8 0510 	rsb	r5, r8, #16
    74ba:	f000 f857 	bl	756c <__gnu_Unwind_Save_VFP_D_16_to_31>
    74be:	2d00      	cmp	r5, #0
    74c0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    74c2:	f77f af7c 	ble.w	73be <_Unwind_VRS_Pop+0x10a>
    74c6:	af20      	add	r7, sp, #128	; 0x80
    74c8:	e76a      	b.n	73a0 <_Unwind_VRS_Pop+0xec>
    74ca:	f023 0310 	bic.w	r3, r3, #16
    74ce:	6033      	str	r3, [r6, #0]
    74d0:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
    74d4:	f000 f89c 	bl	7610 <__gnu_Unwind_Save_WMMXC>
    74d8:	e704      	b.n	72e4 <_Unwind_VRS_Pop+0x30>
    74da:	f023 0308 	bic.w	r3, r3, #8
    74de:	6003      	str	r3, [r0, #0]
    74e0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    74e4:	f000 f868 	bl	75b8 <__gnu_Unwind_Save_WMMXD>
    74e8:	e727      	b.n	733a <_Unwind_VRS_Pop+0x86>
    74ea:	af20      	add	r7, sp, #128	; 0x80
    74ec:	e7bd      	b.n	746a <_Unwind_VRS_Pop+0x1b6>
    74ee:	4630      	mov	r0, r6
    74f0:	f023 0304 	bic.w	r3, r3, #4
    74f4:	f840 3bd0 	str.w	r3, [r0], #208
    74f8:	f000 f838 	bl	756c <__gnu_Unwind_Save_VFP_D_16_to_31>
    74fc:	e7d6      	b.n	74ac <_Unwind_VRS_Pop+0x1f8>
    74fe:	a820      	add	r0, sp, #128	; 0x80
    7500:	f000 f82c 	bl	755c <__gnu_Unwind_Save_VFP_D>
    7504:	e7d5      	b.n	74b2 <_Unwind_VRS_Pop+0x1fe>
    7506:	f04f 0900 	mov.w	r9, #0
    750a:	e7bd      	b.n	7488 <_Unwind_VRS_Pop+0x1d4>
    750c:	f1b8 0f0f 	cmp.w	r8, #15
    7510:	f63f af41 	bhi.w	7396 <_Unwind_VRS_Pop+0xe2>
    7514:	af20      	add	r7, sp, #128	; 0x80
    7516:	4638      	mov	r0, r7
    7518:	f000 f820 	bl	755c <__gnu_Unwind_Save_VFP_D>
    751c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    751e:	2d00      	cmp	r5, #0
    7520:	f47f af3c 	bne.w	739c <_Unwind_VRS_Pop+0xe8>
    7524:	4638      	mov	r0, r7
    7526:	f000 f815 	bl	7554 <__gnu_Unwind_Restore_VFP_D>
    752a:	e764      	b.n	73f6 <_Unwind_VRS_Pop+0x142>

0000752c <__restore_core_regs>:
    752c:	f100 0134 	add.w	r1, r0, #52	; 0x34
    7530:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    7534:	469c      	mov	ip, r3
    7536:	46a6      	mov	lr, r4
    7538:	f84c 5d04 	str.w	r5, [ip, #-4]!
    753c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    7540:	46e5      	mov	sp, ip
    7542:	bd00      	pop	{pc}

00007544 <__gnu_Unwind_Restore_VFP>:
    7544:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    7548:	4770      	bx	lr
    754a:	bf00      	nop

0000754c <__gnu_Unwind_Save_VFP>:
    754c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    7550:	4770      	bx	lr
    7552:	bf00      	nop

00007554 <__gnu_Unwind_Restore_VFP_D>:
    7554:	ec90 0b20 	vldmia	r0, {d0-d15}
    7558:	4770      	bx	lr
    755a:	bf00      	nop

0000755c <__gnu_Unwind_Save_VFP_D>:
    755c:	ec80 0b20 	vstmia	r0, {d0-d15}
    7560:	4770      	bx	lr
    7562:	bf00      	nop

00007564 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    7564:	ecd0 0b20 	vldmia	r0, {d16-d31}
    7568:	4770      	bx	lr
    756a:	bf00      	nop

0000756c <__gnu_Unwind_Save_VFP_D_16_to_31>:
    756c:	ecc0 0b20 	vstmia	r0, {d16-d31}
    7570:	4770      	bx	lr
    7572:	bf00      	nop

00007574 <__gnu_Unwind_Restore_WMMXD>:
    7574:	ecf0 0102 	ldfe	f0, [r0], #8
    7578:	ecf0 1102 	ldfe	f1, [r0], #8
    757c:	ecf0 2102 	ldfe	f2, [r0], #8
    7580:	ecf0 3102 	ldfe	f3, [r0], #8
    7584:	ecf0 4102 	ldfe	f4, [r0], #8
    7588:	ecf0 5102 	ldfe	f5, [r0], #8
    758c:	ecf0 6102 	ldfe	f6, [r0], #8
    7590:	ecf0 7102 	ldfe	f7, [r0], #8
    7594:	ecf0 8102 	ldfp	f0, [r0], #8
    7598:	ecf0 9102 	ldfp	f1, [r0], #8
    759c:	ecf0 a102 	ldfp	f2, [r0], #8
    75a0:	ecf0 b102 	ldfp	f3, [r0], #8
    75a4:	ecf0 c102 	ldfp	f4, [r0], #8
    75a8:	ecf0 d102 	ldfp	f5, [r0], #8
    75ac:	ecf0 e102 	ldfp	f6, [r0], #8
    75b0:	ecf0 f102 	ldfp	f7, [r0], #8
    75b4:	4770      	bx	lr
    75b6:	bf00      	nop

000075b8 <__gnu_Unwind_Save_WMMXD>:
    75b8:	ece0 0102 	stfe	f0, [r0], #8
    75bc:	ece0 1102 	stfe	f1, [r0], #8
    75c0:	ece0 2102 	stfe	f2, [r0], #8
    75c4:	ece0 3102 	stfe	f3, [r0], #8
    75c8:	ece0 4102 	stfe	f4, [r0], #8
    75cc:	ece0 5102 	stfe	f5, [r0], #8
    75d0:	ece0 6102 	stfe	f6, [r0], #8
    75d4:	ece0 7102 	stfe	f7, [r0], #8
    75d8:	ece0 8102 	stfp	f0, [r0], #8
    75dc:	ece0 9102 	stfp	f1, [r0], #8
    75e0:	ece0 a102 	stfp	f2, [r0], #8
    75e4:	ece0 b102 	stfp	f3, [r0], #8
    75e8:	ece0 c102 	stfp	f4, [r0], #8
    75ec:	ece0 d102 	stfp	f5, [r0], #8
    75f0:	ece0 e102 	stfp	f6, [r0], #8
    75f4:	ece0 f102 	stfp	f7, [r0], #8
    75f8:	4770      	bx	lr
    75fa:	bf00      	nop

000075fc <__gnu_Unwind_Restore_WMMXC>:
    75fc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    7600:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    7604:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    7608:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    760c:	4770      	bx	lr
    760e:	bf00      	nop

00007610 <__gnu_Unwind_Save_WMMXC>:
    7610:	fca0 8101 	stc2	1, cr8, [r0], #4
    7614:	fca0 9101 	stc2	1, cr9, [r0], #4
    7618:	fca0 a101 	stc2	1, cr10, [r0], #4
    761c:	fca0 b101 	stc2	1, cr11, [r0], #4
    7620:	4770      	bx	lr
    7622:	bf00      	nop

00007624 <_Unwind_RaiseException>:
    7624:	46ec      	mov	ip, sp
    7626:	b500      	push	{lr}
    7628:	e92d 5000 	stmdb	sp!, {ip, lr}
    762c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7630:	f04f 0300 	mov.w	r3, #0
    7634:	e92d 000c 	stmdb	sp!, {r2, r3}
    7638:	a901      	add	r1, sp, #4
    763a:	f7ff fbf1 	bl	6e20 <__gnu_Unwind_RaiseException>
    763e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7642:	b012      	add	sp, #72	; 0x48
    7644:	4770      	bx	lr
    7646:	bf00      	nop

00007648 <_Unwind_Resume>:
    7648:	46ec      	mov	ip, sp
    764a:	b500      	push	{lr}
    764c:	e92d 5000 	stmdb	sp!, {ip, lr}
    7650:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7654:	f04f 0300 	mov.w	r3, #0
    7658:	e92d 000c 	stmdb	sp!, {r2, r3}
    765c:	a901      	add	r1, sp, #4
    765e:	f7ff fc19 	bl	6e94 <__gnu_Unwind_Resume>
    7662:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7666:	b012      	add	sp, #72	; 0x48
    7668:	4770      	bx	lr
    766a:	bf00      	nop

0000766c <_Unwind_Resume_or_Rethrow>:
    766c:	46ec      	mov	ip, sp
    766e:	b500      	push	{lr}
    7670:	e92d 5000 	stmdb	sp!, {ip, lr}
    7674:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7678:	f04f 0300 	mov.w	r3, #0
    767c:	e92d 000c 	stmdb	sp!, {r2, r3}
    7680:	a901      	add	r1, sp, #4
    7682:	f7ff fc29 	bl	6ed8 <__gnu_Unwind_Resume_or_Rethrow>
    7686:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    768a:	b012      	add	sp, #72	; 0x48
    768c:	4770      	bx	lr
    768e:	bf00      	nop

00007690 <_Unwind_ForcedUnwind>:
    7690:	46ec      	mov	ip, sp
    7692:	b500      	push	{lr}
    7694:	e92d 5000 	stmdb	sp!, {ip, lr}
    7698:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    769c:	f04f 0300 	mov.w	r3, #0
    76a0:	e92d 000c 	stmdb	sp!, {r2, r3}
    76a4:	ab01      	add	r3, sp, #4
    76a6:	f7ff fbeb 	bl	6e80 <__gnu_Unwind_ForcedUnwind>
    76aa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    76ae:	b012      	add	sp, #72	; 0x48
    76b0:	4770      	bx	lr
    76b2:	bf00      	nop

000076b4 <_Unwind_Backtrace>:
    76b4:	46ec      	mov	ip, sp
    76b6:	b500      	push	{lr}
    76b8:	e92d 5000 	stmdb	sp!, {ip, lr}
    76bc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    76c0:	f04f 0300 	mov.w	r3, #0
    76c4:	e92d 000c 	stmdb	sp!, {r2, r3}
    76c8:	aa01      	add	r2, sp, #4
    76ca:	f7ff fc5d 	bl	6f88 <__gnu_Unwind_Backtrace>
    76ce:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    76d2:	b012      	add	sp, #72	; 0x48
    76d4:	4770      	bx	lr
    76d6:	bf00      	nop

000076d8 <next_unwind_byte>:
    76d8:	7a02      	ldrb	r2, [r0, #8]
    76da:	b97a      	cbnz	r2, 76fc <next_unwind_byte+0x24>
    76dc:	7a43      	ldrb	r3, [r0, #9]
    76de:	b1a3      	cbz	r3, 770a <next_unwind_byte+0x32>
    76e0:	6842      	ldr	r2, [r0, #4]
    76e2:	3b01      	subs	r3, #1
    76e4:	b410      	push	{r4}
    76e6:	7243      	strb	r3, [r0, #9]
    76e8:	6813      	ldr	r3, [r2, #0]
    76ea:	2103      	movs	r1, #3
    76ec:	1d14      	adds	r4, r2, #4
    76ee:	7201      	strb	r1, [r0, #8]
    76f0:	021a      	lsls	r2, r3, #8
    76f2:	6044      	str	r4, [r0, #4]
    76f4:	6002      	str	r2, [r0, #0]
    76f6:	bc10      	pop	{r4}
    76f8:	0e18      	lsrs	r0, r3, #24
    76fa:	4770      	bx	lr
    76fc:	6803      	ldr	r3, [r0, #0]
    76fe:	3a01      	subs	r2, #1
    7700:	7202      	strb	r2, [r0, #8]
    7702:	021a      	lsls	r2, r3, #8
    7704:	6002      	str	r2, [r0, #0]
    7706:	0e18      	lsrs	r0, r3, #24
    7708:	4770      	bx	lr
    770a:	20b0      	movs	r0, #176	; 0xb0
    770c:	4770      	bx	lr
    770e:	bf00      	nop

00007710 <_Unwind_GetGR.constprop.0>:
    7710:	b500      	push	{lr}
    7712:	b085      	sub	sp, #20
    7714:	aa03      	add	r2, sp, #12
    7716:	2300      	movs	r3, #0
    7718:	9200      	str	r2, [sp, #0]
    771a:	4619      	mov	r1, r3
    771c:	220c      	movs	r2, #12
    771e:	f7ff fbeb 	bl	6ef8 <_Unwind_VRS_Get>
    7722:	9803      	ldr	r0, [sp, #12]
    7724:	b005      	add	sp, #20
    7726:	f85d fb04 	ldr.w	pc, [sp], #4
    772a:	bf00      	nop

0000772c <unwind_UCB_from_context>:
    772c:	e7f0      	b.n	7710 <_Unwind_GetGR.constprop.0>
    772e:	bf00      	nop

00007730 <__gnu_unwind_execute>:
    7730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7734:	4605      	mov	r5, r0
    7736:	b085      	sub	sp, #20
    7738:	460e      	mov	r6, r1
    773a:	f04f 0800 	mov.w	r8, #0
    773e:	4630      	mov	r0, r6
    7740:	f7ff ffca 	bl	76d8 <next_unwind_byte>
    7744:	28b0      	cmp	r0, #176	; 0xb0
    7746:	4604      	mov	r4, r0
    7748:	f000 80b2 	beq.w	78b0 <__gnu_unwind_execute+0x180>
    774c:	0607      	lsls	r7, r0, #24
    774e:	d520      	bpl.n	7792 <__gnu_unwind_execute+0x62>
    7750:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    7754:	2b80      	cmp	r3, #128	; 0x80
    7756:	d04d      	beq.n	77f4 <__gnu_unwind_execute+0xc4>
    7758:	2b90      	cmp	r3, #144	; 0x90
    775a:	d036      	beq.n	77ca <__gnu_unwind_execute+0x9a>
    775c:	2ba0      	cmp	r3, #160	; 0xa0
    775e:	d060      	beq.n	7822 <__gnu_unwind_execute+0xf2>
    7760:	2bb0      	cmp	r3, #176	; 0xb0
    7762:	d074      	beq.n	784e <__gnu_unwind_execute+0x11e>
    7764:	2bc0      	cmp	r3, #192	; 0xc0
    7766:	f000 808b 	beq.w	7880 <__gnu_unwind_execute+0x150>
    776a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    776e:	2bd0      	cmp	r3, #208	; 0xd0
    7770:	d10b      	bne.n	778a <__gnu_unwind_execute+0x5a>
    7772:	f000 0207 	and.w	r2, r0, #7
    7776:	3201      	adds	r2, #1
    7778:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    777c:	2305      	movs	r3, #5
    777e:	2101      	movs	r1, #1
    7780:	4628      	mov	r0, r5
    7782:	f7ff fd97 	bl	72b4 <_Unwind_VRS_Pop>
    7786:	2800      	cmp	r0, #0
    7788:	d0d9      	beq.n	773e <__gnu_unwind_execute+0xe>
    778a:	2009      	movs	r0, #9
    778c:	b005      	add	sp, #20
    778e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7792:	f10d 090c 	add.w	r9, sp, #12
    7796:	2300      	movs	r3, #0
    7798:	4619      	mov	r1, r3
    779a:	0087      	lsls	r7, r0, #2
    779c:	f8cd 9000 	str.w	r9, [sp]
    77a0:	220d      	movs	r2, #13
    77a2:	4628      	mov	r0, r5
    77a4:	f7ff fba8 	bl	6ef8 <_Unwind_VRS_Get>
    77a8:	b2ff      	uxtb	r7, r7
    77aa:	9b03      	ldr	r3, [sp, #12]
    77ac:	f8cd 9000 	str.w	r9, [sp]
    77b0:	3704      	adds	r7, #4
    77b2:	0660      	lsls	r0, r4, #25
    77b4:	bf4c      	ite	mi
    77b6:	1bdf      	submi	r7, r3, r7
    77b8:	18ff      	addpl	r7, r7, r3
    77ba:	2300      	movs	r3, #0
    77bc:	4619      	mov	r1, r3
    77be:	220d      	movs	r2, #13
    77c0:	4628      	mov	r0, r5
    77c2:	9703      	str	r7, [sp, #12]
    77c4:	f7ff fbbc 	bl	6f40 <_Unwind_VRS_Set>
    77c8:	e7b9      	b.n	773e <__gnu_unwind_execute+0xe>
    77ca:	f000 030d 	and.w	r3, r0, #13
    77ce:	2b0d      	cmp	r3, #13
    77d0:	d0db      	beq.n	778a <__gnu_unwind_execute+0x5a>
    77d2:	af03      	add	r7, sp, #12
    77d4:	2300      	movs	r3, #0
    77d6:	f000 020f 	and.w	r2, r0, #15
    77da:	4619      	mov	r1, r3
    77dc:	9700      	str	r7, [sp, #0]
    77de:	4628      	mov	r0, r5
    77e0:	f7ff fb8a 	bl	6ef8 <_Unwind_VRS_Get>
    77e4:	2300      	movs	r3, #0
    77e6:	9700      	str	r7, [sp, #0]
    77e8:	4619      	mov	r1, r3
    77ea:	220d      	movs	r2, #13
    77ec:	4628      	mov	r0, r5
    77ee:	f7ff fba7 	bl	6f40 <_Unwind_VRS_Set>
    77f2:	e7a4      	b.n	773e <__gnu_unwind_execute+0xe>
    77f4:	4630      	mov	r0, r6
    77f6:	f7ff ff6f 	bl	76d8 <next_unwind_byte>
    77fa:	0224      	lsls	r4, r4, #8
    77fc:	4320      	orrs	r0, r4
    77fe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    7802:	d0c2      	beq.n	778a <__gnu_unwind_execute+0x5a>
    7804:	0104      	lsls	r4, r0, #4
    7806:	2300      	movs	r3, #0
    7808:	b2a2      	uxth	r2, r4
    780a:	4619      	mov	r1, r3
    780c:	4628      	mov	r0, r5
    780e:	f7ff fd51 	bl	72b4 <_Unwind_VRS_Pop>
    7812:	2800      	cmp	r0, #0
    7814:	d1b9      	bne.n	778a <__gnu_unwind_execute+0x5a>
    7816:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    781a:	bf18      	it	ne
    781c:	f04f 0801 	movne.w	r8, #1
    7820:	e78d      	b.n	773e <__gnu_unwind_execute+0xe>
    7822:	43c2      	mvns	r2, r0
    7824:	f002 0307 	and.w	r3, r2, #7
    7828:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    782c:	411a      	asrs	r2, r3
    782e:	0701      	lsls	r1, r0, #28
    7830:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    7834:	f04f 0300 	mov.w	r3, #0
    7838:	bf48      	it	mi
    783a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    783e:	4619      	mov	r1, r3
    7840:	4628      	mov	r0, r5
    7842:	f7ff fd37 	bl	72b4 <_Unwind_VRS_Pop>
    7846:	2800      	cmp	r0, #0
    7848:	f43f af79 	beq.w	773e <__gnu_unwind_execute+0xe>
    784c:	e79d      	b.n	778a <__gnu_unwind_execute+0x5a>
    784e:	28b1      	cmp	r0, #177	; 0xb1
    7850:	d033      	beq.n	78ba <__gnu_unwind_execute+0x18a>
    7852:	28b2      	cmp	r0, #178	; 0xb2
    7854:	f000 808b 	beq.w	796e <__gnu_unwind_execute+0x23e>
    7858:	28b3      	cmp	r0, #179	; 0xb3
    785a:	d039      	beq.n	78d0 <__gnu_unwind_execute+0x1a0>
    785c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    7860:	2bb4      	cmp	r3, #180	; 0xb4
    7862:	d092      	beq.n	778a <__gnu_unwind_execute+0x5a>
    7864:	f000 0207 	and.w	r2, r0, #7
    7868:	3201      	adds	r2, #1
    786a:	2301      	movs	r3, #1
    786c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7870:	4619      	mov	r1, r3
    7872:	4628      	mov	r0, r5
    7874:	f7ff fd1e 	bl	72b4 <_Unwind_VRS_Pop>
    7878:	2800      	cmp	r0, #0
    787a:	f43f af60 	beq.w	773e <__gnu_unwind_execute+0xe>
    787e:	e784      	b.n	778a <__gnu_unwind_execute+0x5a>
    7880:	28c6      	cmp	r0, #198	; 0xc6
    7882:	d042      	beq.n	790a <__gnu_unwind_execute+0x1da>
    7884:	28c7      	cmp	r0, #199	; 0xc7
    7886:	d04c      	beq.n	7922 <__gnu_unwind_execute+0x1f2>
    7888:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    788c:	2bc0      	cmp	r3, #192	; 0xc0
    788e:	d05b      	beq.n	7948 <__gnu_unwind_execute+0x218>
    7890:	28c8      	cmp	r0, #200	; 0xc8
    7892:	d060      	beq.n	7956 <__gnu_unwind_execute+0x226>
    7894:	28c9      	cmp	r0, #201	; 0xc9
    7896:	f47f af78 	bne.w	778a <__gnu_unwind_execute+0x5a>
    789a:	4630      	mov	r0, r6
    789c:	f7ff ff1c 	bl	76d8 <next_unwind_byte>
    78a0:	0302      	lsls	r2, r0, #12
    78a2:	f000 000f 	and.w	r0, r0, #15
    78a6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    78aa:	3001      	adds	r0, #1
    78ac:	4302      	orrs	r2, r0
    78ae:	e765      	b.n	777c <__gnu_unwind_execute+0x4c>
    78b0:	f1b8 0f00 	cmp.w	r8, #0
    78b4:	d018      	beq.n	78e8 <__gnu_unwind_execute+0x1b8>
    78b6:	2000      	movs	r0, #0
    78b8:	e768      	b.n	778c <__gnu_unwind_execute+0x5c>
    78ba:	4630      	mov	r0, r6
    78bc:	f7ff ff0c 	bl	76d8 <next_unwind_byte>
    78c0:	4602      	mov	r2, r0
    78c2:	2800      	cmp	r0, #0
    78c4:	f43f af61 	beq.w	778a <__gnu_unwind_execute+0x5a>
    78c8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    78cc:	d0d0      	beq.n	7870 <__gnu_unwind_execute+0x140>
    78ce:	e75c      	b.n	778a <__gnu_unwind_execute+0x5a>
    78d0:	4630      	mov	r0, r6
    78d2:	f7ff ff01 	bl	76d8 <next_unwind_byte>
    78d6:	0301      	lsls	r1, r0, #12
    78d8:	f000 000f 	and.w	r0, r0, #15
    78dc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    78e0:	1c42      	adds	r2, r0, #1
    78e2:	2301      	movs	r3, #1
    78e4:	430a      	orrs	r2, r1
    78e6:	e7c3      	b.n	7870 <__gnu_unwind_execute+0x140>
    78e8:	ac03      	add	r4, sp, #12
    78ea:	4643      	mov	r3, r8
    78ec:	220e      	movs	r2, #14
    78ee:	4641      	mov	r1, r8
    78f0:	9400      	str	r4, [sp, #0]
    78f2:	4628      	mov	r0, r5
    78f4:	f7ff fb00 	bl	6ef8 <_Unwind_VRS_Get>
    78f8:	9400      	str	r4, [sp, #0]
    78fa:	4628      	mov	r0, r5
    78fc:	4643      	mov	r3, r8
    78fe:	220f      	movs	r2, #15
    7900:	4641      	mov	r1, r8
    7902:	f7ff fb1d 	bl	6f40 <_Unwind_VRS_Set>
    7906:	4640      	mov	r0, r8
    7908:	e740      	b.n	778c <__gnu_unwind_execute+0x5c>
    790a:	4630      	mov	r0, r6
    790c:	f7ff fee4 	bl	76d8 <next_unwind_byte>
    7910:	0301      	lsls	r1, r0, #12
    7912:	f000 000f 	and.w	r0, r0, #15
    7916:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    791a:	1c42      	adds	r2, r0, #1
    791c:	2303      	movs	r3, #3
    791e:	430a      	orrs	r2, r1
    7920:	e7a6      	b.n	7870 <__gnu_unwind_execute+0x140>
    7922:	4630      	mov	r0, r6
    7924:	f7ff fed8 	bl	76d8 <next_unwind_byte>
    7928:	4602      	mov	r2, r0
    792a:	2800      	cmp	r0, #0
    792c:	f43f af2d 	beq.w	778a <__gnu_unwind_execute+0x5a>
    7930:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    7934:	f47f af29 	bne.w	778a <__gnu_unwind_execute+0x5a>
    7938:	2104      	movs	r1, #4
    793a:	4628      	mov	r0, r5
    793c:	f7ff fcba 	bl	72b4 <_Unwind_VRS_Pop>
    7940:	2800      	cmp	r0, #0
    7942:	f43f aefc 	beq.w	773e <__gnu_unwind_execute+0xe>
    7946:	e720      	b.n	778a <__gnu_unwind_execute+0x5a>
    7948:	f000 020f 	and.w	r2, r0, #15
    794c:	3201      	adds	r2, #1
    794e:	2303      	movs	r3, #3
    7950:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    7954:	e78c      	b.n	7870 <__gnu_unwind_execute+0x140>
    7956:	4630      	mov	r0, r6
    7958:	f7ff febe 	bl	76d8 <next_unwind_byte>
    795c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    7960:	f000 030f 	and.w	r3, r0, #15
    7964:	3210      	adds	r2, #16
    7966:	3301      	adds	r3, #1
    7968:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    796c:	e706      	b.n	777c <__gnu_unwind_execute+0x4c>
    796e:	2300      	movs	r3, #0
    7970:	f10d 090c 	add.w	r9, sp, #12
    7974:	220d      	movs	r2, #13
    7976:	4619      	mov	r1, r3
    7978:	f8cd 9000 	str.w	r9, [sp]
    797c:	4628      	mov	r0, r5
    797e:	f7ff fabb 	bl	6ef8 <_Unwind_VRS_Get>
    7982:	4630      	mov	r0, r6
    7984:	f7ff fea8 	bl	76d8 <next_unwind_byte>
    7988:	0602      	lsls	r2, r0, #24
    798a:	f04f 0702 	mov.w	r7, #2
    798e:	d50c      	bpl.n	79aa <__gnu_unwind_execute+0x27a>
    7990:	9b03      	ldr	r3, [sp, #12]
    7992:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    7996:	40b8      	lsls	r0, r7
    7998:	4403      	add	r3, r0
    799a:	4630      	mov	r0, r6
    799c:	9303      	str	r3, [sp, #12]
    799e:	f7ff fe9b 	bl	76d8 <next_unwind_byte>
    79a2:	0603      	lsls	r3, r0, #24
    79a4:	f107 0707 	add.w	r7, r7, #7
    79a8:	d4f2      	bmi.n	7990 <__gnu_unwind_execute+0x260>
    79aa:	9b03      	ldr	r3, [sp, #12]
    79ac:	f8cd 9000 	str.w	r9, [sp]
    79b0:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    79b4:	f503 7201 	add.w	r2, r3, #516	; 0x204
    79b8:	40bc      	lsls	r4, r7
    79ba:	2300      	movs	r3, #0
    79bc:	4414      	add	r4, r2
    79be:	4619      	mov	r1, r3
    79c0:	220d      	movs	r2, #13
    79c2:	4628      	mov	r0, r5
    79c4:	9403      	str	r4, [sp, #12]
    79c6:	f7ff fabb 	bl	6f40 <_Unwind_VRS_Set>
    79ca:	e6b8      	b.n	773e <__gnu_unwind_execute+0xe>

000079cc <__gnu_unwind_frame>:
    79cc:	b510      	push	{r4, lr}
    79ce:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    79d0:	b084      	sub	sp, #16
    79d2:	6853      	ldr	r3, [r2, #4]
    79d4:	2403      	movs	r4, #3
    79d6:	f88d 400c 	strb.w	r4, [sp, #12]
    79da:	021b      	lsls	r3, r3, #8
    79dc:	f102 0408 	add.w	r4, r2, #8
    79e0:	4608      	mov	r0, r1
    79e2:	79d2      	ldrb	r2, [r2, #7]
    79e4:	9301      	str	r3, [sp, #4]
    79e6:	a901      	add	r1, sp, #4
    79e8:	9402      	str	r4, [sp, #8]
    79ea:	f88d 200d 	strb.w	r2, [sp, #13]
    79ee:	f7ff fe9f 	bl	7730 <__gnu_unwind_execute>
    79f2:	b004      	add	sp, #16
    79f4:	bd10      	pop	{r4, pc}
    79f6:	bf00      	nop

000079f8 <_Unwind_GetRegionStart>:
    79f8:	b508      	push	{r3, lr}
    79fa:	f7ff fe97 	bl	772c <unwind_UCB_from_context>
    79fe:	6c80      	ldr	r0, [r0, #72]	; 0x48
    7a00:	bd08      	pop	{r3, pc}
    7a02:	bf00      	nop

00007a04 <_Unwind_GetLanguageSpecificData>:
    7a04:	b508      	push	{r3, lr}
    7a06:	f7ff fe91 	bl	772c <unwind_UCB_from_context>
    7a0a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    7a0c:	79c3      	ldrb	r3, [r0, #7]
    7a0e:	3302      	adds	r3, #2
    7a10:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7a14:	bd08      	pop	{r3, pc}
    7a16:	bf00      	nop

00007a18 <__aeabi_idiv0>:
    7a18:	4770      	bx	lr
    7a1a:	bf00      	nop

00007a1c <abort>:
    7a1c:	b508      	push	{r3, lr}
    7a1e:	2006      	movs	r0, #6
    7a20:	f000 f86c 	bl	7afc <raise>
    7a24:	2001      	movs	r0, #1
    7a26:	f7fb fa5d 	bl	2ee4 <_exit>
    7a2a:	Address 0x0000000000007a2a is out of bounds.


00007a2c <__cxa_atexit>:
    7a2c:	b510      	push	{r4, lr}
    7a2e:	4c05      	ldr	r4, [pc, #20]	; (7a44 <__cxa_atexit+0x18>)
    7a30:	4613      	mov	r3, r2
    7a32:	b12c      	cbz	r4, 7a40 <__cxa_atexit+0x14>
    7a34:	460a      	mov	r2, r1
    7a36:	4601      	mov	r1, r0
    7a38:	2002      	movs	r0, #2
    7a3a:	f3af 8000 	nop.w
    7a3e:	bd10      	pop	{r4, pc}
    7a40:	4620      	mov	r0, r4
    7a42:	e7fc      	b.n	7a3e <__cxa_atexit+0x12>
    7a44:	00000000 	.word	0x00000000

00007a48 <__libc_init_array>:
    7a48:	b570      	push	{r4, r5, r6, lr}
    7a4a:	4d0d      	ldr	r5, [pc, #52]	; (7a80 <__libc_init_array+0x38>)
    7a4c:	4c0d      	ldr	r4, [pc, #52]	; (7a84 <__libc_init_array+0x3c>)
    7a4e:	1b64      	subs	r4, r4, r5
    7a50:	10a4      	asrs	r4, r4, #2
    7a52:	2600      	movs	r6, #0
    7a54:	42a6      	cmp	r6, r4
    7a56:	d109      	bne.n	7a6c <__libc_init_array+0x24>
    7a58:	4d0b      	ldr	r5, [pc, #44]	; (7a88 <__libc_init_array+0x40>)
    7a5a:	4c0c      	ldr	r4, [pc, #48]	; (7a8c <__libc_init_array+0x44>)
    7a5c:	f7f8 fc50 	bl	300 <_init>
    7a60:	1b64      	subs	r4, r4, r5
    7a62:	10a4      	asrs	r4, r4, #2
    7a64:	2600      	movs	r6, #0
    7a66:	42a6      	cmp	r6, r4
    7a68:	d105      	bne.n	7a76 <__libc_init_array+0x2e>
    7a6a:	bd70      	pop	{r4, r5, r6, pc}
    7a6c:	f855 3b04 	ldr.w	r3, [r5], #4
    7a70:	4798      	blx	r3
    7a72:	3601      	adds	r6, #1
    7a74:	e7ee      	b.n	7a54 <__libc_init_array+0xc>
    7a76:	f855 3b04 	ldr.w	r3, [r5], #4
    7a7a:	4798      	blx	r3
    7a7c:	3601      	adds	r6, #1
    7a7e:	e7f2      	b.n	7a66 <__libc_init_array+0x1e>
    7a80:	0000030c 	.word	0x0000030c
    7a84:	0000030c 	.word	0x0000030c
    7a88:	0000030c 	.word	0x0000030c
    7a8c:	00000320 	.word	0x00000320

00007a90 <memcpy>:
    7a90:	440a      	add	r2, r1
    7a92:	4291      	cmp	r1, r2
    7a94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7a98:	d100      	bne.n	7a9c <memcpy+0xc>
    7a9a:	4770      	bx	lr
    7a9c:	b510      	push	{r4, lr}
    7a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
    7aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
    7aa6:	4291      	cmp	r1, r2
    7aa8:	d1f9      	bne.n	7a9e <memcpy+0xe>
    7aaa:	bd10      	pop	{r4, pc}

00007aac <_raise_r>:
    7aac:	291f      	cmp	r1, #31
    7aae:	b538      	push	{r3, r4, r5, lr}
    7ab0:	4604      	mov	r4, r0
    7ab2:	460d      	mov	r5, r1
    7ab4:	d904      	bls.n	7ac0 <_raise_r+0x14>
    7ab6:	2316      	movs	r3, #22
    7ab8:	6003      	str	r3, [r0, #0]
    7aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7abe:	bd38      	pop	{r3, r4, r5, pc}
    7ac0:	6c42      	ldr	r2, [r0, #68]	; 0x44
    7ac2:	b112      	cbz	r2, 7aca <_raise_r+0x1e>
    7ac4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    7ac8:	b94b      	cbnz	r3, 7ade <_raise_r+0x32>
    7aca:	4620      	mov	r0, r4
    7acc:	f000 f830 	bl	7b30 <_getpid_r>
    7ad0:	462a      	mov	r2, r5
    7ad2:	4601      	mov	r1, r0
    7ad4:	4620      	mov	r0, r4
    7ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7ada:	f000 b817 	b.w	7b0c <_kill_r>
    7ade:	2b01      	cmp	r3, #1
    7ae0:	d00a      	beq.n	7af8 <_raise_r+0x4c>
    7ae2:	1c59      	adds	r1, r3, #1
    7ae4:	d103      	bne.n	7aee <_raise_r+0x42>
    7ae6:	2316      	movs	r3, #22
    7ae8:	6003      	str	r3, [r0, #0]
    7aea:	2001      	movs	r0, #1
    7aec:	e7e7      	b.n	7abe <_raise_r+0x12>
    7aee:	2400      	movs	r4, #0
    7af0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    7af4:	4628      	mov	r0, r5
    7af6:	4798      	blx	r3
    7af8:	2000      	movs	r0, #0
    7afa:	e7e0      	b.n	7abe <_raise_r+0x12>

00007afc <raise>:
    7afc:	4b02      	ldr	r3, [pc, #8]	; (7b08 <raise+0xc>)
    7afe:	4601      	mov	r1, r0
    7b00:	6818      	ldr	r0, [r3, #0]
    7b02:	f7ff bfd3 	b.w	7aac <_raise_r>
    7b06:	bf00      	nop
    7b08:	1000008c 	.word	0x1000008c

00007b0c <_kill_r>:
    7b0c:	b538      	push	{r3, r4, r5, lr}
    7b0e:	4d07      	ldr	r5, [pc, #28]	; (7b2c <_kill_r+0x20>)
    7b10:	2300      	movs	r3, #0
    7b12:	4604      	mov	r4, r0
    7b14:	4608      	mov	r0, r1
    7b16:	4611      	mov	r1, r2
    7b18:	602b      	str	r3, [r5, #0]
    7b1a:	f7fb f999 	bl	2e50 <_kill>
    7b1e:	1c43      	adds	r3, r0, #1
    7b20:	d102      	bne.n	7b28 <_kill_r+0x1c>
    7b22:	682b      	ldr	r3, [r5, #0]
    7b24:	b103      	cbz	r3, 7b28 <_kill_r+0x1c>
    7b26:	6023      	str	r3, [r4, #0]
    7b28:	bd38      	pop	{r3, r4, r5, pc}
    7b2a:	bf00      	nop
    7b2c:	10000bcc 	.word	0x10000bcc

00007b30 <_getpid_r>:
    7b30:	f7fb b986 	b.w	2e40 <_getpid>

00007b34 <strlen>:
    7b34:	4603      	mov	r3, r0
    7b36:	f813 2b01 	ldrb.w	r2, [r3], #1
    7b3a:	2a00      	cmp	r2, #0
    7b3c:	d1fb      	bne.n	7b36 <strlen+0x2>
    7b3e:	1a18      	subs	r0, r3, r0
    7b40:	3801      	subs	r0, #1
    7b42:	4770      	bx	lr

00007b44 <sjsu::lpc40xx::Pin::kFunction>:
    7b44:	0300 ffff                                   ....

00007b48 <sjsu::lpc40xx::Pin::kResistor>:
    7b48:	0203 ffff                                   ....

00007b4c <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    7b4c:	0107 ffff                                   ....

00007b50 <sjsu::lpc40xx::Pin::kOpenDrain>:
    7b50:	010a ffff                                   ....

00007b54 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes>:
    7b54:	0302 0100                                   ....

00007b58 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file>:
    7b58:	6970 2e6e 7068 0070 6976 7472 6175 206c     pin.hpp.virtual 
    7b68:	6f76 6469 7320 736a 3a75 6c3a 6370 3731     void sjsu::lpc17
    7b78:	7878 3a3a 6950 3a6e 533a 7465 7341 6e41     xx::Pin::SetAsAn
    7b88:	6c61 676f 6f4d 6564 6228 6f6f 296c 6320     alogMode(bool) c
    7b98:	6e6f 7473 0000 0000 5b1b 3334 206d 4157     onst.....[43m WA
    7ba8:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    7bb8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7bc8:	256d 3e64 1b20 305b 333b 6d37 6e55 7573     m%d> .[0;37mUnsu
    7bd8:	7070 726f 6574 2064 706f 7265 7461 6f69     pported operatio
    7be8:	1b6e 305b 0a6d 0000 6f62 6c6f 7320 736a     n.[0m...bool sjs
    7bf8:	3a75 6c3a 6370 3034 7878 3a3a 7047 6f69     u::lpc40xx::Gpio
    7c08:	3a3a 7349 5641 6c61 6469 6f50 7472 2928     ::IsAValidPort()
    7c18:	6320 6e6f 7473 0000 5b1b 3334 206d 4157      const...[43m WA
    7c28:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    7c38:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7c48:	256d 3e64 1b20 305b 333b 6d37 6854 7369     m%d> .[0;37mThis
    7c58:	6720 6970 206f 6f70 7472 6320 6e61 6f6e      gpio port canno
    7c68:	2074 6562 7520 6573 2064 6f66 2072 7845     t be used for Ex
    7c78:	6574 6e72 6c61 4920 746e 7265 7572 7470     ternal Interrupt
    7c88:	2e73 4e20 6565 2064 6f74 7520 6573 4720     s. Need to use G
    7c98:	4950 734f 6f20 206e 6f50 7472 3020 6f20     PIOs on Port 0 o
    7ca8:	2072 2e32 5b1b 6d30 5b1b 6d30 000a 0000     r 2..[0m.[0m....
    7cb8:	7250 7365 6573 2064 654b 3a79 3020 0000     Pressed Key: 0..
    7cc8:	7250 7365 6573 2064 654b 3a79 3120 0000     Pressed Key: 1..
    7cd8:	7250 7365 6573 2064 654b 3a79 3220 0000     Pressed Key: 2..
    7ce8:	7250 7365 6573 2064 654b 3a79 3320 0000     Pressed Key: 3..
    7cf8:	7250 7365 6573 2064 654b 3a79 3420 0000     Pressed Key: 4..
    7d08:	7250 7365 6573 2064 654b 3a79 3520 0000     Pressed Key: 5..
    7d18:	7250 7365 6573 2064 654b 3a79 3620 0000     Pressed Key: 6..
    7d28:	7250 7365 6573 2064 654b 3a79 3720 0000     Pressed Key: 7..
    7d38:	7250 7365 6573 2064 654b 3a79 3820 0000     Pressed Key: 8..
    7d48:	7250 7365 6573 2064 654b 3a79 3920 0000     Pressed Key: 9..
    7d58:	7250 7365 6573 2064 654b 3a79 4120 0000     Pressed Key: A..
    7d68:	7250 7365 6573 2064 654b 3a79 4220 0000     Pressed Key: B..
    7d78:	7250 7365 6573 2064 654b 3a79 4320 0000     Pressed Key: C..
    7d88:	7250 7365 6573 2064 654b 3a79 4420 0000     Pressed Key: D..
    7d98:	7250 7365 6573 2064 654b 3a79 2a20 0000     Pressed Key: *..
    7da8:	7250 7365 6573 2064 654b 3a79 2320 0000     Pressed Key: #..
    7db8:	6f76 6469 6920 7372 2928 0000 5b1b 3234     void irs()...[42
    7dc8:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    7dd8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    7de8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    7df8:	6e49 6574 7272 7075 2074 6544 6574 7463     Interrupt Detect
    7e08:	6465 1b0a 305b 0a6d ff00 ffff               ed..[0m.....

00007e14 <sjsu::lpc40xx::Gpio::IsAValidPort() const::file>:
    7e14:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00007e20 <irs()::file>:
    7e20:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00007e2c <vtable for sjsu::lpc40xx::Gpio>:
	...
    7e34:	0d91 0000 0df9 0000 0e3d 0000 0e6b 0000     ........=...k...
    7e44:	0e8f 0000 0edd 0000 0fb9 0000               ............

00007e50 <vtable for sjsu::lpc17xx::Pin>:
	...
    7e58:	09c1 0000 09d5 0000 0a35 0000 0abd 0000     ........5.......
    7e68:	0a91 0000                                   ....

00007e6c <vtable for sjsu::Gpio>:
	...
    7e74:	64f3 0000 64f3 0000 64f3 0000 64f3 0000     .d...d...d...d..
    7e84:	64f3 0000 64f3 0000 64f3 0000               .d...d...d..

00007e90 <vtable for sjsu::lpc40xx::Pin>:
	...
    7e98:	04d9 0000 04ed 0000 0521 0000 0591 0000     ........!.......
    7ea8:	0555 0000                                   U...

00007eac <vtable for sjsu::Pin>:
	...
    7eb4:	64f3 0000 64f3 0000 64f3 0000 64f3 0000     .d...d...d...d..
    7ec4:	64f3 0000 2020 6425 2029 7830 3025 5838     .d..  %d) 0x%08X
    7ed4:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    7ee4:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    7ef4:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    7f04:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    7f14:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    7f24:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    7f34:	7320 6174 6b63 7274 6361 2065 5254 4341      stacktrace TRAC
    7f44:	5345 223d 0000 0000 7830 7025 0020 0000     ES="....0x%p ...
    7f54:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    7f64:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    7f74:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    7f84:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    7f94:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    7fa4:	2067 6163 6c6c 6465 002e 0000 6976 7472     g called....virt
    7fb4:	6175 206c 6f76 6469 7320 736a 3a75 723a     ual void sjsu::r
    7fc4:	6f74 3a73 543a 7361 536b 6863 6465 6c75     tos::TaskSchedul
    7fd4:	7265 3a3a 6441 5464 7361 286b 6a73 7573     er::AddTask(sjsu
    7fe4:	3a3a 7472 736f 3a3a 6154 6b73 6e49 6574     ::rtos::TaskInte
    7ff4:	6672 6361 2a65 0029 5b1b 3534 206d 2020     rface*)..[45m   
    8004:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    8014:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8024:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8034:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8044:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    8054:	2820 6174 6b73 635f 756f 746e 205f 202b      (task_count_ + 
    8064:	2031 203c 6f63 666e 6769 3a3a 546b 7361     1 < config::kTas
    8074:	536b 6863 6465 6c75 7265 6953 657a 0a29     kSchedulerSize).
    8084:	2020 2020 2020 2020 2020 6854 2065 6373               The sc
    8094:	6568 7564 656c 2072 7369 6320 7275 6572     heduler is curre
    80a4:	746e 796c 6620 6c75 2c6c 7420 6568 7420     ntly full, the t
    80b4:	7361 206b 6977 6c6c 6e20 746f 6220 2065     ask will not be 
    80c4:	6461 6564 2e64 4320 6e6f 6973 6564 2072     added. Consider 
    80d4:	6e69 7263 6165 6973 676e 7420 6568 7320     increasing the s
    80e4:	6863 6465 6c75 7265 7320 7a69 2065 6f63     cheduler size co
    80f4:	666e 6769 7275 7461 6f69 2e6e 5b1b 6d30     nfiguration..[0m
    8104:	5b1b 6d30 000a 0000 500a 6972 746e 6e69     .[0m.....Printin
    8114:	2067 7453 6361 206b 7254 6361 3a65 000a     g Stack Trace:..
    8124:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    8134:	3a3a 7472 736f 3a3a 6154 6b73 6353 6568     ::rtos::TaskSche
    8144:	7564 656c 3a72 523a 6e75 6154 6b73 7628     duler::RunTask(v
    8154:	696f 2a64 0029 0000 5b1b 3534 206d 2020     oid*)....[45m   
    8164:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    8174:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8184:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8194:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    81a4:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    81b4:	2820 546b 7361 496b 646e 7865 3c20 6b20      (kTaskIndex < k
    81c4:	6154 6b73 6f43 6e75 2974 200a 2020 2020     TaskCount).     
    81d4:	2020 2020 5420 6568 7420 7361 206b 6e69          The task in
    81e4:	6564 2078 6873 756f 646c 6e20 746f 6520     dex should not e
    81f4:	6378 6565 2064 6874 2065 6174 6b73 6320     xceed the task c
    8204:	756f 746e 1b2e 305b 1b6d 305b 0a6d 0000     ount..[0m.[0m...
    8214:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    8224:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8234:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8244:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8254:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8264:	5420 7365 6574 3a64 2820 6174 6b73 502e      Tested: (task.P
    8274:	6572 7552 286e 2929 200a 2020 2020 2020     reRun()).       
    8284:	2020 5020 6572 7552 286e 2029 6166 6c69        PreRun() fail
    8294:	6465 6620 726f 7420 7361 3a6b 2520 2c73     ed for task: %s,
    82a4:	7420 7265 696d 616e 6974 676e 7320 6863      terminating sch
    82b4:	6465 6c75 7265 1b21 305b 1b6d 305b 0a6d     eduler!.[0m.[0m.
    82c4:	0000 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
    82d4:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
    82e4:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    82f4:	1b20 305b 333b 6d37 6e41 6520 7272 726f      .[0;37mAn error
    8304:	6f20 6363 7275 6572 2c64 7420 6568 6620      occurred, the f
    8314:	6c6f 6f6c 6977 676e 7420 7361 206b 6977     ollowing task wi
    8324:	6c6c 6220 2065 7573 7073 6e65 6564 3a64     ll be suspended:
    8334:	2520 1b73 305b 1b6d 305b 0a6d 0000 0000      %s.[0m.[0m.....
    8344:	6f76 6469 7320 736a 3a75 723a 6f74 3a73     void sjsu::rtos:
    8354:	543a 7361 536b 6863 6465 6c75 7265 3a3a     :TaskScheduler::
    8364:	6e49 7469 6169 696c 657a 6c41 546c 7361     InitializeAllTas
    8374:	736b 2928 0000 0000 5b1b 3534 206d 2020     ks().....[45m   
    8384:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    8394:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    83a4:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    83b4:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    83c4:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    83d4:	2820 6174 6b73 3e2d 6547 4874 6e61 6c64      (task->GetHandl
    83e4:	2865 2029 3d21 6e20 6c75 706c 7274 0a29     e() != nullptr).
    83f4:	2020 2020 2020 2020 2020 6e55 6261 656c               Unable
    8404:	7420 206f 7263 6165 6574 7420 7361 3a6b      to create task:
    8414:	2520 1b73 305b 1b6d 305b 0a6d 0000 0000      %s.[0m.[0m.....
    8424:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    8434:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8444:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8454:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8464:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8474:	5420 7365 6574 3a64 2820 6174 6b73 3e2d      Tested: (task->
    8484:	6553 7574 2870 2929 200a 2020 2020 2020     Setup()).       
    8494:	2020 4620 6961 656c 2064 6f74 6320 6d6f        Failed to com
    84a4:	6c70 7465 2065 6553 7574 2870 2029 6f66     plete Setup() fo
    84b4:	2072 6174 6b73 203a 7325 5b1b 6d30 5b1b     r task: %s.[0m.[
    84c4:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    84d4:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    84e4:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    84f4:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    8504:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    8514:	6974 6e6f 5420 7365 6574 3a64 2820 7270     tion Tested: (pr
    8524:	5f65 7572 5f6e 7665 6e65 5f74 7267 756f     e_run_event_grou
    8534:	5f70 6168 646e 656c 205f 3d21 6e20 6c75     p_handle_ != nul
    8544:	706c 7274 0a29 2020 2020 2020 2020 2020     lptr).          
    8554:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
    8564:	5020 6572 7552 206e 7645 6e65 2074 7247      PreRun Event Gr
    8574:	756f 2170 5b1b 6d30 5b1b 6d30 000a ffff     oup!.[0m.[0m....
    8584:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    8594:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    85a4:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    85b4:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    85c4:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    85d4:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    85e4:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    85f4:	6b63 7274 6361 2065 5254 4341 5345 223d     cktrace TRACES="
    8604:	0000 0000 7830 7025 0020 0000 0a22 1b0a     ....0x%p ..."...
    8614:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    8624:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    8634:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    8644:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    8654:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    8664:	6c6c 6465 002e 0000 5b1b 3134 486d 7261     lled.....[41mHar
    8674:	2064 6146 6c75 2074 7845 6563 7470 6f69     d Fault Exceptio
    8684:	206e 634f 7563 7272 6465 0a21 5b1b 6d30     n Occurred!..[0m
    8694:	0000 0000 3072 203a 7830 3025 6c38 2c58     ....r0: 0x%08lX,
    86a4:	7220 3a31 3020 2578 3830 586c 202c 3272      r1: 0x%08lX, r2
    86b4:	203a 7830 3025 6c38 2c58 7220 3a33 3020     : 0x%08lX, r3: 0
    86c4:	2578 3830 586c 000a 3172 3a32 3020 2578     x%08lX..r12: 0x%
    86d4:	3830 586c 202c 726c 203a 7830 3025 6c38     08lX, lr: 0x%08l
    86e4:	2c58 7020 3a63 3020 2578 3830 586c 202c     X, pc: 0x%08lX, 
    86f4:	7370 3a72 3020 2578 3830 586c 000a 0000     psr: 0x%08lX....
    8704:	1b0a 315b 333b 6d37 5b1b 3234 506d 6f72     ..[1;37m.[42mPro
    8714:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    8724:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    8734:	006d 0000 1b0a 315b 333b 6d37 5b1b 3134     m.....[1;37m.[41
    8744:	506d 6f72 7267 6d61 5220 7465 7275 656e     mProgram Returne
    8754:	2064 7845 7469 4320 646f 3a65 2520 646c     d Exit Code: %ld
    8764:	1b0a 305b 006d ffff 000a ffff               ..[0m.......

00008770 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    8770:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    8780:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    8790:	bc20 4cbe 6b28 4e6e 743a 0074                ..L(knN:tt.

0000879c <config::kSystemClockRateMhz>:
    879c:	0000 4240                                   ..@B

000087a0 <config::kRtosFrequency>:
    87a0:	0000 447a 2020 6425 2029 7830 3025 5838     ..zD  %d) 0x%08X
    87b0:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    87c0:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    87d0:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    87e0:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    87f0:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    8800:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    8810:	7320 6174 6b63 7274 6361 2065 5254 4341      stacktrace TRAC
    8820:	5345 223d 0000 0000 7830 7025 0020 0000     ES="....0x%p ...
    8830:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    8840:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    8850:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    8860:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    8870:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    8880:	2067 6163 6c6c 6465 002e 0000 6976 7472     g called....virt
    8890:	6175 206c 6f76 6469 7320 736a 3a75 6c3a     ual void sjsu::l
    88a0:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    88b0:	746e 6f72 6c6c 7265 3a3a 6553 5074 7265     ntroller::SetPer
    88c0:	7069 6568 6172 436c 6f6c 6b63 6944 6976     ipheralClockDivi
    88d0:	6564 2872 6f63 736e 2074 6a73 7573 3a3a     der(const sjsu::
    88e0:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    88f0:	3a3a 6550 6972 6870 7265 6c61 4449 2c26     ::PeripheralID&,
    8900:	7520 6e69 3874 745f 2029 6f63 736e 0074      uint8_t) const.
    8910:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    8920:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8930:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8940:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8950:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8960:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    8970:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    8980:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    8990:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    89a0:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    89b0:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    89c0:	7254 6361 3a65 000a 6975 746e 3233 745f     Trace:..uint32_t
    89d0:	7320 736a 3a75 6c3a 6370 3034 7878 3a3a      sjsu::lpc40xx::
    89e0:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    89f0:	3a3a 6143 636c 6c75 7461 5065 6c6c 7528     ::CalculatePll(u
    8a00:	696e 7374 3a3a 7266 7165 6575 636e 3a79     nits::frequency:
    8a10:	6d3a 6765 6861 7265 7a74 745f 202c 6e75     :megahertz_t, un
    8a20:	7469 3a73 663a 6572 7571 6e65 7963 3a3a     its::frequency::
    8a30:	656d 6167 6568 7472 5f7a 2974 6320 6e6f     megahertz_t) con
    8a40:	7473 0000 5b1b 3534 206d 2020 5245 4f52     st...[45m   ERRO
    8a50:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    8a60:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    8a70:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    8a80:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    8a90:	6974 6e6f 5420 7365 6574 3a64 2820 6564     tion Tested: (de
    8aa0:	6973 6572 5f64 7266 7165 6575 636e 2079     sired_frequency 
    8ab0:	203c 3833 5f34 484d 207a 2626 6420 7365     < 384_MHz && des
    8ac0:	7269 6465 665f 6572 7571 6e65 7963 3e20     ired_frequency >
    8ad0:	3120 5f32 484d 297a 200a 2020 2020 2020      12_MHz).       
    8ae0:	2020 4620 6572 7571 6e65 7963 6d20 7375        Frequency mus
    8af0:	2074 6562 6c20 776f 7265 7420 6168 206e     t be lower than 
    8b00:	3833 2034 484d 617a 646e 6720 6572 7461     384 MHzand great
    8b10:	7265 7420 6168 206e 726f 6520 7571 6c61     er than or equal
    8b20:	7420 206f 3231 4d20 7a48 5b1b 6d30 5b1b      to 12 MHz.[0m.[
    8b30:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    8b40:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    8b50:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    8b60:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    8b70:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    8b80:	6974 6e6f 5420 7365 6574 3a64 2820 6964     tion Tested: (di
    8b90:	6976 6564 5f72 6176 756c 2065 203c 2938     vider_value < 8)
    8ba0:	200a 2020 2020 2020 2020 5020 4c4c 6420     .          PLL d
    8bb0:	7669 6469 7265 7620 6c61 6575 7720 6e65     ivider value wen
    8bc0:	2074 756f 2074 666f 6220 756f 646e 1b73     t out of bounds.
    8bd0:	305b 1b6d 305b 0a6d 0000 0000 6f76 6469     [0m.[0m.....void
    8be0:	7320 736a 3a75 6c3a 6370 3034 7878 3a3a      sjsu::lpc40xx::
    8bf0:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    8c00:	3a3a 6553 4374 7570 6c43 636f 446b 7669     ::SetCpuClockDiv
    8c10:	6469 7265 7528 6e69 3874 745f 2029 6f63     ider(uint8_t) co
    8c20:	736e 0074 5b1b 3534 206d 2020 5245 4f52     nst..[45m   ERRO
    8c30:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    8c40:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    8c50:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    8c60:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    8c70:	6974 6e6f 5420 7365 6574 3a64 2820 7063     tion Tested: (cp
    8c80:	5f75 6964 6976 6564 2072 203c 3233 0a29     u_divider < 32).
    8c90:	2020 2020 2020 2020 2020 6944 6976 6564               Divide
    8ca0:	2072 756d 7473 276e 2074 7865 6563 6465     r mustn't exceed
    8cb0:	3320 1b32 305b 1b6d 305b 0a6d 0000 0000      32.[0m.[0m.....
    8cc0:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    8cd0:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().
    8ce0:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    8cf0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8d00:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8d10:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8d20:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8d30:	5420 7365 6574 3a64 2820 6974 656d 5f72      Tested: (timer_
    8d40:	7473 7261 5f74 7473 7461 7375 3d20 203d     start_status == 
    8d50:	6a73 7573 3a3a 7453 7461 7375 3a3a 536b     sjsu::Status::kS
    8d60:	6375 6563 7373 0a29 2020 2020 2020 2020     uccess).        
    8d70:	2020 7953 7473 6d65 5420 6d69 7265 2820       System Timer (
    8d80:	7375 6465 6220 2079 7246 6565 5452 534f     used by FreeRTOS
    8d90:	2029 6168 2073 4146 4c49 4445 7420 206f     ) has FAILED to 
    8da0:	7473 7261 2174 5b1b 6d30 5b1b 6d30 000a     start!.[0m.[0m..
    8db0:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    8dc0:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    8dd0:	7075 4374 6e6f 7274 6c6f 656c 3c72 4e6b     uptController<kN
    8de0:	6d75 6562 4f72 4966 746e 7265 7572 7470     umberOfInterrupt
    8df0:	2c73 6b20 764e 6369 7250 6f69 6972 7974     s, kNvicPriority
    8e00:	6942 7374 3a3e 553a 726e 6765 7369 6574     Bits>::Unregiste
    8e10:	6572 4864 6e61 6c64 7265 2928 5b20 6977     redHandler() [wi
    8e20:	6874 7520 736e 6769 656e 2064 6e69 2074     th unsigned int 
    8e30:	4e6b 6d75 6562 4f72 4966 746e 7265 7572     kNumberOfInterru
    8e40:	7470 2073 203d 3334 203b 6f6c 676e 7520     pts = 43; long u
    8e50:	736e 6769 656e 2064 6e69 2074 4e6b 6976     nsigned int kNvi
    8e60:	5063 6972 726f 7469 4279 7469 2073 203d     cPriorityBits = 
    8e70:	5d35 0000 2020 4420 4245 4755 5b1b 3b30     5]..   DEBUG.[0;
    8e80:	3439 3a6d 7325 1b3a 305b 393b 6d32 7325     94m:%s:.[0;92m%s
    8e90:	1b3a 305b 393b 6d33 6425 203e 5b1b 3b30     :.[0;93m%d> .[0;
    8ea0:	3733 4e6d 206f 6e69 6574 7272 7075 2074     37mNo interrupt 
    8eb0:	6168 646e 656c 2072 6f66 6e75 2e64 4420     handler found. D
    8ec0:	7369 6261 696c 676e 6920 746e 7265 7572     isabling interru
    8ed0:	7470 7220 7165 6575 7473 2520 2164 5b1b     pt request %d!.[
    8ee0:	6d30 000a                                   0m..

00008ee4 <sjsu::cortex::SystemTimer::kFixedPointScaling>:
    8ee4:	4240 000f                                   @B..

00008ee8 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    8ee8:	0000 4140                                   ..@A

00008eec <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    8eec:	0000 4140                                   ..@A

00008ef0 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    8ef0:	0100 ffff                                   ....

00008ef4 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    8ef4:	0100 ffff                                   ....

00008ef8 <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    8ef8:	0500 ffff                                   ....

00008efc <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    8efc:	0108 ffff                                   ....

00008f00 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    8f00:	0208 ffff                                   ....

00008f04 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    8f04:	0208 ffff                                   ....

00008f08 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    8f08:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    8f18:	2e72 7068 0070 ffff                         r.hpp...

00008f20 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    8f20:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    8f30:	2e72 7068 0070 ffff                         r.hpp...

00008f38 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    8f38:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    8f48:	2e72 7068 0070 ffff                         r.hpp...

00008f50 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    8f50:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    8f60:	2e72 7068 0070 ffff                         r.hpp...

00008f68 <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    8f68:	7e98 0000 0200 0000                         .~......

00008f70 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    8f70:	7e98 0000 0300 0000                         .~......

00008f78 <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    8f78:	7e98 0000 0802 0000                         .~......

00008f80 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    8f80:	7e98 0000 0902 0000                         .~......

00008f88 <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    8f88:	7e98 0000 1c04 0000                         .~......

00008f90 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    8f90:	7e98 0000 1d04 0000                         .~......

00008f98 <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    8f98:	7e98 0000 1d01 0000                         .~......

00008fa0 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    8fa0:	7e98 0000 0902 0000                         .~......

00008fa8 <sjsu::lpc40xx::Uart::Port::kUart0>:
    8fa8:	c000 4000 0003 0000 8f68 0000 8f70 0000     ...@....h...p...
    8fb8:	0009 0000                                   ....

00008fbc <sjsu::InitializePlatform()::file>:
    8fbc:	7473 7261 7574 2e70 7063 0070               startup.cpp.

00008fc8 <vtable for sjsu::cortex::InterruptController<43u, 5ul>>:
	...
    8fd0:	60c1 0000 60f1 0000 614d 0000               .`...`..Ma..

00008fdc <vtable for sjsu::lpc40xx::Uart>:
	...
    8fe4:	55e5 0000 568f 0000 5721 0000 5773 0000     .U...V..!W..sW..
    8ff4:	57c1 0000 5177 0000                         .W..wQ..

00008ffc <vtable for sjsu::lpc40xx::SystemController>:
	...
    9004:	4a61 0000 4afd 0000 4b55 0000 4b79 0000     aJ...J..UK..yK..
    9014:	4b95 0000 4bd1 0000 4c05 0000               .K...K...L..

00009020 <vtable for sjsu::cortex::SystemTimer>:
	...
    9028:	46ad 0000 473d 0000 4911 0000 475d 0000     .F..=G...I..]G..

00009038 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()::file>:
    9038:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...

00009048 <__sf_fake_stderr>:
	...

00009068 <__sf_fake_stdin>:
	...

00009088 <__sf_fake_stdout>:
	...
